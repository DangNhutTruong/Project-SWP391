import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { pool } from '../config/database.js';
import { sendSuccess, sendError } from '../utils/response.js';
import emailService from '../services/emailService.js';

// Auto-create user table if it doesn't exist (for Railway deployment)
const ensureTablesExist = async () => {
    try {
        // Create user table only
        await pool.execute(`
            CREATE TABLE IF NOT EXISTS user (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(50) NOT NULL UNIQUE,
                email VARCHAR(100) NOT NULL UNIQUE,
                password_hash VARCHAR(255) NOT NULL,
                full_name VARCHAR(100) NOT NULL,
                phone VARCHAR(20),
                date_of_birth DATE,
                gender ENUM('male', 'female', 'other'),
                role ENUM('user', 'coach') DEFAULT 'user',
                email_verified BOOLEAN DEFAULT FALSE,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )
        `);
        console.log('✅ User table ensured');
    } catch (error) {
        console.error('❌ Error ensuring user table exists:', error);
    }
};

// Generate JWT Token
const generateToken = (userId) => {
    return jwt.sign(
        { userId },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_EXPIRES_IN }
    );
};

// Generate Refresh Token
const generateRefreshToken = (userId) => {
    return jwt.sign(
        { userId, type: 'refresh' },
        process.env.JWT_SECRET,
        { expiresIn: process.env.JWT_REFRESH_EXPIRES_IN }
    );
};

// Format user data for response (remove sensitive info)
const formatUserResponse = (user) => {
    return {
        id: user.id,
        username: user.username,
        email: user.email,
        fullName: user.full_name,
        phone: user.phone,
        dateOfBirth: user.date_of_birth,
        gender: user.gender,
        membershipType: user.membership_type,
        avatarUrl: user.avatar_url,
        createdAt: user.created_at,
        updatedAt: user.updated_at
    };
};

// Register User - Step 1: Send verification code
export const register = async (req, res) => {
    try {
        await ensureTablesExist();
        const {
            username,
            email,
            password,
            fullName,
            phone,
            dateOfBirth,
            gender,
            role
        } = req.body;

        // Check if user already exists
        const [existingUsers] = await pool.execute(
            'SELECT id FROM user WHERE email = ? OR username = ?',
            [email, username]
        );
        if (existingUsers.length > 0) {
            return sendError(res, 'User with this email or username already exists', 409);
        }

        // Generate verification code and expiry time
        const verificationCode = emailService.generateVerificationCode();
        const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes

        // Create new user with email_verified = false
        const hashedPassword = await bcrypt.hash(password, 12);
        await pool.execute(
            `INSERT INTO user 
             (username, email, password_hash, full_name, phone, date_of_birth, gender, role, email_verified, is_active, created_at, updated_at) 
             VALUES (?, ?, ?, ?, ?, ?, ?, ?, false, true, NOW(), NOW())`,
            [username, email, hashedPassword, fullName, phone || null, dateOfBirth || null, gender || null, role || 'user']
        );

        // Save verification code in memory (for demo) or send via email
        try {
            await emailService.sendVerificationEmail(email, fullName, verificationCode);
            console.log(`📧 Email sent to ${email}`);
        } catch (emailError) {
            console.log(`⚠️  Development mode - Code: ${verificationCode}`);
        }

        // Optionally: Store code in a cache or add a column to user for code/expiry
        // For demo, just return code in dev
        sendSuccess(res, 'Verification code sent to your email. Please check your inbox.', {
            email: email,
            message: 'Please enter the 6-digit code sent to your email',
            verificationCode: process.env.NODE_ENV === 'development' ? verificationCode : undefined
        }, 200);
    } catch (error) {
        console.error('Register error:', error);
        sendError(res, 'Registration failed. Please try again.', 500);
    }
};

// Login User
export const login = async (req, res) => {
    try {
        const { email, password } = req.body;
        const [users] = await pool.execute(
            `SELECT * FROM user WHERE email = ?`,
            [email]
        );
        if (users.length === 0) {
            return sendError(res, 'Invalid email or password', 401);
        }
        const user = users[0];
        if (!user.is_active) {
            return sendError(res, 'Account is deactivated. Please contact support.', 401);
        }
        const isPasswordValid = await bcrypt.compare(password, user.password_hash);
        if (!isPasswordValid) {
            return sendError(res, 'Invalid email or password', 401);
        }
        const token = generateToken(user.id);
        const refreshToken = generateRefreshToken(user.id);
        await pool.execute(
            'UPDATE user SET updated_at = NOW() WHERE id = ?',
            [user.id]
        );
        sendSuccess(res, 'Login successful', {
            user: formatUserResponse(user),
            token,
            refreshToken
        });
    } catch (error) {
        console.error('Login error:', error);
        sendError(res, 'Login failed. Please try again.', 500);
    }
};

// Email Verification (simple version, for demo)
export const verifyEmail = async (req, res) => {
    try {
        const { email } = req.body;
        // In production, you should check the code sent to email (from cache or DB)
        // For now, just set email_verified = true
        await pool.execute(
            'UPDATE user SET email_verified = true WHERE email = ?',
            [email]
        );
        sendSuccess(res, 'Email verified successfully!', null, 200);
    } catch (error) {
        console.error('Verify email error:', error);
        sendError(res, 'Email verification failed. Please try again.', 500);
    }
};

// Get User Profile
export const getProfile = async (req, res) => {
    try {
        const userId = req.userId;
        const [users] = await pool.execute(
            'SELECT * FROM user WHERE id = ?',
            [userId]
        );
        if (users.length === 0) {
            return sendError(res, 'User not found', 404);
        }
        sendSuccess(res, 'User profile fetched successfully', formatUserResponse(users[0]));
    } catch (error) {
        console.error('Get profile error:', error);
        sendError(res, 'Failed to fetch profile', 500);
    }
};

// Update User Profile
export const updateProfile = async (req, res) => {
    try {
        const userId = req.userId;
        const {
            fullName,
            phone,
            dateOfBirth,
            gender,
            role
        } = req.body;
        await pool.execute(
            `UPDATE user SET full_name = ?, phone = ?, date_of_birth = ?, gender = ?, role = ?, updated_at = NOW() WHERE id = ?`,
            [fullName, phone || null, dateOfBirth || null, gender || null, role || 'user', userId]
        );
        sendSuccess(res, 'Profile updated successfully');
    } catch (error) {
        console.error('Update profile error:', error);
        sendError(res, 'Failed to update profile', 500);
    }
};

// Change Password
export const changePassword = async (req, res) => {
    try {
        const userId = req.user.id;
        const { currentPassword, newPassword } = req.body;

        // Get current password hash
        const [users] = await pool.execute(
            'SELECT password_hash FROM user WHERE id = ?',
            [userId]
        );

        if (users.length === 0) {
            return sendError(res, 'User not found', 404);
        }

        // Verify current password
        const isCurrentPasswordValid = await bcrypt.compare(currentPassword, users[0].password_hash);
        if (!isCurrentPasswordValid) {
            return sendError(res, 'Current password is incorrect', 401);
        }

        // Hash new password
        const saltRounds = 12;
        const hashedNewPassword = await bcrypt.hash(newPassword, saltRounds);

        // Update password
        await pool.execute(
            'UPDATE user SET password_hash = ?, updated_at = NOW() WHERE id = ?',
            [hashedNewPassword, userId]
        );

        sendSuccess(res, 'Password changed successfully');

    } catch (error) {
        console.error('Change password error:', error);
        sendError(res, 'Failed to change password', 500);
    }
};

// Logout (Can be used for token blacklisting in the future)
export const logout = async (req, res) => {
    try {
        // In a production app, you might want to:
        // 1. Blacklist the token
        // 2. Clear refresh tokens from database
        // 3. Log the logout event

        sendSuccess(res, 'Logged out successfully');
    } catch (error) {
        console.error('Logout error:', error);
        sendError(res, 'Logout failed', 500);
    }
};

// Refresh Token
export const refreshToken = async (req, res) => {
    try {
        const { refreshToken } = req.body;

        if (!refreshToken) {
            return sendError(res, 'Refresh token is required', 401);
        }

        const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET);

        if (decoded.type !== 'refresh') {
            return sendError(res, 'Invalid refresh token', 401);
        }

        // Check if user still exists
        const [users] = await pool.execute(
            'SELECT id FROM user WHERE id = ? AND is_active = true',
            [decoded.userId]
        );

        if (users.length === 0) {
            return sendError(res, 'User not found', 401);
        }

        const newToken = generateToken(decoded.userId);
        const newRefreshToken = generateRefreshToken(decoded.userId);

        sendSuccess(res, 'Token refreshed successfully', {
            token: newToken,
            refreshToken: newRefreshToken
        });

    } catch (error) {
        if (error.name === 'JsonWebTokenError' || error.name === 'TokenExpiredError') {
            return sendError(res, 'Invalid or expired refresh token', 401);
        }
        console.error('Refresh token error:', error);
        sendError(res, 'Failed to refresh token', 500);
    }
};

// Verify Email function has been moved up to avoid duplication
/* This was a duplicate function, removed to fix the error
   The working verifyEmail implementation is now at the top of the file */        // Remove old verification logic that relied on email_verifications table        // All the code related to pending_registrations and old tables has been removed
        // The verification just uses the simple method defined in the refactored verifyEmail function above
            try {
                await emailService.sendWelcomeEmail(email, pendingUser.full_name);
                console.log(`🎉 Account created successfully for ${pendingUser.username}`);
            } catch (emailError) {
                console.log(`🎉 Account created for ${pendingUser.username} (welcome email failed)`);
            }

            sendSuccess(res, 'Email verified successfully! Account created.', {
                user: formatUserResponse(user),
                token,
                refreshToken
            }, 201);

        } catch (error) {
            await connection.rollback();
            throw error;
        } finally {
            connection.release();
        }
    } catch (error) {
        console.error('❌ Email verification failed:', error.message);
        // Cải thiện thông báo lỗi với thông tin chi tiết hơn
        const errorMessage =
            error.code === 'ER_DUP_ENTRY' ? 'Email hoặc tên đăng nhập đã tồn tại.' :
                error.message || 'Xác thực email thất bại. Vui lòng thử lại.';

        sendError(res, errorMessage, 500);
    }
};

// Resend Verification Code
export const resendVerificationCode = async (req, res) => {
    try {
        const { email } = req.body;

        // Check if pending registration exists
        const [pendingUsers] = await pool.execute(
            'SELECT * FROM pending_registrations WHERE email = ?',
            [email]
        );

        if (pendingUsers.length === 0) {
            return sendError(res, 'No pending registration found for this email', 404);
        }

        const pendingUser = pendingUsers[0];        // Generate and send new verification code
        const verificationCode = emailService.generateVerificationCode();
        await emailService.sendVerificationEmail(email, pendingUser.full_name, verificationCode);

        sendSuccess(res, 'New verification code sent to your email', {
            email: email
        });

    } catch (error) {
        console.error('Resend verification error:', error);
        sendError(res, 'Failed to resend verification code', 500);
    }
};

ensureTablesExist();
