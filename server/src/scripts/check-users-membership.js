/**
 * Script ƒë·ªÉ ki·ªÉm tra v√† c·∫≠p nh·∫≠t c·ªôt membership trong b·∫£ng users
 */
import { pool } from '../config/database.js';
import dotenv from 'dotenv';

dotenv.config();

async function checkAndFixUsersMembership() {
  let connection;
  try {
    console.log('üîç Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng users v√† c·ªôt membership...');

    connection = await pool.getConnection();
    
    // Ki·ªÉm tra c·∫•u tr√∫c c·ªôt membership
    const [columns] = await connection.execute('DESCRIBE users');
    console.log('‚úÖ C·∫•u tr√∫c b·∫£ng users:');
    
    // L·ªçc ra c·ªôt membership ƒë·ªÉ ki·ªÉm tra
    const membershipColumn = columns.find(col => col.Field === 'membership');
    console.log('Column "membership":', membershipColumn || 'Kh√¥ng t√¨m th·∫•y');
    
    // Ki·ªÉm tra c√°c c·ªôt li√™n quan ƒë·∫øn membership
    const membershipIdColumn = columns.find(col => col.Field === 'membership_id');
    console.log('Column "membership_id":', membershipIdColumn || 'Kh√¥ng t√¨m th·∫•y');
    
    // Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i
    const [users] = await connection.execute('SELECT id, email, full_name, membership FROM users LIMIT 5');
    console.log('D·ªØ li·ªáu users hi·ªán t·∫°i:');
    console.table(users);
    
    // Ki·ªÉm tra d·ªØ li·ªáu trong b·∫£ng user_memberships
    const [memberships] = await connection.execute(`
      SELECT um.user_id, um.package_id, p.name as package_name, um.status 
      FROM user_memberships um 
      JOIN package p ON um.package_id = p.id 
      WHERE um.status = 'active' 
      LIMIT 5
    `);
    console.log('D·ªØ li·ªáu user_memberships hi·ªán t·∫°i:');
    console.table(memberships);
    
    console.log('\nüîß Th·ª≠ c·∫≠p nh·∫≠t membership cho m·ªôt user...');
    // L·∫•y m·ªôt user ƒë·ªÉ test
    const [testUser] = await connection.execute('SELECT id FROM users LIMIT 1');
    if (testUser.length > 0) {
      const userId = testUser[0].id;
      
      try {
        // Th·ª≠ c·∫≠p nh·∫≠t tr·ª±c ti·∫øp
        await connection.execute(`
          UPDATE users SET membership = 'premium' WHERE id = ?
        `, [userId]);
        console.log(`‚úÖ C·∫≠p nh·∫≠t tr·ª±c ti·∫øp th√†nh c√¥ng cho user ${userId}`);
        
        // Ki·ªÉm tra sau khi c·∫≠p nh·∫≠t
        const [updatedUser] = await connection.execute('SELECT id, email, full_name, membership FROM users WHERE id = ?', [userId]);
        console.log('User sau khi c·∫≠p nh·∫≠t:');
        console.table(updatedUser);
        
        // Kh√¥i ph·ª•c gi√° tr·ªã
        await connection.execute(`
          UPDATE users SET membership = 'free' WHERE id = ?
        `, [userId]);
        console.log('‚úÖ ƒê√£ kh√¥i ph·ª•c gi√° tr·ªã ban ƒë·∫ßu');
      } catch (updateError) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·ª±c ti·∫øp:', updateError.message);
        console.log('Ki·ªÉm tra xem c·ªôt membership c√≥ th·ªÉ l√† ENUM v·ªõi c√°c gi√° tr·ªã h·∫°n ch·∫ø...');
        
        // Ki·ªÉm tra c√°c gi√° tr·ªã ENUM n·∫øu c√≥
        if (membershipColumn && membershipColumn.Type.startsWith('enum')) {
          console.log('C·ªôt membership l√† ENUM v·ªõi c√°c gi√° tr·ªã:', membershipColumn.Type);
        }
      }
      
      // Ki·ªÉm tra c√°ch c·∫≠p nh·∫≠t c·ªßa h√†m purchasePackage
      console.log('\nüîß M√¥ ph·ªèng c·∫≠p nh·∫≠t nh∆∞ trong h√†m purchasePackage...');
      try {
        const packageId = 2; // gi·∫£ s·ª≠ g√≥i premium c√≥ id = 2
        const membershipValue = 'premium';
        
        await connection.execute(`
          UPDATE users 
          SET membership_id = ?, membership_updated_at = CURRENT_TIMESTAMP,
              membership = ?
          WHERE id = ?
        `, [packageId, membershipValue, userId]);
        
        console.log(`‚úÖ M√¥ ph·ªèng c·∫≠p nh·∫≠t th√†nh c√¥ng cho user ${userId}`);
        
        // Ki·ªÉm tra sau khi c·∫≠p nh·∫≠t
        const [updatedUser] = await connection.execute('SELECT id, email, full_name, membership, membership_id FROM users WHERE id = ?', [userId]);
        console.log('User sau khi m√¥ ph·ªèng:');
        console.table(updatedUser);
        
        // Kh√¥i ph·ª•c gi√° tr·ªã
        await connection.execute(`
          UPDATE users SET membership = 'free', membership_id = 1 WHERE id = ?
        `, [userId]);
      } catch (mockError) {
        console.error('‚ùå L·ªói khi m√¥ ph·ªèng c·∫≠p nh·∫≠t:', mockError.message);
        
        // Th·ª≠ c·∫≠p nh·∫≠t t·ª´ng c·ªôt ri√™ng bi·ªát ƒë·ªÉ t√¨m ra v·∫•n ƒë·ªÅ
        console.log('\nTh·ª≠ c·∫≠p nh·∫≠t t·ª´ng c·ªôt m·ªôt...');
        
        try {
          await connection.execute('UPDATE users SET membership = ? WHERE id = ?', ['premium', userId]);
          console.log('‚úÖ C·∫≠p nh·∫≠t c·ªôt membership th√†nh c√¥ng');
        } catch (err) {
          console.error('‚ùå L·ªói c·∫≠p nh·∫≠t c·ªôt membership:', err.message);
        }
        
        try {
          await connection.execute('UPDATE users SET membership_id = ? WHERE id = ?', [2, userId]);
          console.log('‚úÖ C·∫≠p nh·∫≠t c·ªôt membership_id th√†nh c√¥ng');
        } catch (err) {
          console.error('‚ùå L·ªói c·∫≠p nh·∫≠t c·ªôt membership_id:', err.message);
        }
      }
    }

  } catch (error) {
    console.error('‚ùå L·ªói ki·ªÉm tra:', error);
  } finally {
    if (connection) {
      connection.release();
    }
    await pool.end();
  }
}

checkAndFixUsersMembership();
