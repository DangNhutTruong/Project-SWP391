/**
 * Script ƒë·ªÉ m·ªü r·ªông c·ªôt membership trong b·∫£ng users ƒë·ªÉ h·ªó tr·ª£ gi√° tr·ªã 'pro'
 */
import { pool } from '../config/database.js';
import dotenv from 'dotenv';

dotenv.config();

async function extendMembershipEnumValues() {
  let connection;
  try {
    console.log('üîç Ki·ªÉm tra v√† m·ªü r·ªông c·ªôt membership...');

    connection = await pool.getConnection();
    await connection.beginTransaction();
    
    // Ki·ªÉm tra c·∫•u tr√∫c hi·ªán t·∫°i c·ªßa c·ªôt membership
    const [columns] = await connection.execute('DESCRIBE users');
    const membershipColumn = columns.find(col => col.Field === 'membership');
    
    if (!membershipColumn) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt membership trong b·∫£ng users');
      console.log('Th√™m c·ªôt membership v·ªõi h·ªó tr·ª£ gi√° tr·ªã pro...');
      
      try {
        await connection.execute(`
          ALTER TABLE users 
          ADD COLUMN membership ENUM('free', 'premium', 'pro') DEFAULT 'free'
        `);
        console.log('‚úÖ ƒê√£ th√™m c·ªôt membership v·ªõi c√°c gi√° tr·ªã: free, premium, pro');
      } catch (error) {
        console.error('‚ùå L·ªói khi th√™m c·ªôt membership:', error.message);
      }
    } else if (membershipColumn.Type.toLowerCase().includes('enum')) {
      console.log('C·ªôt membership hi·ªán t·∫°i:', membershipColumn);
      
      // Ki·ªÉm tra xem 'pro' ƒë√£ c√≥ trong ENUM ch∆∞a
      const enumValues = membershipColumn.Type.match(/'([^']*)'/g).map(v => v.replace(/'/g, ''));
      console.log('C√°c gi√° tr·ªã ENUM hi·ªán t·∫°i:', enumValues);
      
      if (!enumValues.includes('pro')) {
        console.log('üîß M·ªü r·ªông ENUM ƒë·ªÉ bao g·ªìm gi√° tr·ªã "pro"...');
        
        try {
          await connection.execute(`
            ALTER TABLE users 
            MODIFY COLUMN membership ENUM('free', 'premium', 'pro') DEFAULT 'free'
          `);
          console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c·ªôt membership ƒë·ªÉ h·ªó tr·ª£ gi√° tr·ªã "pro"');
          
          // C·∫≠p nh·∫≠t c√°c b·∫£n ghi c√≥ g√≥i pro nh∆∞ng ƒëang ƒë∆∞·ª£c ƒë·∫∑t l√† premium
          // L·∫•y danh s√°ch g√≥i Pro
          const [proPackages] = await connection.execute(`
            SELECT id FROM package WHERE name LIKE '%pro%' OR name LIKE '%Pro%'
          `);
          
          if (proPackages.length > 0) {
            const proPackageIds = proPackages.map(pkg => pkg.id);
            console.log('C√°c g√≥i Pro:', proPackageIds);
            
            // T√¨m ng∆∞·ªùi d√πng c√≥ membership_id l√† c√°c g√≥i Pro nh∆∞ng membership kh√¥ng ph·∫£i l√† 'pro'
            const [usersToUpdate] = await connection.execute(`
              SELECT id, membership, membership_id FROM users 
              WHERE membership_id IN (${proPackageIds.join(',')}) AND membership != 'pro'
            `);
            
            console.log(`T√¨m th·∫•y ${usersToUpdate.length} ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t t·ª´ premium th√†nh pro`);
            
            for (const user of usersToUpdate) {
              console.log(`C·∫≠p nh·∫≠t user ${user.id}: ${user.membership} -> pro`);
              await connection.execute(`
                UPDATE users SET membership = 'pro' WHERE id = ?
              `, [user.id]);
            }
          }
        } catch (error) {
          console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t c·ªôt membership:', error.message);
          throw error;
        }
      } else {
        console.log('‚úÖ C·ªôt membership ƒë√£ h·ªó tr·ª£ gi√° tr·ªã "pro"');
      }
    }
    
    await connection.commit();
    
    // Ki·ªÉm tra l·∫°i c·∫•u tr√∫c sau khi s·ª≠a
    const [updatedColumns] = await connection.execute('DESCRIBE users');
    const updatedMembershipColumn = updatedColumns.find(col => col.Field === 'membership');
    console.log('\n‚úÖ C·∫•u tr√∫c c·ªôt membership sau khi s·ª≠a:', updatedMembershipColumn);
    
    // Ki·ªÉm tra c√°c g√≥i trong b·∫£ng package
    const [packages] = await connection.execute('SELECT id, name FROM package');
    console.log('\nüìã C√°c g√≥i trong b·∫£ng package:');
    console.table(packages);
    
    console.log('\nüìã G·ª£i √Ω t√™n membership cho m·ªói g√≥i:');
    for (const pkg of packages) {
      let suggestedType = 'free';
      
      if (pkg.name) {
        const packageName = pkg.name.toLowerCase();
        if (packageName.includes('pro')) {
          suggestedType = 'pro';
        } else if (packageName.includes('premium')) {
          suggestedType = 'premium';
        } else if (pkg.id !== 1) {
          suggestedType = 'premium';
        }
      }
      
      console.log(`- G√≥i ${pkg.id} (${pkg.name}): ${suggestedType}`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói t·ªïng th·ªÉ:', error);
    if (connection) {
      await connection.rollback();
    }
  } finally {
    if (connection) {
      connection.release();
    }
    await pool.end();
  }
}

extendMembershipEnumValues();
