/**
 * Script ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a ƒë·ªãnh nghƒ©a c·ªôt membership trong b·∫£ng users
 */
import { pool } from '../config/database.js';
import dotenv from 'dotenv';

dotenv.config();

async function fixMembershipColumnDefinition() {
  let connection;
  try {
    console.log('üîß Ki·ªÉm tra v√† s·ª≠a ƒë·ªãnh nghƒ©a c·ªôt membership...');

    connection = await pool.getConnection();
    await connection.beginTransaction();
    
    // Ki·ªÉm tra c·∫•u tr√∫c hi·ªán t·∫°i c·ªßa c·ªôt membership
    const [columns] = await connection.execute('DESCRIBE users');
    const membershipColumn = columns.find(col => col.Field === 'membership');
    
    if (!membershipColumn) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt membership trong b·∫£ng users');
      console.log('Th√™m c·ªôt membership...');
      
      try {
        await connection.execute(`
          ALTER TABLE users 
          ADD COLUMN membership ENUM('free', 'premium') DEFAULT 'free'
        `);
        console.log('‚úÖ ƒê√£ th√™m c·ªôt membership');
      } catch (error) {
        console.error('‚ùå L·ªói khi th√™m c·ªôt membership:', error.message);
      }
    } else {
      console.log('C·ªôt membership ƒë√£ t·ªìn t·∫°i:', membershipColumn);
      
      // N·∫øu c·ªôt membership kh√¥ng ph·∫£i ki·ªÉu ENUM ƒë√∫ng, c·∫≠p nh·∫≠t n√≥
      if (!membershipColumn.Type.includes('free') || !membershipColumn.Type.includes('premium')) {
        console.log('C·ªôt membership kh√¥ng c√≥ gi√° tr·ªã ENUM ƒë√∫ng. Th·ª≠ s·ª≠a...');
        
        try {
          await connection.execute(`
            ALTER TABLE users 
            MODIFY COLUMN membership ENUM('free', 'premium') DEFAULT 'free'
          `);
          console.log('‚úÖ ƒê√£ s·ª≠a ƒë·ªãnh nghƒ©a c·ªôt membership');
        } catch (error) {
          console.error('‚ùå L·ªói khi s·ª≠a c·ªôt membership:', error.message);
        }
      }
    }
    
    // ƒê·∫£m b·∫£o c·ªôt membership_id t·ªìn t·∫°i
    const membershipIdColumn = columns.find(col => col.Field === 'membership_id');
    
    if (!membershipIdColumn) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt membership_id trong b·∫£ng users');
      console.log('Th√™m c·ªôt membership_id...');
      
      try {
        await connection.execute(`
          ALTER TABLE users 
          ADD COLUMN membership_id INT DEFAULT 1
        `);
        console.log('‚úÖ ƒê√£ th√™m c·ªôt membership_id');
      } catch (error) {
        console.error('‚ùå L·ªói khi th√™m c·ªôt membership_id:', error.message);
      }
    }
    
    // ƒê·∫£m b·∫£o c·ªôt membership_updated_at t·ªìn t·∫°i
    const membershipUpdatedAtColumn = columns.find(col => col.Field === 'membership_updated_at');
    
    if (!membershipUpdatedAtColumn) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt membership_updated_at trong b·∫£ng users');
      console.log('Th√™m c·ªôt membership_updated_at...');
      
      try {
        await connection.execute(`
          ALTER TABLE users 
          ADD COLUMN membership_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        `);
        console.log('‚úÖ ƒê√£ th√™m c·ªôt membership_updated_at');
      } catch (error) {
        console.error('‚ùå L·ªói khi th√™m c·ªôt membership_updated_at:', error.message);
      }
    }
    
    // Ki·ªÉm tra l·∫°i c·∫•u tr√∫c sau khi s·ª≠a
    const [updatedColumns] = await connection.execute('DESCRIBE users');
    console.log('\n‚úÖ C·∫•u tr√∫c b·∫£ng users sau khi s·ª≠a:');
    const membershipColumns = updatedColumns.filter(col => 
      col.Field === 'membership' || col.Field === 'membership_id' || col.Field === 'membership_updated_at'
    );
    console.table(membershipColumns);
    
    await connection.commit();
    
    // Ki·ªÉm tra c√°c gi√° tr·ªã membership hi·ªán t·∫°i
    const [userMemberships] = await connection.execute(`
      SELECT id, email, full_name, membership, membership_id 
      FROM users 
      LIMIT 5
    `);
    
    console.log('\nGi√° tr·ªã membership hi·ªán t·∫°i:');
    console.table(userMemberships);
    
    // C·∫≠p nh·∫≠t c√°c gi√° tr·ªã membership kh√¥ng h·ª£p l·ªá
    try {
      await connection.execute(`
        UPDATE users 
        SET membership = 'free' 
        WHERE membership IS NULL OR membership NOT IN ('free', 'premium')
      `);
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t c√°c gi√° tr·ªã membership kh√¥ng h·ª£p l·ªá th√†nh "free"');
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° tr·ªã membership:', error.message);
    }
    
    // ƒê·ªìng b·ªô gi√° tr·ªã membership v·ªõi membership_id
    try {
      await connection.execute(`
        UPDATE users 
        SET membership = 'premium' 
        WHERE membership_id = 2 AND membership = 'free'
      `);
      await connection.execute(`
        UPDATE users 
        SET membership = 'free' 
        WHERE membership_id = 1 AND membership = 'premium'
      `);
      console.log('‚úÖ ƒê√£ ƒë·ªìng b·ªô gi√° tr·ªã membership v·ªõi membership_id');
    } catch (error) {
      console.error('‚ùå L·ªói khi ƒë·ªìng b·ªô gi√° tr·ªã:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói chung:', error);
    if (connection) {
      await connection.rollback();
    }
  } finally {
    if (connection) {
      connection.release();
    }
    await pool.end();
  }
}

fixMembershipColumnDefinition();
