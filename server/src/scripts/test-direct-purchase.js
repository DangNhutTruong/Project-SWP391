/**
 * Script ƒë·ªÉ test tr·ª±c ti·∫øp API mua g√≥i Premium v√† ki·ªÉm tra k·∫øt qu·∫£
 */
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
import { pool } from '../config/database.js';
import dotenv from 'dotenv';

dotenv.config();

// Thay ƒë·ªïi c√°c gi√° tr·ªã n√†y ƒë·ªÉ test
const TEST_USER_ID = 1;  // ID c·ªßa user c·∫ßn test
const TEST_SECRET = process.env.JWT_SECRET || 'your-default-secret';

const generateTestToken = () => {
  return jwt.sign(
    { id: TEST_USER_ID },
    TEST_SECRET,
    { expiresIn: '1h' }
  );
};

const testDirectPurchase = async () => {
  try {
    console.log(`üß™ Test mua g√≥i Premium cho ng∆∞·ªùi d√πng ID=${TEST_USER_ID}`);
    const token = generateTestToken();

    console.log('üìã B∆Ø·ªöC 1: Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng tr∆∞·ªõc khi mua');
    let connection = await pool.getConnection();
    try {
      const [user] = await connection.execute(
        'SELECT id, email, full_name, membership, membership_id FROM users WHERE id = ?',
        [TEST_USER_ID]
      );
      console.log('Th√¥ng tin ng∆∞·ªùi d√πng tr∆∞·ªõc khi mua:');
      console.table(user);
    } finally {
      connection.release();
    }

    console.log('\nüìã B∆Ø·ªöC 2: G·ªçi API mua g√≥i Premium');
    // D·ªØ li·ªáu cho vi·ªác mua g√≥i
    const purchaseData = {
      packageId: 2, // ID g√≥i Premium
      paymentMethod: 'momo'
    };

    // G·ªçi API mua g√≥i
    const response = await fetch('http://localhost:3001/api/packages/purchase', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(purchaseData)
    });

    const result = await response.json();
    console.log('K·∫øt qu·∫£ API mua g√≥i:');
    console.log(JSON.stringify(result, null, 2));

    if (!result.success) {
      console.error('‚ùå L·ªói mua g√≥i:', result.message);
      return;
    }

    console.log('\nüìã B∆Ø·ªöC 3: Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng SAU khi mua');
    connection = await pool.getConnection();
    try {
      const [user] = await connection.execute(
        'SELECT id, email, full_name, membership, membership_id FROM users WHERE id = ?',
        [TEST_USER_ID]
      );
      console.log('Th√¥ng tin ng∆∞·ªùi d√πng sau khi mua:');
      console.table(user);

      console.log('\nüìã B∆Ø·ªöC 4: Ki·ªÉm tra th√¥ng tin g√≥i hi·ªán t·∫°i trong user_memberships');
      const [memberships] = await connection.execute(`
        SELECT um.id, um.user_id, um.package_id, p.name as package_name, um.status, um.start_date, um.end_date
        FROM user_memberships um
        JOIN package p ON um.package_id = p.id
        WHERE um.user_id = ? AND um.status = 'active'
      `, [TEST_USER_ID]);

      console.log('Th√¥ng tin g√≥i th√†nh vi√™n hi·ªán t·∫°i:');
      console.table(memberships);

      if (memberships.length > 0 && user.length > 0) {
        const membershipPackageId = memberships[0].package_id;
        const userMembershipId = user[0].membership_id;
        const userMembership = user[0].membership;

        console.log('\nüîÑ So s√°nh k·∫øt qu·∫£:');
        console.log(`- ID g√≥i trong user_memberships: ${membershipPackageId}`);
        console.log(`- ID g√≥i trong users.membership_id: ${userMembershipId}`);
        console.log(`- Tr·∫°ng th√°i membership trong users: "${userMembership}"`);

        if (membershipPackageId === userMembershipId && userMembership === 'premium') {
          console.log('‚úÖ D·ªØ li·ªáu ƒë·ªìng b·ªô v√† ch√≠nh x√°c!');
        } else {
          console.log('‚ùå D·ªØ li·ªáu kh√¥ng ƒë·ªìng b·ªô:');
          
          if (membershipPackageId !== userMembershipId) {
            console.log('  - ID g√≥i kh√¥ng kh·ªõp gi·ªØa hai b·∫£ng');
          }
          
          if (userMembership !== 'premium') {
            console.log('  - Tr·∫°ng th√°i membership kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh "premium"');
          }
        }
      }

      // C·∫≠p nh·∫≠t th·ªß c√¥ng n·∫øu c·∫ßn thi·∫øt
      if (user.length > 0 && user[0].membership !== 'premium') {
        console.log('\nüîß C·∫≠p nh·∫≠t th·ªß c√¥ng tr·∫°ng th√°i membership:');
        try {
          await connection.execute(
            'UPDATE users SET membership = "premium" WHERE id = ?',
            [TEST_USER_ID]
          );
          console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t th·ªß c√¥ng th√†nh "premium"');
          
          // Ki·ªÉm tra l·∫°i
          const [updatedUser] = await connection.execute(
            'SELECT id, membership FROM users WHERE id = ?',
            [TEST_USER_ID]
          );
          console.log('Sau khi c·∫≠p nh·∫≠t th·ªß c√¥ng:', updatedUser[0]);
        } catch (updateError) {
          console.error('‚ùå L·ªói c·∫≠p nh·∫≠t th·ªß c√¥ng:', updateError.message);
        }
      }
    } finally {
      connection.release();
    }

  } catch (error) {
    console.error('‚ùå L·ªói test:', error);
  } finally {
    await pool.end();
  }
};

testDirectPurchase();
