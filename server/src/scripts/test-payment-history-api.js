import fetch from 'node-fetch';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// API base URL
const API_BASE_URL = process.env.API_URL || 'http://localhost:3000/api';
let authToken = '';

/**
 * ƒêƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token
 */
async function login() {
  try {
    console.log('üîë ƒêang ƒëƒÉng nh·∫≠p...');
    
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: process.env.TEST_USER_EMAIL || 'user@example.com',
        password: process.env.TEST_USER_PASSWORD || 'password123'
      })
    });
    
    const data = await response.json();
    
    if (data.success && data.data.token) {
      authToken = data.data.token;
      console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng, ƒë√£ nh·∫≠n token.');
      return true;
    } else {
      console.error('‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i:', data.message || 'Unknown error');
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi ƒëƒÉng nh·∫≠p:', error.message);
    return false;
  }
}

/**
 * Ki·ªÉm tra API l·ªãch s·ª≠ thanh to√°n v·ªõi c√°c b·ªô tham s·ªë kh√°c nhau
 */
async function testPaymentHistoryAPI() {
  try {
    if (!authToken) {
      console.error('‚ùå C·∫ßn ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi ki·ªÉm tra API');
      return;
    }
    
    console.log('\nüß™ Ki·ªÉm tra API l·ªãch s·ª≠ thanh to√°n');
    
    // C√°c b·ªô test ƒë·ªÉ th·ª≠
    const testCases = [
      { name: 'M·∫∑c ƒë·ªãnh', params: {} },
      { name: 'Limit v√† page', params: { limit: 5, page: 1 } },
      { name: 'L·ªçc theo tr·∫°ng th√°i', params: { status: 'completed' } },
      { name: 'L·ªçc theo ng√†y b·∫Øt ƒë·∫ßu', params: { startDate: '2023-01-01' } },
      { name: 'L·ªçc theo ng√†y k·∫øt th√∫c', params: { endDate: '2023-12-31' } },
      { name: 'L·ªçc theo kho·∫£ng ng√†y', params: { startDate: '2023-01-01', endDate: '2023-12-31' } },
      { name: 'T·∫•t c·∫£ c√°c tham s·ªë', params: { limit: 5, page: 1, status: 'completed', startDate: '2023-01-01', endDate: '2023-12-31' } }
    ];
    
    for (const testCase of testCases) {
      console.log(`\nüìù Test case: ${testCase.name}`);
      
      // T·∫°o query string t·ª´ params
      const queryString = Object.entries(testCase.params)
        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
        .join('&');
      
      const url = `${API_BASE_URL}/payments/user/history${queryString ? '?' + queryString : ''}`;
      
      console.log(`üîó URL: ${url}`);
      
      const startTime = Date.now();
      const response = await fetch(url, {
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });
      const endTime = Date.now();
      
      const data = await response.json();
      
      console.log(`‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi: ${endTime - startTime}ms`);
      console.log(`üî¢ HTTP Status: ${response.status}`);
      
      if (data.success) {
        console.log('‚úÖ API tr·∫£ v·ªÅ th√†nh c√¥ng');
        console.log(`üìä T·ªïng s·ªë thanh to√°n: ${data.data.pagination.total}`);
        console.log(`üìÑ S·ªë thanh to√°n tr·∫£ v·ªÅ: ${data.data.payments.length}`);
      } else {
        console.error('‚ùå API tr·∫£ v·ªÅ l·ªói:', data.message || 'Unknown error');
        if (data.error) {
          console.error('üìù Chi ti·∫øt l·ªói:', data.error);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra API:', error.message);
  }
}

// Ch·∫°y test
async function runTests() {
  if (await login()) {
    await testPaymentHistoryAPI();
  }
}

runTests().catch(error => {
  console.error('‚ùå L·ªói khi ch·∫°y test:', error);
  process.exit(1);
});
