/**
 * Script ƒë∆°n gi·∫£n ƒë·ªÉ test API packages/purchase v·ªõi token c·ª©ng
 * Ph∆∞∆°ng ph√°p n√†y ƒë∆°n gi·∫£n h∆°n v√† √≠t b·ªã l·ªói
 */
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

// T·∫°o token th·ªß c√¥ng kh√¥ng d√πng database
async function testPurchaseAPI() {
  try {
    // T·∫°o token th·ªß c√¥ng - ph√π h·ª£p v·ªõi c·∫•u tr√∫c b·∫£ng users
    const JWT_SECRET = process.env.JWT_SECRET || 'your-default-secret';
    const payload = {
      id: 1, // ID ng∆∞·ªùi d√πng c·ª©ng 
      email: 'test@example.com',
      full_name: 'Test User', // S·ª≠ d·ª•ng full_name thay v√¨ name
      role: 'user'
    };
    
    console.log('üîë T·∫°o token c·ª©ng v·ªõi payload:', payload);
    const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
    
    // API URL v√† body
    const API_URL = 'http://localhost:5000/api/packages/purchase';
    const requestBody = {
      packageId: 2,
      paymentMethod: "momo"
    };
    
    console.log(`\nüì° G·ª≠i request ƒë·∫øn ${API_URL}`);
    console.log('üì¶ Body:', requestBody);
    console.log('üîê Authorization: Bearer ' + token.substring(0, 20) + '...');
    
    // G·ªçi API
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(requestBody)
    });
    
    // ƒê·ªçc v√† hi·ªÉn th·ªã response
    const responseData = await response.json();
    
    console.log(`\nüì• Status: ${response.status}`);
    console.log('üì• Response:');
    console.log(JSON.stringify(responseData, null, 2));
    
    // Ph√¢n t√≠ch l·ªói n·∫øu c√≥
    if (!response.ok) {
      console.log('\n‚ùå API tr·∫£ v·ªÅ l·ªói');
      if (responseData.error && responseData.error.includes('Bind parameters must not contain undefined')) {
        console.log('üí° G·ª£i √Ω: L·ªói n√†y x·∫£y ra khi c√≥ gi√° tr·ªã undefined ƒë∆∞·ª£c truy·ªÅn v√†o truy v·∫•n SQL');
        console.log('   - Ki·ªÉm tra c·∫•u tr√∫c JWT payload');
        console.log('   - ƒê·∫£m b·∫£o id trong token l√† m·ªôt s·ªë');
        console.log('   - Ki·ªÉm tra c·∫•u tr√∫c b·∫£ng users c√≥ kh·ªõp v·ªõi truy v·∫•n kh√¥ng');
      }
    } else {
      console.log('\n‚úÖ API th√†nh c√¥ng!');
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi test API:', error);
  }
}

testPurchaseAPI();
