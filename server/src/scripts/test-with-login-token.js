/**
 * Script ƒë·ªÉ test API purchase v·ªõi token t·ª´ login
 * S·ª≠ d·ª•ng: node src/scripts/test-with-login-token.js LOGIN_TOKEN
 */
import fetch from 'node-fetch';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config();

// L·∫•y token t·ª´ tham s·ªë d√≤ng l·ªánh
const token = process.argv[2];

if (!token) {
  console.error('‚ùå Vui l√≤ng cung c·∫•p token JWT!');
  console.log('S·ª≠ d·ª•ng: node src/scripts/test-with-login-token.js LOGIN_TOKEN');
  process.exit(1);
}

async function testWithLoginToken() {
  try {
    // Hi·ªÉn th·ªã th√¥ng tin token
    console.log('üîë S·ª≠ d·ª•ng token ƒë∆∞·ª£c cung c·∫•p...');
    
    // Decode token ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
    try {
      const decoded = jwt.decode(token);
      if (decoded) {
        console.log('Token payload:', JSON.stringify(decoded, null, 2));
      }
    } catch (decodeError) {
      console.log('Kh√¥ng th·ªÉ decode token (nh∆∞ng v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng)');
    }
    
    // API URL v√† body
    const API_URL = 'http://localhost:5000/api/packages/purchase';
    const requestBody = {
      packageId: 2,
      paymentMethod: "momo"
    };
    
    console.log(`\nüì° G·ª≠i request ƒë·∫øn ${API_URL}`);
    console.log('üì¶ Body:', requestBody);
    console.log('üîê Authorization: Bearer ' + token.substring(0, 20) + '...');
    
    // G·ªçi API
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(requestBody)
    });
    
    // ƒê·ªçc response
    const responseData = await response.json();
    
    console.log(`\nüì• Status: ${response.status}`);
    console.log('üì• Response:');
    console.log(JSON.stringify(responseData, null, 2));
    
    if (response.ok) {
      console.log('\n‚úÖ API call th√†nh c√¥ng!');
    } else {
      console.log('\n‚ùå API call th·∫•t b·∫°i!');
      
      // Ph√¢n t√≠ch l·ªói
      if (response.status === 401) {
        console.log('\nüí° L·ªói x√°c th·ª±c 401:');
        if (responseData.message && responseData.message.includes('missing')) {
          console.log('- Token kh√¥ng ch·ª©a ID ng∆∞·ªùi d√πng');
          console.log('- H√£y ki·ªÉm tra c·∫•u tr√∫c token v·ªõi l·ªánh: npm run decode-token YOUR_TOKEN');
        }
        
        console.log('\nüîß Th·ª≠ c√°c gi·∫£i ph√°p:');
        console.log('1. T·∫°o token m·ªõi v·ªõi script: npm run generate-token');
        console.log('2. Ki·ªÉm tra API ƒëƒÉng nh·∫≠p c√≥ ƒë·∫∑t ID ng∆∞·ªùi d√πng v√†o token kh√¥ng');
        console.log('3. C·∫≠p nh·∫≠t middleware ƒë·ªÉ h·ªó tr·ª£ ƒë·ªãnh d·∫°ng token n√†y');
      }
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi test API:', error);
  }
}

testWithLoginToken();
