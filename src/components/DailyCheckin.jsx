import React, { useState, useEffect } from "react";
import { FaCalendarCheck, FaSave } from "react-icons/fa";

const DailyCheckin = ({ onProgressUpdate, currentPlan }) => {
  const [todayData, setTodayData] = useState({
    date: new Date().toISOString().split("T")[0],
    targetCigarettes: 12, // S·∫Ω ƒë∆∞·ª£c t√≠nh t·ª´ k·∫ø ho·∫°ch
    actualCigarettes: 0,
    notes: "",
  });

  const [isSubmitted, setIsSubmitted] = useState(false);
  const [currentWeek, setCurrentWeek] = useState(1); // Tu·∫ßn hi·ªán t·∫°i
  const [streakDays, setStreakDays] = useState(0); // S·ªë ng√†y li√™n ti·∫øp ƒë·∫°t m·ª•c ti√™u
  const [toast, setToast] = useState({
    show: false,
    message: "",
    type: "success",
  }); // Th√¥ng b√°o d·∫°ng toast    // T√≠nh target cigarettes d·ª±a tr√™n k·∫ø ho·∫°ch v√† ng√†y hi·ªán t·∫°i
  const calculateTodayTarget = () => {
    // Ki·ªÉm tra k·ªπ c√°c tr∆∞·ªùng h·ª£p null/undefined
    if (!currentPlan) return 12;
    if (
      !currentPlan.weeks ||
      !Array.isArray(currentPlan.weeks) ||
      currentPlan.weeks.length === 0
    )
      return 12;
    if (!currentPlan.startDate) return currentPlan.weeks[0]?.amount || 12;

    try {
      const today = new Date();
      const startDate = new Date(currentPlan.startDate);

      // Ki·ªÉm tra ng√†y b·∫Øt ƒë·∫ßu h·ª£p l·ªá
      if (isNaN(startDate.getTime())) return currentPlan.weeks[0]?.amount || 12;

      const daysDiff = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
      const currentWeekNumber = Math.floor(daysDiff / 7) + 1;

      setCurrentWeek(currentWeekNumber);

      // T√¨m tu·∫ßn hi·ªán t·∫°i trong plan
      const currentWeekPlan = currentPlan.weeks.find(
        (w) => w.week === currentWeekNumber
      );
      if (currentWeekPlan) {
        // L·∫•y target c·ªßa tu·∫ßn tr∆∞·ªõc n·∫øu c√≥
        const prevWeekPlan = currentPlan.weeks.find(
          (w) => w.week === currentWeekNumber - 1
        );
        if (prevWeekPlan && prevWeekPlan.amount > currentWeekPlan.amount) {
          const reduction = prevWeekPlan.amount - currentWeekPlan.amount;
          const percentReduction = Math.round(
            (reduction / prevWeekPlan.amount) * 100
          );

          // L∆∞u th√¥ng tin ti·∫øn ƒë·ªô so v·ªõi tu·∫ßn tr∆∞·ªõc
          setTodayData((prev) => ({
            ...prev,
            weeklyProgress: {
              reduction,
              percentReduction,
              prevAmount: prevWeekPlan.amount,
            },
          }));
        }

        return currentWeekPlan.amount;
      }

      // N·∫øu ƒë√£ qua h·∫øt k·∫ø ho·∫°ch, target = 0
      if (currentWeekNumber > currentPlan.weeks.length) {
        return 0;
      }

      // Fallback
      return currentPlan.weeks[0]?.amount || 12;
    } catch (error) {
      console.error("L·ªói khi t√≠nh to√°n m·ª•c ti√™u h√¥m nay:", error);
      return 12; // Fallback an to√†n n·∫øu c√≥ l·ªói
    }
  };

  // T√≠nh streak days (ch·ªâ t√≠nh t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch)
  const calculateStreakDays = () => {
    let streak = 0;
    const today = new Date();

    // N·∫øu c√≥ k·∫ø ho·∫°ch, ch·ªâ t√≠nh t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch
    let startDate = today;
    if (currentPlan && currentPlan.startDate) {
      const planStartDate = new Date(currentPlan.startDate);
      if (!isNaN(planStartDate.getTime())) {
        startDate = planStartDate;
      }
    }

    // T√≠nh s·ªë ng√†y t·ª´ start date ƒë·∫øn h√¥m nay
    const daysSinceStart = Math.floor(
      (today - startDate) / (1000 * 60 * 60 * 24)
    );
    const maxDaysToCheck = Math.min(daysSinceStart + 1, 30); // Kh√¥ng qu√° 30 ng√†y v√† kh√¥ng qu√° s·ªë ng√†y t·ª´ khi b·∫Øt ƒë·∫ßu

    console.log(
      `T√≠nh streak t·ª´ ${
        startDate.toISOString().split("T")[0]
      } (${maxDaysToCheck} ng√†y ƒë·ªÉ ki·ªÉm tra)`
    );

    for (let i = 0; i < maxDaysToCheck; i++) {
      const checkDate = new Date(today);
      checkDate.setDate(checkDate.getDate() - i);

      // Kh√¥ng ki·ªÉm tra nh·ªØng ng√†y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch
      if (checkDate < startDate) {
        console.log(
          `B·ªè qua ng√†y ${
            checkDate.toISOString().split("T")[0]
          } v√¨ tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch`
        );
        break;
      }

      const dateStr = checkDate.toISOString().split("T")[0];
      const savedData = localStorage.getItem(`checkin_${dateStr}`);

      if (savedData) {
        const data = JSON.parse(savedData);
        if (data.actualCigarettes <= data.targetCigarettes) {
          streak++;
          console.log(
            `‚úÖ Ng√†y ${dateStr}: ${data.actualCigarettes}/${data.targetCigarettes} - Streak: ${streak}`
          );
        } else {
          console.log(
            `‚ùå Ng√†y ${dateStr}: ${data.actualCigarettes}/${data.targetCigarettes} - Streak b·ªã ph√°`
          );
          break; // Streak b·ªã ph√°
        }
      } else {
        console.log(`‚ö™ Ng√†y ${dateStr}: Kh√¥ng c√≥ d·ªØ li·ªáu - Streak d·ª´ng`);
        break; // Kh√¥ng c√≥ d·ªØ li·ªáu
      }
    }

    console.log(`Streak days cu·ªëi c√πng: ${streak}`);
    setStreakDays(streak);
  };

  // C·∫≠p nh·∫≠t target khi component mount ho·∫∑c plan thay ƒë·ªïi
  useEffect(() => {
    const target = calculateTodayTarget();
    setTodayData((prev) => ({
      ...prev,
      targetCigarettes: target,
    }));
    calculateStreakDays();
  }, [currentPlan]); // Ki·ªÉm tra xem h√¥m nay ƒë√£ checkin ch∆∞a
  useEffect(() => {
    const today = new Date().toISOString().split("T")[0];
    const savedData = localStorage.getItem(`checkin_${today}`);
    if (savedData) {
      const data = JSON.parse(savedData);
      setTodayData(data);
      setIsSubmitted(true);
    }
  }, []);
  const handleInputChange = (field, value) => {
    setTodayData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };
  const handleSubmit = () => {
    // L∆∞u d·ªØ li·ªáu v√†o localStorage
    const today = new Date().toISOString().split("T")[0];
    const isUpdate = localStorage.getItem(`checkin_${today}`) !== null;
    localStorage.setItem(`checkin_${today}`, JSON.stringify(todayData));

    // C·∫≠p nh·∫≠t streak b·∫±ng c√°ch t√≠nh to√°n l·∫°i t·ª´ d·ªØ li·ªáu ƒë√£ l∆∞u
    // thay v√¨ tƒÉng gi√° tr·ªã hi·ªán t·∫°i
    calculateStreakDays();

    setIsSubmitted(true);

    // Callback ƒë·ªÉ c·∫≠p nh·∫≠t component cha
    if (onProgressUpdate) {
      onProgressUpdate({
        week: currentWeek,
        amount: todayData.actualCigarettes,
        achieved: todayData.actualCigarettes <= todayData.targetCigarettes,
      });
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o toast thay v√¨ alert
    if (isUpdate) {
      setToast({
        show: true,
        message: "‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin checkin h√¥m nay!",
        type: "success",
      });
    } else {
      setToast({
        show: true,
        message: "‚úÖ ƒê√£ l∆∞u th√¥ng tin checkin h√¥m nay!",
        type: "success",
      });
    }

    // Auto hide toast sau 5 gi√¢y
    setTimeout(() => {
      setToast((prev) => ({ ...prev, show: false }));
    }, 5000);
  };
  const handleEdit = () => {
    setIsSubmitted(false);
    // ƒê·∫£m b·∫£o input field ƒë∆∞·ª£c k√≠ch ho·∫°t
    setTimeout(() => {
      const inputField = document.querySelector(".actual-input");
      if (inputField) {
        inputField.disabled = false;
        inputField.focus();
      }
    }, 100);

    // Hi·ªÉn th·ªã toast th√¥ng b√°o thay v√¨ alert
    setToast({
      show: true,
      message: "üìù B·∫°n c√≥ th·ªÉ c·∫≠p nh·∫≠t s·ªë ƒëi·∫øu thu·ªëc ƒë√£ h√∫t h√¥m nay",
      type: "info",
    });

    // Auto hide toast sau 4 gi√¢y
    setTimeout(() => {
      setToast((prev) => ({ ...prev, show: false }));
    }, 4000);
  };
  const isTargetAchieved =
    todayData.actualCigarettes <= todayData.targetCigarettes; // H√†m ƒë√≥ng toast notification
  const closeToast = () => {
    // Th√™m class ƒë·ªÉ animation ch·∫°y tr∆∞·ªõc khi ·∫©n
    const toastElement = document.querySelector(".toast-notification");
    if (toastElement) {
      toastElement.classList.add("toast-exit");
      setTimeout(() => {
        setToast({ ...toast, show: false });
      }, 300); // ƒê·ª£i animation k·∫øt th√∫c
    } else {
      setToast({ ...toast, show: false });
    }
  };

  return (
    <div className="daily-checkin">
      <div className="checkin-header">
        {" "}
        <div className="header-content">
          <div className="header-icon">
            <FaCalendarCheck />
          </div>
          <div className="header-text">
            <h2>Ghi nh·∫≠n h√¥m nay</h2>
            <p>
              Ghi nh·∫≠n ti·∫øn tr√¨nh cai thu·ªëc ng√†y{" "}
              {new Date().toLocaleDateString("vi-VN")}
            </p>
          </div>
        </div>
        {/* Streak counter */}{" "}
        <div className="streak-badge">
          <span className="streak-number">{streakDays}</span>
          <span className="streak-text">ng√†y li√™n ti·∫øp</span>
        </div>
      </div>

      <div className="checkin-separator"></div>

      {/* Toast Notification */}
      {toast.show && (
        <div className={`toast-notification ${toast.type}`}>
          <span className="toast-message">{toast.message}</span>
          <button className="toast-close" onClick={closeToast}>
            &times;
          </button>
        </div>
      )}

      <div className="checkin-content">
        {/* Target vs Actual */}
        <div className="progress-section">
          {" "}
          <div className="target-card">
            <h3>M·ª•c ti√™u h√¥m nay</h3>
            <div className="target-amount">
              {todayData.targetCigarettes} ƒëi·∫øu
            </div>
            <p>Tu·∫ßn {currentWeek} - K·∫ø ho·∫°ch c·ªßa b·∫°n</p>

            {todayData.weeklyProgress && (
              <div className="progress-badge">
                <span>
                  -{todayData.weeklyProgress.reduction} ƒëi·∫øu (
                  {todayData.weeklyProgress.percentReduction}%)
                </span>
                <p>so v·ªõi tu·∫ßn tr∆∞·ªõc</p>
              </div>
            )}
          </div>
          <div className="vs-divider">VS</div>{" "}
          <div className="actual-card">
            <h3>Th·ª±c t·∫ø ƒë√£ h√∫t</h3>
            <div className="number-input-container">
              <button
                type="button"
                className="number-decrement"
                onClick={() =>
                  !isSubmitted &&
                  handleInputChange(
                    "actualCigarettes",
                    Math.max(0, todayData.actualCigarettes - 1)
                  )
                }
                disabled={isSubmitted || todayData.actualCigarettes <= 0}
              >
                -
              </button>
              <input
                type="number"
                min="0"
                max="50"
                value={todayData.actualCigarettes}
                onChange={(e) =>
                  handleInputChange(
                    "actualCigarettes",
                    parseInt(e.target.value) || 0
                  )
                }
                className="actual-input"
                disabled={isSubmitted}
                placeholder="0"
              />
              <button
                type="button"
                className="number-increment"
                onClick={() =>
                  !isSubmitted &&
                  handleInputChange(
                    "actualCigarettes",
                    Math.min(50, todayData.actualCigarettes + 1)
                  )
                }
                disabled={isSubmitted || todayData.actualCigarettes >= 50}
              >
                +
              </button>
            </div>
            <p className={`result ${isTargetAchieved ? "success" : "warning"}`}>
              {isTargetAchieved ? "‚úÖ ƒê·∫°t m·ª•c ti√™u!" : "‚ö†Ô∏è V∆∞·ª£t m·ª•c ti√™u"}
            </p>
          </div>
        </div>{" "}
        {/* Action Buttons */}
        <div className="checkin-actions">
          {!isSubmitted ? (
            <button onClick={handleSubmit} className="submit-btn">
              <FaSave className="btn-icon" />
              L∆∞u checkin h√¥m nay
            </button>
          ) : (
            <button onClick={handleEdit} className="edit-btn">
              <FaSave className="btn-icon" />
              C·∫≠p nh·∫≠t s·ªë ƒëi·∫øu h√¥m nay
            </button>
          )}{" "}
        </div>
        {/* Summary Card ƒë√£ ƒë∆∞·ª£c x√≥a v√¨ d∆∞ th·ª´a */}
      </div>
    </div>
  );
};

export default DailyCheckin;
