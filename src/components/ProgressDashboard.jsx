import React, { useState, useEffect } from 'react';
import { FaTrophy, FaCalendarCheck, FaChartLine, FaLeaf, FaCoins, FaHeart } from 'react-icons/fa';
import QuitProgressChart from './QuitProgressChart';

const ProgressDashboard = ({ userPlan, completionDate }) => {
  const [dashboardStats, setDashboardStats] = useState(null);
  const [milestones, setMilestones] = useState([]);

  useEffect(() => {
    calculateDashboardStats();
    loadMilestones();
  }, [userPlan, completionDate]);

  const calculateDashboardStats = () => {
    if (!userPlan || !completionDate) return;

    const startDate = new Date(completionDate);
    const today = new Date();
    const daysSinceStart = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
    
    // T√≠nh to√°n s·ªë ƒëi·∫øu ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c
    const initialCigarettesPerDay = userPlan.weeks[0]?.amount || 20;
    const estimatedSaved = initialCigarettesPerDay * daysSinceStart;
    
    // T√≠nh ti·ªÅn ti·∫øt ki·ªám (gi·∫£ s·ª≠ 1 g√≥i = 25,000ƒë, 1 g√≥i = 20 ƒëi·∫øu)
    const pricePerCigarette = 25000 / 20;
    const moneySaved = estimatedSaved * pricePerCigarette;

    setDashboardStats({
      daysSinceCompletion: daysSinceStart,
      cigarettesSaved: estimatedSaved,
      moneySaved: moneySaved,
      planDuration: userPlan.weeks.length,
      planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n'
    });
  };

  const loadMilestones = () => {
    // Milestone theo th·ªùi gian WHO
    const healthMilestones = [
      { days: 1, title: '24 gi·ªù ƒë·∫ßu ti√™n', description: 'Carbon monoxide ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi c∆° th·ªÉ', achieved: true },
      { days: 2, title: '48 gi·ªù', description: 'Nicotine ƒë∆∞·ª£c lo·∫°i b·ªè, v·ªã gi√°c c·∫£i thi·ªán', achieved: true },
      { days: 3, title: '72 gi·ªù', description: 'ƒê∆∞·ªùng h√¥ h·∫•p th∆∞ gi√£n, nƒÉng l∆∞·ª£ng tƒÉng', achieved: true },
      { days: 14, title: '2 tu·∫ßn', description: 'Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán', achieved: true },
      { days: 30, title: '1 th√°ng', description: 'Ch·ª©c nƒÉng ph·ªïi tƒÉng 30%', achieved: false },
      { days: 90, title: '3 th√°ng', description: 'Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ', achieved: false },
      { days: 365, title: '1 nƒÉm', description: 'Nguy c∆° b·ªánh tim gi·∫£m 50%', achieved: false }
    ];

    if (dashboardStats) {
      const updatedMilestones = healthMilestones.map(milestone => ({
        ...milestone,
        achieved: dashboardStats.daysSinceCompletion >= milestone.days
      }));
      setMilestones(updatedMilestones);
    }
  };

  const getNextMilestone = () => {
    return milestones.find(m => !m.achieved);
  };

  const getAchievementProgress = () => {
    const achieved = milestones.filter(m => m.achieved).length;
    return (achieved / milestones.length) * 100;
  };

  if (!dashboardStats) {
    return (
      <div className="dashboard-loading">
        <p>ƒêang t·∫£i dashboard...</p>
      </div>
    );
  }

  const nextMilestone = getNextMilestone();
  const achievementProgress = getAchievementProgress();

  return (
    <div className="progress-dashboard">
      {/* Header Celebration */}
      <div className="dashboard-header">
        <div className="celebration-badge">
          <FaTrophy className="trophy-icon" />
          <div className="celebration-text">
            <h1>Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh k·∫ø ho·∫°ch!</h1>
            <p>H√£y ti·∫øp t·ª•c duy tr√¨ th√†nh qu·∫£ n√†y</p>
          </div>
        </div>
        <div className="completion-date">
          <FaCalendarCheck className="date-icon" />
          <span>Ho√†n th√†nh: {new Date(completionDate).toLocaleDateString('vi-VN')}</span>
        </div>
      </div>

      {/* Key Statistics */}
      <div className="dashboard-stats">
        <div className="stat-card primary">
          <div className="stat-icon">
            <FaCalendarCheck />
          </div>
          <div className="stat-content">
            <h3>{dashboardStats.daysSinceCompletion}</h3>
            <p>Ng√†y kh√¥ng h√∫t thu·ªëc</p>
          </div>
        </div>

        <div className="stat-card success">
          <div className="stat-icon">
            <FaLeaf />
          </div>
          <div className="stat-content">
            <h3>{dashboardStats.cigarettesSaved.toLocaleString()}</h3>
            <p>ƒêi·∫øu thu·ªëc ƒë√£ tr√°nh</p>
          </div>
        </div>

        <div className="stat-card money">
          <div className="stat-icon">
            <FaCoins />
          </div>
          <div className="stat-content">
            <h3>{(dashboardStats.moneySaved / 1000).toFixed(0)}K</h3>
            <p>VNƒê ƒë√£ ti·∫øt ki·ªám</p>
          </div>
        </div>

        <div className="stat-card health">
          <div className="stat-icon">
            <FaHeart />
          </div>
          <div className="stat-content">
            <h3>{achievementProgress.toFixed(0)}%</h3>
            <p>Milestone s·ª©c kh·ªèe</p>
          </div>
        </div>
      </div>

      {/* Progress Maintenance Chart */}
      <div className="maintenance-section">
        <h2>
          <FaChartLine className="section-icon" />
          Duy tr√¨ th√†nh qu·∫£
        </h2>
        <div className="maintenance-chart">
          <QuitProgressChart
            userPlan={userPlan}
            actualProgress={[]} // Kh√¥ng c·∫ßn actual data n·ªØa v√¨ ƒë√£ ho√†n th√†nh
            timeFilter="T·∫•t c·∫£"
            height={250}
          />
        </div>
      </div>

      {/* Health Milestones */}
      <div className="milestones-section">
        <h2>Milestone s·ª©c kh·ªèe</h2>
        <div className="milestones-grid">
          {milestones.map((milestone, index) => (
            <div 
              key={index} 
              className={`milestone-card ${milestone.achieved ? 'achieved' : 'pending'}`}
            >
              <div className="milestone-indicator">
                {milestone.achieved ? '‚úÖ' : '‚è≥'}
              </div>
              <div className="milestone-content">
                <h4>{milestone.title}</h4>
                <p>{milestone.description}</p>
                {!milestone.achieved && (
                  <span className="days-remaining">
                    C√≤n {milestone.days - dashboardStats.daysSinceCompletion} ng√†y
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Next Steps */}
      <div className="next-steps-section">
        <h2>B∆∞·ªõc ti·∫øp theo</h2>
        
        {nextMilestone && (
          <div className="next-milestone">
            <h3>üéØ Milestone ti·∫øp theo: {nextMilestone.title}</h3>
            <p>{nextMilestone.description}</p>
            <div className="milestone-progress">
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ 
                    width: `${(dashboardStats.daysSinceCompletion / nextMilestone.days) * 100}%` 
                  }}
                ></div>
              </div>
              <span className="progress-text">
                {dashboardStats.daysSinceCompletion}/{nextMilestone.days} ng√†y
              </span>
            </div>
          </div>
        )}

        <div className="maintenance-tips">
          <h3>üí° L·ªùi khuy√™n duy tr√¨</h3>
          <ul>
            <li>Ti·∫øp t·ª•c tr√°nh xa m√¥i tr∆∞·ªùng c√≥ kh√≥i thu·ªëc</li>
            <li>Duy tr√¨ c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t th∆∞·ªùng xuy√™n</li>
            <li>ƒÇn u·ªëng l√†nh m·∫°nh ƒë·ªÉ tr√°nh tƒÉng c√¢n</li>
            <li>T√¨m ki·∫øm h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®</li>
            <li>Nh·∫Øc nh·ªü b·∫£n th√¢n v·ªÅ l·ª£i √≠ch ƒë√£ ƒë·∫°t ƒë∆∞·ª£c</li>
          </ul>
        </div>

        <div className="support-options">
          <h3>ü§ù H·ªó tr·ª£ th√™m</h3>
          <div className="support-buttons">
            <button className="support-btn primary">
              Tham gia c·ªông ƒë·ªìng
            </button>
            <button className="support-btn secondary">
              Chia s·∫ª th√†nh t√≠ch
            </button>
            <button className="support-btn tertiary">
              T∆∞ v·∫•n chuy√™n gia
            </button>
          </div>
        </div>
      </div>

      {/* Success Story */}
      <div className="success-story">
        <h2>üéâ C√¢u chuy·ªán th√†nh c√¥ng c·ªßa b·∫°n</h2>
        <div className="story-content">
          <p>
            B·∫°n ƒë√£ ho√†n th√†nh <strong>{userPlan.name}</strong> v√† duy tr√¨ ƒë∆∞·ª£c{' '}
            <strong>{dashboardStats.daysSinceCompletion} ng√†y</strong> kh√¥ng h√∫t thu·ªëc.
          </p>
          <p>
            Trong th·ªùi gian n√†y, b·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c{' '}
            <strong>{(dashboardStats.moneySaved / 1000).toFixed(0)}K VNƒê</strong> v√† tr√°nh ƒë∆∞·ª£c{' '}
            <strong>{dashboardStats.cigarettesSaved}</strong> ƒëi·∫øu thu·ªëc.
          </p>
          <p>
            ƒê√¢y l√† m·ªôt th√†nh t√≠ch ƒë√°ng t·ª± h√†o! H√£y ti·∫øp t·ª•c duy tr√¨ v√† truy·ªÅn c·∫£m h·ª©ng cho nh·ªØng ng∆∞·ªùi kh√°c.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ProgressDashboard;
