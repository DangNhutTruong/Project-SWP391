import React, { useState, useEffect, useCallback } from 'react';
import { FaTrophy, FaCalendarCheck, FaChartLine, FaLeaf, FaCoins, FaHeart } from 'react-icons/fa';
import { Link } from 'react-router-dom';
import QuitProgressChart from './QuitProgressChart';

const ProgressDashboard = ({ userPlan, completionDate, dashboardStats: externalStats, onDataReset }) => {
  const [dashboardStats, setDashboardStats] = useState(null);
  const [milestones, setMilestones] = useState([]);  // T√≠nh to√°n th·ªëng k√™
  
  // Early return if required props are missing
  if (!userPlan || !completionDate) {
    return (
      <div className="dashboard-error">
        <p>Kh√¥ng th·ªÉ hi·ªÉn th·ªã dashboard - thi·∫øu d·ªØ li·ªáu c·∫ßn thi·∫øt</p>
      </div>
    );
  }
  
  const calculateDashboardStats = useCallback(() => {
    if (!userPlan || !completionDate) return;

    // N·∫øu c√≥ th·ªëng k√™ t·ª´ b√™n ngo√†i, s·ª≠ d·ª•ng n√≥ thay v√¨ t√≠nh to√°n l·∫°i
    if (externalStats && Object.keys(externalStats).length > 0) {
      console.log("S·ª≠ d·ª•ng th·ªëng k√™ t·ª´ Progress.jsx:", externalStats);
      setDashboardStats({
        daysSincePlanCreation: externalStats.noSmokingDays || 0, 
        cigarettesSaved: externalStats.savedCigarettes || 0,
        moneySaved: externalStats.savedMoney || 0,
        planDuration: userPlan.weeks ? userPlan.weeks.length : 0,
        planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
        healthProgress: externalStats.healthProgress || 0
      });
      return;
    }

    // T√≠nh to√°n th√¥ng th∆∞·ªùng n·∫øu kh√¥ng c√≥ th·ªëng k√™ t·ª´ b√™n ngo√†i
    const startDate = new Date(completionDate);
    const today = new Date();
    const daysSinceStart = Math.floor((today - startDate) / (1000 * 60 * 60 * 24));
    
    // T√≠nh to√°n s·ªë ƒëi·∫øu ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c - ƒë·∫£m b·∫£o userPlan.weeks t·ªìn t·∫°i
    const initialCigarettesPerDay = userPlan.weeks && userPlan.weeks.length > 0 ? 
      userPlan.weeks[0]?.amount || 20 : 20;
    const estimatedSaved = initialCigarettesPerDay * daysSinceStart;
      // T√≠nh ti·ªÅn ti·∫øt ki·ªám (gi·∫£ s·ª≠ 1 g√≥i = 25,000ƒë, 1 g√≥i = 20 ƒëi·∫øu)
    // N·∫øu c√≥ th·ªëng k√™ t·ª´ b√™n ngo√†i, s·ª≠ d·ª•ng s·ªë ti·ªÅn ƒë√£ t√≠nh to√°n
    const pricePerCigarette = 25000 / 20;
    const moneySaved = externalStats && externalStats.savedMoney ? 
                     externalStats.savedMoney : 
                     estimatedSaved * pricePerCigarette;
    
    setDashboardStats({
      daysSincePlanCreation: daysSinceStart, 
      cigarettesSaved: estimatedSaved,
      moneySaved: moneySaved,
      planDuration: userPlan.weeks ? userPlan.weeks.length : 0,
      planName: userPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
      healthProgress: 0 // Gi√° tr·ªã m·∫∑c ƒë·ªãnh
    });
  }, [userPlan, completionDate, externalStats]);
  
  const loadMilestones = useCallback(() => {
    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß, kh√¥ng th·ª±c hi·ªán
    if (!userPlan || !completionDate || !dashboardStats) {
      return;
    }
    
    
    // Milestone theo th·ªùi gian WHO
    const healthMilestones = [
      { days: 1, title: '24 gi·ªù ƒë·∫ßu ti√™n', description: 'Carbon monoxide ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi c∆° th·ªÉ', achieved: false },
      { days: 2, title: '48 gi·ªù', description: 'Nicotine ƒë∆∞·ª£c lo·∫°i b·ªè, v·ªã gi√°c c·∫£i thi·ªán', achieved: false },
      { days: 3, title: '72 gi·ªù', description: 'ƒê∆∞·ªùng h√¥ h·∫•p th∆∞ gi√£n, nƒÉng l∆∞·ª£ng tƒÉng', achieved: false },
      { days: 14, title: '2 tu·∫ßn', description: 'Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán', achieved: false },
      { days: 30, title: '1 th√°ng', description: 'Ch·ª©c nƒÉng ph·ªïi tƒÉng 30%', achieved: false },
      { days: 90, title: '3 th√°ng', description: 'Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ', achieved: false },
      { days: 365, title: '1 nƒÉm', description: 'Nguy c∆° b·ªánh tim gi·∫£m 50%', achieved: false }
    ];

    const updatedMilestones = healthMilestones.map(milestone => ({
      ...milestone,
      achieved: dashboardStats.daysSincePlanCreation >= milestone.days
    }));
    setMilestones(updatedMilestones);
  }, [userPlan, completionDate, dashboardStats]);

  // Add useEffect hooks after function declarations
  useEffect(() => {
    if (userPlan && completionDate) {
      calculateDashboardStats();
    }
  }, [userPlan, completionDate, calculateDashboardStats]);
  
  // T·∫£i milestone sau khi ƒë√£ c√≥ th·ªëng k√™
  useEffect(() => {
    if (dashboardStats) {
      loadMilestones();
    }
  }, [dashboardStats, loadMilestones]);  const getAchievementProgress = () => {
    // N·∫øu c√≥ gi√° tr·ªã t·ª´ b√™n ngo√†i, s·ª≠ d·ª•ng n√≥
    if (dashboardStats && dashboardStats.healthProgress !== undefined) {
      return dashboardStats.healthProgress;
    }
    
    // N·∫øu kh√¥ng, t√≠nh to√°n t·ª´ milestone
    if (!milestones || milestones.length === 0) return 0;
    const achieved = milestones.filter(m => m.achieved).length;
    return (achieved / milestones.length) * 100;
  };

  // Add some debugging information
  useEffect(() => {
    console.log("Current dashboard stats:", dashboardStats);
    console.log("Current milestones:", milestones);
  }, [dashboardStats, milestones]);
  
  // Show loading state while dashboardStats is not set
  if (!dashboardStats) {
    console.log("Dashboard stats not set yet, showing loading screen");
    return (
      <div className="dashboard-loading">
        <p>ƒêang t·∫£i dashboard...</p>
      </div>
    );  }

  const achievementProgress = getAchievementProgress();

  // Th√™m reset to√†n b·ªô d·ªØ li·ªáu
  const handleReset = () => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën reset d·ªØ li·ªáu check-in?')) {
      localStorage.removeItem('actualProgress');
      localStorage.removeItem('dashboardStats');
      if (onDataReset) {
        onDataReset();
      }
      alert('D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c reset');
    }
  };

  return (
    <div className="progress-dashboard">      {/* Key Statistics */}
      <div className="dashboard-stats">
        <div className="stat-card primary">
          <div className="stat-icon">
            <FaCalendarCheck />
          </div>
          <div className="stat-content">
            <h3>{dashboardStats.daysSincePlanCreation}</h3>
            <p>Th·ªùi gian cai thu·ªëc</p>
          </div>
        </div>        <div className="stat-card success">
          <div className="stat-icon">
            <FaLeaf />
          </div>          <div className="stat-content">
            <h3>{externalStats && externalStats.savedCigarettes ? externalStats.savedCigarettes.toLocaleString() : (dashboardStats.cigarettesSaved ? dashboardStats.cigarettesSaved.toLocaleString() : '0')}</h3>
            <p>ƒêi·∫øu thu·ªëc ƒë√£ tr√°nh</p>       
          </div>
        </div>

        <div className="stat-card money">
          <div className="stat-icon">
            <FaCoins />
          </div>
          <div className="stat-content">
            <h3>{(dashboardStats.moneySaved / 1000).toFixed(0)}K</h3>
            <p>VNƒê ƒë√£ ti·∫øt ki·ªám</p>
          </div>
        </div>

        <div className="stat-card health">
          <div className="stat-icon">
            <FaHeart />
          </div>
          <div className="stat-content">
            <h3>{achievementProgress.toFixed(0)}%</h3>
            <p>Milestone s·ª©c kh·ªèe</p>
          </div>
        </div>
      </div>      {/* Progress Chart */}
      <div className="maintenance-section">
        <h2>
          <FaChartLine className="section-icon" />
          K·∫ø ho·∫°ch c·ªßa b·∫°n
        </h2>
        <div className="maintenance-chart">
          <QuitProgressChart
            userPlan={userPlan || { weeks: [], name: 'K·∫ø ho·∫°ch c√° nh√¢n' }}
            actualProgress={[]} // Kh√¥ng c·∫ßn actual data n·ªØa v√¨ ƒë√£ ho√†n th√†nh
            timeFilter="T·∫•t c·∫£"
            height={250}
          />
        </div>
      </div>

      {/* Health Milestones */}
      <div className="milestones-section">
        <h2>Milestone s·ª©c kh·ªèe</h2>
        <div className="milestones-grid">
          {milestones.map((milestone, index) => (
            <div 
              key={index} 
              className={`milestone-card ${milestone.achieved ? 'achieved' : 'pending'}`}
            >
              <div className="milestone-indicator">
                {milestone.achieved ? '‚úÖ' : '‚è≥'}
              </div>
              <div className="milestone-content">
                <h4>{milestone.title}</h4>
                <p>{milestone.description}</p>
                {!milestone.achieved && (
                  <span className="days-remaining">
                    C√≤n {milestone.days - dashboardStats.daysSincePlanCreation} ng√†y
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>      {/* Tips section */}
      <div className="maintenance-tips-section">
        <h2>L·ªùi khuy√™n duy tr√¨</h2>
        
        <div className="maintenance-tips">
          <h3>üí° M·∫πo h·ªØu √≠ch</h3>
          <ul>
            <li>Ti·∫øp t·ª•c tr√°nh xa m√¥i tr∆∞·ªùng c√≥ kh√≥i thu·ªëc</li>
            <li>Duy tr√¨ c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t th∆∞·ªùng xuy√™n</li>
            <li>ƒÇn u·ªëng l√†nh m·∫°nh ƒë·ªÉ tr√°nh tƒÉng c√¢n</li>
            <li>T√¨m ki·∫øm h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®</li>
            <li>Nh·∫Øc nh·ªü b·∫£n th√¢n v·ªÅ l·ª£i √≠ch ƒë√£ ƒë·∫°t ƒë∆∞·ª£c</li>
          </ul>
        </div><div className="support-options">
          <h3>ü§ù H·ªó tr·ª£ th√™m</h3>
          <div className="support-buttons">
            <Link to="/blog" className="support-btn primary">
              Tham gia c·ªông ƒë·ªìng
            </Link>
            <Link to="/appointment" className="support-btn tertiary">
              T∆∞ v·∫•n chuy√™n gia
            </Link>
          </div>
        </div>
      </div>      {/* Success Story */}
      <div className="success-story">
        <h2>üéâ C√¢u chuy·ªán th√†nh c√¥ng c·ªßa b·∫°n</h2>
        <div className="story-content">
          <p>
            B·∫°n ƒë√£ l·∫≠p th√†nh c√¥ng <strong>{userPlan?.name || 'K·∫ø ho·∫°ch c√° nh√¢n'}</strong> v√† duy tr√¨ ƒë∆∞·ª£c{' '}
            <strong>{dashboardStats.daysSincePlanCreation} ng√†y</strong> kh√¥ng h√∫t thu·ªëc.
          </p>
          <p>
            Trong th·ªùi gian n√†y, b·∫°n ƒë√£ ti·∫øt ki·ªám ƒë∆∞·ª£c{' '}
            <strong>{(dashboardStats.moneySaved / 1000).toFixed(0)}K VNƒê</strong> v√† tr√°nh ƒë∆∞·ª£c{' '}
            <strong>{dashboardStats.cigarettesSaved}</strong> ƒëi·∫øu thu·ªëc.
          </p>
          <p>
            ƒê√¢y l√† m·ªôt th√†nh t√≠ch ƒë√°ng t·ª± h√†o! H√£y ti·∫øp t·ª•c duy tr√¨ v√† truy·ªÅn c·∫£m h·ª©ng cho nh·ªØng ng∆∞·ªùi kh√°c.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ProgressDashboard;
