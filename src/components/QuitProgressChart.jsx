import React, { useState, useEffect } from 'react';
import { Chart as ChartJS } from 'chart.js/auto';
import { Line } from 'react-chartjs-2';
import '../styles/QuitProgressChart.css';

const QuitProgressChart = ({
    userPlan = null,
    actualProgress = [],
    timeFilter = '30 ng√†y',
    height = 300
}) => {
    // X√≥a console.log kh√¥ng c·∫ßn thi·∫øt trong production
    // console.log("üöÄ QuitProgressChart KH·ªûI T·∫†O v·ªõi props:", { userPlan, actualProgress, timeFilter, height });
    
    const [chartData, setChartData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    // T·∫°o d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ k·∫ø ho·∫°ch th·ª±c t·∫ø
    const generateSampleData = () => {
        const samplePlan = {
            weeks: [
                { week: 1, amount: 20, phase: "Th√≠ch nghi" },
                { week: 2, amount: 16, phase: "Th√≠ch nghi" },
                { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
                { week: 4, amount: 8, phase: "TƒÉng t·ªëc" },
                { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
                { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
                { week: 7, amount: 0, phase: "Ho√†n th√†nh" }
            ],
            name: "K·∫ø ho·∫°ch 6 tu·∫ßn",
            startDate: "2024-01-01"
        };

        // D·ªØ li·ªáu th·ª±c t·∫ø m√¥ ph·ªèng (theo ng√†y)
        const sampleActual = [
            { date: '2024-01-01', actualCigarettes: 18, targetCigarettes: 20, mood: "good" },
            { date: '2024-01-02', actualCigarettes: 19, targetCigarettes: 20, mood: "challenging" },
            { date: '2024-01-03', actualCigarettes: 17, targetCigarettes: 20, mood: "good" },        ];

        return { plan: samplePlan, actual: sampleActual };
    };
    
    // T·∫°o d·ªØ li·ªáu k·∫ø ho·∫°ch theo ng√†y d·ª±a tr√™n tu·∫ßn
    const generateDailyPlanData = (plan) => {
        const dailyPlan = [];
        
        // Check if plan exists with proper structure
        if (!plan || !plan.weeks || !Array.isArray(plan.weeks) || plan.weeks.length === 0) {
            console.warn("Invalid or missing plan data, using empty array");
            return dailyPlan;
        }
        
        // Ensure we have a valid start date
        let startDate;
        try {
            startDate = new Date(plan.startDate);
            // Check if startDate is a valid date
            if (isNaN(startDate.getTime())) {
                console.warn("Invalid plan startDate, using current date");
                startDate = new Date(); // Fallback to current date
            }
        } catch (e) {
            console.warn("Error parsing startDate, using current date", e);
            startDate = new Date(); // Fallback to current date
        }
        
        // Process each week
        plan.weeks.forEach((week, weekIndex) => {
            // Ensure week has required properties
            const weekAmount = typeof week.amount === 'number' ? week.amount : 
                               typeof week.amount === 'string' ? parseFloat(week.amount) : 0;
            
            const weekNumber = week.week || (weekIndex + 1);
            const weekPhase = week.phase || 'M·∫∑c ƒë·ªãnh';
            
            // M·ªói tu·∫ßn c√≥ 7 ng√†y
            for (let day = 0; day < 7; day++) {
                const date = new Date(startDate);
                date.setDate(date.getDate() + (weekIndex * 7) + day);
                
                dailyPlan.push({
                    date: date.toISOString().split('T')[0],
                    targetCigarettes: isNaN(weekAmount) ? 0 : weekAmount,
                    week: weekNumber,
                    phase: weekPhase
                });
            }
        });
          
        return dailyPlan;
    };
      // Filter data based on timeFilter
    const filterDataByTime = (data, filter) => {
        const today = new Date();
        const todayStr = today.toISOString().split('T')[0];
        let daysToShow = 30;
        
        console.log(`FILTER DEBUG: Ng√†y h√¥m nay l√† ${todayStr}`);
        switch (filter) {
            case '7 ng√†y':
                daysToShow = 7;
                break;
            case '14 ng√†y':
                daysToShow = 14;
                break;
            case '30 ng√†y':
                daysToShow = 30;
                break;
            case 'T·∫•t c·∫£':
                return data;
            default:
                daysToShow = 30;
        }
        
        const cutoffDate = new Date(today);
        cutoffDate.setDate(cutoffDate.getDate() - daysToShow);
        
        console.log(`L·ªçc d·ªØ li·ªáu: Hi·ªÉn th·ªã ${daysToShow} ng√†y g·∫ßn nh·∫•t, t·ª´ ${cutoffDate.toLocaleDateString()}`);
        
        // Log input data before filtering
        console.log("FILTER DEBUG: Input data length:", data?.length);
        if (data?.length > 0) {
            console.log("FILTER DEBUG: Input data first item:", data[0]);
            console.log("FILTER DEBUG: Input data last item:", data[data.length-1]);
        }
          // Make sure data is an array before filtering
        const filteredData = Array.isArray(data) ? data.filter(item => {
            if (!item || !item.date) return false;
            
            const itemDate = new Date(item.date);
            
            // ƒê·ªëi v·ªõi d·ªØ li·ªáu th·ª±c t·∫ø (actualProgress), lu√¥n gi·ªØ l·∫°i t·∫•t c·∫£ d·ªØ li·ªáu
            // v√¨ ch√∫ng ta ƒë√£ ƒë∆∞·ª£c l·ªçc t·ª´ ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch r·ªìi
            if (data.length <= 7) { // N·∫øu √≠t d·ªØ li·ªáu (ng∆∞·ªùi d√πng m·ªõi b·∫Øt ƒë·∫ßu)
                console.log(`FILTER DEBUG: ‚úÖ Gi·ªØ l·∫°i d·ªØ li·ªáu ${item.date} (ng∆∞·ªùi d√πng m·ªõi b·∫Øt ƒë·∫ßu)`);
                return true;
            }
            
            // Lu√¥n gi·ªØ l·∫°i d·ªØ li·ªáu c·ªßa ng√†y h√¥m nay b·∫•t k·ªÉ filter n√†o
            if (item.date === todayStr) {
                console.log(`FILTER DEBUG: ‚úÖ Gi·ªØ l·∫°i d·ªØ li·ªáu ng√†y h√¥m nay (${todayStr})`);
                return true;
            }
            
            const result = !isNaN(itemDate) && itemDate >= cutoffDate;
            
            // Log filter decision for recent data (debugging)
            const daysDiff = Math.floor((today - itemDate) / (1000 * 60 * 60 * 24));
            if (daysDiff <= 3) { // Log only recent data (now showing 3 days for more context)
                console.log(`FILTER DEBUG: Date ${item.date} - Keep: ${result}, Days diff: ${daysDiff}`);
            }
            
            return result;
        }) : [];
        
        console.log(`K·∫øt qu·∫£ l·ªçc: ${filteredData.length} m·ª•c d·ªØ li·ªáu`);
        if (filteredData.length > 0) {
            console.log("FILTER DEBUG: Filtered data first item:", filteredData[0]);
            console.log("FILTER DEBUG: Filtered data last item:", filteredData[filteredData.length-1]);
        }
          return filteredData;
    };
      useEffect(() => {
        console.log("QuitProgressChart - Updating chart with:", { userPlan, actualProgress, timeFilter });
        console.log("CHART DEBUG: actualProgress length:", actualProgress?.length);
        console.log("CHART DEBUG: actualProgress data:", actualProgress);
        
        // Make sure we have valid data or generate sample data
        let data;
        
        if (userPlan && Object.keys(userPlan).length > 0) {
            data = { 
                plan: userPlan, 
                actual: Array.isArray(actualProgress) ? actualProgress : [] 
            };
            console.log("CHART DEBUG: ‚úÖ S·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ props");
        } else {
            data = generateSampleData();
            console.log("CHART DEBUG: ‚ö†Ô∏è Kh√¥ng c√≥ userPlan, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u");
        }

        // Ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø
        if (Array.isArray(data.actual) && data.actual.length > 0) {
            console.log(`CHART DEBUG: ‚úÖ C√≥ ${data.actual.length} b·∫£n ghi d·ªØ li·ªáu th·ª±c t·∫ø:`, 
                data.actual.map(a => `${a.date}: ${a.actualCigarettes}/${a.targetCigarettes}`));
        } else {
            console.log("CHART DEBUG: ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø - ƒë∆∞·ªùng xanh l√° s·∫Ω kh√¥ng hi·ªÉn th·ªã");
        }

        // T·∫°o d·ªØ li·ªáu k·∫ø ho·∫°ch theo ng√†y
        const dailyPlanData = generateDailyPlanData(data.plan);
        console.log(`CHART DEBUG: T·∫°o ƒë∆∞·ª£c ${dailyPlanData.length} m·ª•c d·ªØ li·ªáu k·∫ø ho·∫°ch theo ng√†y`);        // Filter d·ªØ li·ªáu theo timeFilter
        const filteredPlanData = filterDataByTime(dailyPlanData || [], timeFilter);
        const filteredActualData = filterDataByTime(data.actual || [], timeFilter);
        
        console.log("CHART DEBUG: Filtered actual data:", filteredActualData);
        console.log("CHART DEBUG: Filtered data length:", filteredActualData?.length);
        
        // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu th·ª±c t·∫ø kh√¥ng - n·∫øu kh√¥ng c√≥ th√¨ kh√¥ng hi·ªÉn th·ªã ƒë∆∞·ªùng xanh l√°
        const hasRealActualData = Array.isArray(actualProgress) && actualProgress.length > 0;
        if (!hasRealActualData) {
            console.log("CHART DEBUG: ‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu actualProgress th·ª±c t·∫ø t·ª´ props - s·∫Ω ·∫©n ƒë∆∞·ªùng xanh l√°");
        }

        // T·∫°o labels cho tr·ª•c X (theo ng√†y)
        const labels = [];
        const planData = [];
        const actualData = [];
        
        // T·∫°o map cho vi·ªác lookup nhanh - ch·ªâ n·∫øu c√≥ d·ªØ li·ªáu th·ª±c t·∫ø
        const actualMap = new Map();
        if (hasRealActualData && Array.isArray(filteredActualData)) {
            filteredActualData.forEach(item => {
                if (item && item.date) {
                    actualMap.set(item.date, item.actualCigarettes);
                    console.log(`CHART DEBUG: Adding to map - Date ${item.date}, Value ${item.actualCigarettes}`);
                }
            });
        }
        
        console.log("CHART DEBUG: actualMap size:", actualMap.size);        // T·∫°o d·ªØ li·ªáu cho chart
        if (Array.isArray(filteredPlanData)) {
            filteredPlanData.forEach((planItem, index) => {
                // Format ng√†y cho label (ch·ªâ hi·ªÉn th·ªã ng√†y/th√°ng)
                const date = new Date(planItem.date);
                const label = `${date.getDate()}/${date.getMonth() + 1}`;
                labels.push(label);
                
                // D·ªØ li·ªáu k·∫ø ho·∫°ch
                planData.push(planItem.targetCigarettes);
                
                // D·ªØ li·ªáu th·ª±c t·∫ø (ch·ªâ n·∫øu c√≥ d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ props)
                if (hasRealActualData) {
                    const actualValue = actualMap.get(planItem.date);
                    actualData.push(actualValue !== undefined ? actualValue : null);
                    
                    // Log d·ªØ li·ªáu d√≤ng xanh l√° (debug)
                    if (actualValue !== undefined) {
                        console.log(`DEBUG CHART: Ng√†y ${planItem.date} c√≥ d·ªØ li·ªáu th·ª±c t·∫ø: ${actualValue} ƒëi·∫øu`);
                    }
                } else {
                    // Kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø, push null ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã ƒëi·ªÉm n√†o
                    actualData.push(null);
                }
            });
              // Log t·ªïng quan d·ªØ li·ªáu d√≤ng xanh l√°
            if (hasRealActualData) {
                console.log(`DEBUG CHART: ‚úÖ T·ªïng s·ªë ƒëi·ªÉm d·ªØ li·ªáu th·ª±c t·∫ø: ${actualMap.size} ƒëi·ªÉm`);
                console.log('DEBUG CHART: D·ªØ li·ªáu d√≤ng xanh l√°:', actualData.filter(d => d !== null));
            } else {
                console.log('DEBUG CHART: ‚ùå Kh√¥ng hi·ªÉn th·ªã d√≤ng xanh l√° v√¨ kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø');
            }
        }
        
        const chartConfig = {
            labels,
            datasets: [
                {
                    label: 'K·∫ø ho·∫°ch d·ª± ki·∫øn',
                    data: planData,
                    borderColor: '#4285f4', // Xanh d∆∞∆°ng
                    backgroundColor: 'rgba(66, 133, 244, 0.1)',
                    borderWidth: 2,
                    fill: false,
                    tension: 0.1,
                    pointRadius: 3,
                    pointHoverRadius: 5,
                    pointBackgroundColor: '#4285f4',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    pointStyle: 'circle'
                },                {
                    label: 'Th·ª±c t·∫ø',
                    data: actualData,
                    borderColor: '#34a853', // Xanh l√°
                    backgroundColor: 'rgba(52, 168, 83, 0.1)',
                    borderWidth: 3,
                    fill: false,
                    tension: 0.1,
                    pointRadius: 6, // TƒÉng k√≠ch th∆∞·ªõc ƒëi·ªÉm
                    pointHoverRadius: 8, // TƒÉng k√≠ch th∆∞·ªõc khi hover
                    pointBackgroundColor: '#34a853',
                    pointBorderColor: '#ffffff',
                    pointBorderWidth: 2,
                    spanGaps: true, // K·∫øt n·ªëi c√°c ƒëi·ªÉm c√≥ d·ªØ li·ªáu ngay c·∫£ khi c√≥ gaps
                    pointStyle: 'circle'
                },
                {
                    label: 'M·ª•c ti√™u (0 ƒëi·∫øu)',
                    data: new Array(labels.length).fill(0),
                    borderColor: '#ea4335', // ƒê·ªè
                    backgroundColor: 'rgba(234, 67, 53, 0.1)',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    fill: false,
                    pointRadius: 0,
                    pointHoverRadius: 0                }
            ]
        };
        
        console.log("CHART DEBUG: Final chart data", {
            labels, 
            planDataPoints: planData.length, 
            actualDataPoints: actualData.filter(d => d !== null).length,
            nonNullActualData: actualData.filter(d => d !== null)
        });
          setChartData(chartConfig);
        setIsLoading(false);
    }, [userPlan, actualProgress, timeFilter]);
    
    // Format date ƒë·ªÉ hi·ªÉn th·ªã tr√™n chart
    const formatDateForDisplay = (dateString) => {
        try {
            const options = { day: '2-digit', month: '2-digit' };
            return new Date(dateString).toLocaleDateString('vi-VN', options);
        } catch (error) {
            console.error("Error formatting date:", dateString, error);
            return dateString;
        }
    };
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    const prepareChartData = () => {
        try {
            let planToUse = userPlan;
            let actualToUse = Array.isArray(actualProgress) ? actualProgress : [];

            // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
            if (!planToUse) {
                console.warn("Kh√¥ng c√≥ k·∫ø ho·∫°ch, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u");
                const sampleData = generateSampleData();
                planToUse = sampleData.plan;
                
                // Ch·ªâ s·ª≠ d·ª•ng actual m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu actual th·ª±c t·∫ø
                if (actualToUse.length === 0) {
                    actualToUse = sampleData.actual;
                }
            }

            // T·∫°o d·ªØ li·ªáu k·∫ø ho·∫°ch theo ng√†y
            const dailyPlan = generateDailyPlanData(planToUse);

            // L·ªçc d·ªØ li·ªáu theo b·ªô l·ªçc th·ªùi gian
            const filteredPlanData = filterDataByTime(dailyPlan, timeFilter);
            
            // Chu·∫©n b·ªã labels (ng√†y) v√† d·ªØ li·ªáu ƒë√≠ch (targetData)
            const labels = [];
            const targetData = [];
            
            // Th√™m c√°c ng√†y v√† d·ªØ li·ªáu ƒë√≠ch v√†o arrays
            filteredPlanData.forEach((planItem) => {
                const formattedDate = formatDateForDisplay(planItem.date);
                labels.push(formattedDate);
                targetData.push(planItem.targetCigarettes);
            });

            // Chu·∫©n b·ªã d·ªØ li·ªáu th·ª±c t·∫ø
            const actualData = [];
            
            // Map d·ªØ li·ªáu th·ª±c t·∫ø v√†o c√°c ng√†y trong k·∫ø ho·∫°ch
            filteredPlanData.forEach(planItem => {
                const dateStr = planItem.date;
                
                // T√¨m gi√° tr·ªã th·ª±c t·∫ø cho ng√†y n√†y
                const actualItem = actualToUse.find(item => {
                    // ƒê·∫£m b·∫£o ng√†y ƒë∆∞·ª£c format ƒë√∫ng chu·∫©n YYYY-MM-DD
                    const itemDateStr = typeof item.date === 'string' ? item.date : 
                                        item.date instanceof Date ? item.date.toISOString().split('T')[0] : null;
                    
                    return itemDateStr === dateStr;
                });
                
                // Th√™m gi√° tr·ªã th·ª±c t·∫ø n·∫øu c√≥, null n·∫øu kh√¥ng
                if (actualItem) {
                    const actualValue = actualItem.actualCigarettes;
                    actualData.push(actualValue !== undefined ? actualValue : null);
                } else {
                    // Kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c t·∫ø, push null ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã ƒëi·ªÉm n√†o
                    actualData.push(null);
                }
            });

            // D·ªØ li·ªáu ƒë√£ chu·∫©n b·ªã s·∫µn s√†ng cho chart.js
            return {
                labels,
                datasets: [
                    {
                        label: 'K·∫ø ho·∫°ch',
                        data: targetData,
                        borderColor: '#4285f4',
                        backgroundColor: 'rgba(66, 133, 244, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4
                    },
                    {
                        label: 'Th·ª±c t·∫ø',
                        data: actualData,
                        borderColor: '#34a853',
                        backgroundColor: 'transparent',
                        borderWidth: 2,
                        pointBackgroundColor: '#34a853',
                        pointRadius: 4,
                        tension: 0.2
                    }
                ],
                // Th√™m metadata ƒë·ªÉ debug n·∫øu c·∫ßn
                meta: {
                    planDataPoints: targetData.length,
                    actualDataPoints: actualData.filter(d => d !== null).length,
                    nonNullActualData: actualData.filter(d => d !== null)
                }
            };
        } catch (error) {
            console.error("Error preparing chart data:", error);
            setError("L·ªói khi chu·∫©n b·ªã d·ªØ li·ªáu bi·ªÉu ƒë·ªì");
            
            // Return a minimal valid chart data object in case of error
            return {
                labels: ['L·ªói'],
                datasets: [
                    {
                        label: 'K·∫ø ho·∫°ch',
                        data: [0],
                        borderColor: '#4285f4'
                    }
                ]
            };
        }
    };

    const options = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            title: {
                display: false, // T·∫Øt ti√™u ƒë·ªÅ m·∫∑c ƒë·ªãnh v√¨ ch√∫ng ta ƒë√£ c√≥ ti√™u ƒë·ªÅ ri√™ng
                padding: 20
            },
            legend: {
                position: 'top',
                align: 'center',
                labels: {
                    usePointStyle: true,
                    padding: 20,
                    boxWidth: 10,
                    boxHeight: 10,
                    font: {
                        size: 12
                    }
                }
            },
            tooltip: {
                mode: 'index',
                intersect: false,
                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                titleColor: 'white',
                bodyColor: 'white',
                borderColor: '#4285f4',
                borderWidth: 1,
                cornerRadius: 8,
                displayColors: true,
                callbacks: {
                    title: function (context) {
                        return context[0].label;
                    },                    label: function (context) {
                        const value = context.parsed.y;
                        if (value === null) return null;

                        let label = context.dataset.label + ': ';
                        if (context.dataset.label.includes('th·ª±c t·∫ø')) {
                            label += value + ' ƒëi·∫øu/ng√†y';

                            // Th√™m th√¥ng tin mood n·∫øu c√≥ - s·ª≠ d·ª•ng date thay v√¨ week
                            const dataIndex = context.dataIndex;
                            const dateLabel = context.chart.data.labels[dataIndex];
                            
                            // T√¨m d·ªØ li·ªáu th·ª±c t·∫ø d·ª±a tr√™n date
                            const actualData = actualProgress.find(a => {
                                if (a.date) {
                                    const date = new Date(a.date);
                                    const formattedDate = `${date.getDate()}/${date.getMonth() + 1}`;
                                    return formattedDate === dateLabel;
                                }
                                return false;
                            });
                            
                            if (actualData && actualData.mood) {
                                const moodText = {
                                    'easy': 'üòä D·ªÖ d√†ng',
                                    'good': 'üôÇ T·ªët',
                                    'challenging': 'üòê H∆°i kh√≥',
                                    'difficult': 'üò∞ Kh√≥ khƒÉn'
                                };
                                label += ` (${moodText[actualData.mood] || actualData.mood})`;
                            }
                        } else {
                            label += value + ' ƒëi·∫øu/ng√†y';
                        }
                        return label;
                    }
                }
            }
        },            scales: {
                x: {
                    display: true,
                    title: {
                        display: true,
                        text: 'Th·ªùi gian',
                        font: {
                            size: 14,
                            weight: 'bold'
                        },
                        color: '#5f6368'
                    },
                grid: {
                    display: false
                },
              ticks: {
                    color: '#5f6368',
                    font: {
                        size: 12
                    },
                    maxRotation: 45,
                    minRotation: 0
                }
            },
            y: {
                display: true,
                title: {
                    display: true,
                    text: 'S·ªë ƒëi·∫øu thu·ªëc/ng√†y',
                    font: {
                        size: 14,
                        weight: 'bold'
                    },
                    color: '#5f6368'
                },                
                beginAtZero: true,
                suggestedMax: 25, // Gi√° tr·ªã m·∫∑c ƒë·ªãnh cho max, ƒë·∫£m b·∫£o kh√¥ng b·ªã ch·∫°m n√≥c
                grid: {
                    color: 'rgba(0, 0, 0, 0.1)',
                    borderDash: [2, 2]
                },
                ticks: {
                    color: '#5f6368',
                    font: {
                        size: 12
                    },                  
                    callback: function (value) {
                        return value + ' ƒëi·∫øu';
                    },
                    stepSize: 5 // ƒê·∫∑t c√°c b∆∞·ªõc nh·ªè h∆°n cho tr·ª•c Y
                }
            }
        },
        interaction: {
            mode: 'nearest',
            axis: 'x',
            intersect: false
        },
        elements: {
            point: {
                hoverBackgroundColor: '#ffffff',
                hoverBorderWidth: 3
            }
        }
    };

    if (isLoading) {
        return (
            <div className="chart-loading" style={{
                height: height,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                backgroundColor: '#f8f9fa',
                borderRadius: '8px'
            }}>
                <div style={{ textAlign: 'center', color: '#5f6368' }}>
                    <div className="loading-spinner" style={{
                        width: '40px',
                        height: '40px',
                        border: '4px solid #e0e0e0',
                        borderTop: '4px solid #4285f4',
                        borderRadius: '50%',
                        animation: 'spin 1s linear infinite',
                        margin: '0 auto 10px'
                    }}></div>
                    <p>ƒêang t·∫£i bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh...</p>
                </div>
            </div>
        );
    }

    // Handling case when chartData is not properly initialized
    if (!chartData) {
        return (
            <div className="chart-loading" style={{ height: height, display: 'flex', 
                 justifyContent: 'center', alignItems: 'center', 
                 backgroundColor: 'rgba(240, 240, 240, 0.5)' }}>
                <p>ƒêang t·∫£i bi·ªÉu ƒë·ªì...</p>
            </div>
        );
    }    return (
        <div className="quit-progress-chart" style={{ height: height }}>
            <div className="chart-wrapper"><Line 
                    data={chartData}
                    options={options}
                    height={height - 100} // Gi·∫£m chi·ªÅu cao ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng b·ªã tr·ªìng ch√©o
                />            </div>{/* Legend hi·ªÉn th·ªã d∆∞·ªõi bi·ªÉu ƒë·ªì */}
        </div>
    );
};

export default QuitProgressChart;
