import React, { createContext, useState, useContext, useEffect } from 'react';

// Base API URL - change this to your backend URL
const API_BASE_URL = 'http://localhost:5000/api';

// T·∫°o context cho x√°c th·ª±c
const AuthContext = createContext(null);

// Hook t√πy ch·ªânh ƒë·ªÉ s·ª≠ d·ª•ng AuthContext
export const useAuth = () => useContext(AuthContext);

// Provider component
export const AuthProvider = ({ children }) => {
  // Kh·ªüi t·∫°o tr·∫°ng th√°i t·ª´ localStorage ho·∫∑c sessionStorage
  const [user, setUser] = useState(() => {
    // Ki·ªÉm tra localStorage tr∆∞·ªõc (remember me), sau ƒë√≥ sessionStorage
    const storedUser = localStorage.getItem('nosmoke_user') || sessionStorage.getItem('nosmoke_user');
    return storedUser ? JSON.parse(storedUser) : null;
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [token, setToken] = useState(() => {
    // Ki·ªÉm tra localStorage tr∆∞·ªõc (remember me), sau ƒë√≥ sessionStorage
    return localStorage.getItem('nosmoke_token') || sessionStorage.getItem('nosmoke_token');
  });
  const [rememberMe, setRememberMe] = useState(() => {
    return localStorage.getItem('nosmoke_remember') === 'true';
  });
  // X√≥a localStorage c≈© v√† sync v·ªõi sessionStorage
  useEffect(() => {
    // Kh√¥ng x√≥a localStorage n·ªØa v√¨ c·∫ßn cho remember me
    console.log('üîß AuthContext initialized with remember me support');
  }, []);

  // L∆∞u user v√† token v√†o storage khi thay ƒë·ªïi
  useEffect(() => {
    if (user) {
      if (rememberMe) {
        localStorage.setItem('nosmoke_user', JSON.stringify(user));
        localStorage.setItem('nosmoke_remember', 'true');
      } else {
        sessionStorage.setItem('nosmoke_user', JSON.stringify(user));
        localStorage.removeItem('nosmoke_user');
        localStorage.removeItem('nosmoke_remember');
      }
    } else {
      sessionStorage.removeItem('nosmoke_user');
      localStorage.removeItem('nosmoke_user');
      localStorage.removeItem('nosmoke_remember');
    }
  }, [user, rememberMe]);

  useEffect(() => {
    if (token) {
      if (rememberMe) {
        localStorage.setItem('nosmoke_token', token);
      } else {
        sessionStorage.setItem('nosmoke_token', token);
        localStorage.removeItem('nosmoke_token');
      }
    } else {
      sessionStorage.removeItem('nosmoke_token');
      localStorage.removeItem('nosmoke_token');
    }
  }, [token, rememberMe]);
  // API helper function
  const apiCall = async (endpoint, options = {}) => {
    try {
      const config = {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        },
        ...options
      };

      // Add authorization header if token exists
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }

      const url = `${API_BASE_URL}${endpoint}`;
      console.log('üåê Fetching:', url, 'with config:', config); const response = await fetch(url, config);

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);

      // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p server error (500)
      if (response.status === 500) {
        console.error('‚ùå Server error (500)');
        throw new Error('L·ªói m√°y ch·ªß n·ªôi b·ªô. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }

      const data = await response.json();
      console.log('üì° Response data:', data);

      if (!response.ok) {
        console.error('‚ùå API Error:', data);
        throw new Error(data.message || 'Y√™u c·∫ßu th·∫•t b·∫°i');
      }

      return data;
    } catch (error) {
      // Log chi ti·∫øt l·ªói bao g·ªìm stack trace
      console.error('üö® API call error details:', error);
      console.error('üö® apiCall error:', error);
      throw error;
    }
  };  // H√†m ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi - B∆∞·ªõc 1: G·ª≠i m√£ x√°c nh·∫≠n
  const register = async (userData) => {
    setLoading(true);
    setError(null);

    try {
      console.log('üöÄ AuthContext register called with:', userData);
      console.log('üì° Making API call to:', `${API_BASE_URL}/auth/register`);

      const data = await apiCall('/auth/register', {
        method: 'POST',
        body: JSON.stringify(userData)
      });

      console.log('‚úÖ API response:', data);

      if (data.success) {
        // Registration successful, verification code sent
        return {
          success: true,
          message: data.message,
          email: data.data.email,
          needsVerification: true
        };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };  // H√†m x√°c nh·∫≠n email
  const verifyEmail = async (email, verificationCode) => {
    setLoading(true);
    setError(null);

    try {
      console.log(`üîç X√°c th·ª±c email: ${email} v·ªõi m√£: ${verificationCode}`);
      console.log(`üåê API URL: ${API_BASE_URL}/auth/verify-email`);

      // ƒê·∫£m b·∫£o m√£ x√°c th·ª±c lu√¥n l√† string v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng
      const formattedCode = String(verificationCode).trim();

      console.log(`üì§ G·ª≠i request v·ªõi d·ªØ li·ªáu:`, { email, verificationCode: formattedCode });

      const data = await apiCall('/auth/verify-email', {
        method: 'POST',
        body: JSON.stringify({
          email,
          verificationCode: formattedCode
        })
      });

      console.log(`üì• Nh·∫≠n response:`, data); if (data.success) {
        setUser(data.data.user);
        setToken(data.data.token);
        console.log('‚úÖ Email verified and user registered');
        return { success: true, user: data.data.user };
      } else {
        console.error('‚ùå Verification failed:', data.message);
        throw new Error(data.message || 'X√°c th·ª±c email kh√¥ng th√†nh c√¥ng');
      }
    } catch (err) {
      console.error('üî¥ L·ªói khi x√°c th·ª±c email:', err);
      console.error('‚ùå Verification error:', err);
      setError(err.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
      return { success: false, error: err.message || 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server' };
    } finally {
      setLoading(false);
    }
  };

  // H√†m g·ª≠i l·∫°i m√£ x√°c nh·∫≠n
  const resendVerificationCode = async (email) => {
    setLoading(true);
    setError(null);

    try {
      const data = await apiCall('/auth/resend-verification', {
        method: 'POST',
        body: JSON.stringify({ email })
      });

      if (data.success) {
        return { success: true, message: data.message };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };
  // H√†m ƒëƒÉng nh·∫≠p
  const login = async (email, password, rememberMeOption = false) => {
    setLoading(true);
    setError(null);

    try {
      const data = await apiCall('/auth/login', {
        method: 'POST',
        body: JSON.stringify({ email, password })
      });

      if (data.success) {
        // C·∫≠p nh·∫≠t rememberMe tr∆∞·ªõc khi set user v√† token
        setRememberMe(rememberMeOption);
        setUser(data.data.user);
        setToken(data.data.token);

        console.log(`‚úÖ User logged in - ${rememberMeOption ? 'persistent across browser sessions' : 'session only'}`);
        return { success: true, user: data.data.user };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };
  // H√†m ƒëƒÉng xu·∫•t
  const logout = async () => {
    try {
      if (token) {
        await apiCall('/auth/logout', {
          method: 'POST'
        });
      }
    } catch (err) {
      console.error('Logout error:', err);
    } finally {
      // X√≥a ho√†n to√†n state v√† c·∫£ localStorage v√† sessionStorage
      setUser(null);
      setToken(null);
      setRememberMe(false);
      sessionStorage.removeItem('nosmoke_user');
      sessionStorage.removeItem('nosmoke_token');
      localStorage.removeItem('nosmoke_user');
      localStorage.removeItem('nosmoke_token');
      localStorage.removeItem('nosmoke_remember');
      console.log('üîê User logged out - all session data cleared');
      return { success: true };
    }
  };

  // H√†m c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
  const updateUser = async (updatedData) => {
    if (!user || !token) return { success: false, error: 'Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' };

    try {
      setLoading(true);
      const data = await apiCall('/auth/profile', {
        method: 'PUT',
        body: JSON.stringify(updatedData)
      });

      if (data.success) {
        setUser(data.data.user);
        return { success: true, user: data.data.user };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // H√†m ƒë·ªïi m·∫≠t kh·∫©u
  const changePassword = async (currentPassword, newPassword, confirmPassword) => {
    if (!user || !token) return { success: false, error: 'Kh√¥ng c√≥ ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' };

    try {
      setLoading(true);
      const data = await apiCall('/auth/change-password', {
        method: 'POST',
        body: JSON.stringify({ currentPassword, newPassword, confirmPassword })
      });

      if (data.success) {
        return { success: true };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      setError(err.message);
      return { success: false, error: err.message };
    } finally {
      setLoading(false);
    }
  };

  // H√†m refresh th√¥ng tin user t·ª´ server
  const refreshUser = async () => {
    if (!token) return { success: false, error: 'Kh√¥ng c√≥ token' };

    try {
      const data = await apiCall('/auth/profile');

      if (data.success) {
        setUser(data.data.user);
        return { success: true, user: data.data.user };
      } else {
        throw new Error(data.message);
      }
    } catch (err) {
      // If token is invalid, logout
      if (err.message.includes('token') || err.message.includes('401')) {
        logout();
      }
      return { success: false, error: err.message };
    }
  };

  // Legacy functions for backward compatibility
  const refreshMembership = refreshUser;  // Gi√° tr·ªã context
  const value = {
    user,
    loading,
    error,
    token,
    login,
    logout,
    register,
    verifyEmail,
    resendVerificationCode,
    updateUser,
    changePassword,
    refreshUser,
    refreshMembership,
    setUser,
    isAuthenticated: !!user && !!token
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export default AuthContext;
