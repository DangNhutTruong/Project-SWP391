import React, { createContext, useState, useContext, useEffect } from 'react';
import { useAuth } from './AuthContext';
import membershipApi from '../utils/membershipApi';

// T·∫°o context cho qu·∫£n l√Ω membership
const MembershipContext = createContext(null);

// Hook t√πy ch·ªânh ƒë·ªÉ s·ª≠ d·ª•ng MembershipContext
export const useMembership = () => useContext(MembershipContext);

// Provider component
export const MembershipProvider = ({ children }) => {
  const { user, updateUser } = useAuth();
  
  // Danh s√°ch c√°c g√≥i th√†nh vi√™n
  const membershipTiers = {
    free: {
      name: 'Mi·ªÖn ph√≠',
      description: 'G√≥i c∆° b·∫£n v·ªõi c√°c t√≠nh nƒÉng c∆° b·∫£n',
      price: 0,
      features: [
        'Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc',
        'T√†i li·ªáu c∆° b·∫£n',
        'C√¥ng c·ª• theo d√µi t√¢m tr·∫°ng'
      ],
      icon: 'üî∏'
    },
    premium: {
      name: 'Premium',
      description: 'G√≥i premium v·ªõi c√°c t√≠nh nƒÉng n√¢ng cao',
      price: 99000,
      features: [
        'T·∫•t c·∫£ t√≠nh nƒÉng c·ªßa g√≥i Mi·ªÖn ph√≠',
        'Chat v·ªõi Coach',
        'N·ªôi dung premium',
        'C√¥ng c·ª• ph√¢n t√≠ch n√¢ng cao'
      ],
      icon: 'üî∂'
    },
    pro: {
      name: 'Professional',
      description: 'G√≥i chuy√™n nghi·ªáp v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng',
      price: 199000,
      features: [
        'T·∫•t c·∫£ t√≠nh nƒÉng c·ªßa g√≥i Premium',
        'T∆∞ v·∫•n 1-1 v·ªõi chuy√™n gia',
        'K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n h√≥a',
        '∆Øu ti√™n h·ªó tr·ª£ 24/7'
      ],
      icon: 'üíé'
    }
  };

  // L·∫•y th√¥ng tin g√≥i th√†nh vi√™n hi·ªán t·∫°i
  const getCurrentMembershipInfo = () => {
    const currentTier = user?.membership || 'free';
    return membershipTiers[currentTier];
  };
  
  // N√¢ng c·∫•p membership
  const upgradeMembership = async (targetMembership) => {
    if (!user) return { success: false, error: 'Ch∆∞a ƒëƒÉng nh·∫≠p' };
    if (!membershipTiers[targetMembership]) return { success: false, error: 'G√≥i th√†nh vi√™n kh√¥ng h·ª£p l·ªá' };
    
    // Ki·ªÉm tra xem c√≥ ƒëang n√¢ng c·∫•p kh√¥ng
    const currentTierIndex = Object.keys(membershipTiers).indexOf(user.membership || 'free');
    const targetTierIndex = Object.keys(membershipTiers).indexOf(targetMembership);
    
    if (currentTierIndex >= targetTierIndex) {
      return { 
        success: false, 
        error: 'B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i th√†nh vi√™n cao h∆°n ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng' 
      };
    }
    
    try {
      // G·ªçi API ƒë·ªÉ n√¢ng c·∫•p membership
      const response = await membershipApi.upgradeMembership(targetMembership);
      
      if (!response.success) {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ n√¢ng c·∫•p g√≥i th√†nh vi√™n');
      }
      
      // S·ª≠ d·ª•ng updateUser t·ª´ AuthContext ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong state
      await updateUser({ membership: targetMembership, membershipType: targetMembership });
      
      return { success: true };
    } catch (error) {
      console.error('Upgrade membership error:', error);
      
      // N·∫øu API kh√¥ng ho·∫°t ƒë·ªông, th·ª≠ fallback b·∫±ng updateUser tr·ª±c ti·∫øp
      try {
        const result = await updateUser({ membership: targetMembership });
        if (result.success) {
          return { success: true };
        }
      } catch (fallbackError) {
        console.error('Fallback upgrade failed:', fallbackError);
      }
      
      return { 
        success: false, 
        error: error.message || 'C√≥ l·ªói x·∫£y ra khi n√¢ng c·∫•p g√≥i th√†nh vi√™n' 
      };
    }
  };
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng kh√¥ng
  const checkFeatureAccess = (requiredMembership) => {
    if (!user) return false;
    
    // ƒê·∫£m b·∫£o r·∫±ng requiredMembership l√† m·ªôt gi√° tr·ªã h·ª£p l·ªá
    if (!requiredMembership || !['free', 'premium', 'pro'].includes(requiredMembership)) {
      requiredMembership = 'premium'; // Gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng h·ª£p l·ªá
    }
    
    const membershipLevels = ['free', 'premium', 'pro'];
    const userLevel = membershipLevels.indexOf(user.membership || 'free');
    const requiredLevel = membershipLevels.indexOf(requiredMembership);
    
    // Ki·ªÉm tra b·ªï sung ƒë·ªÉ ghi log v√† debug
    console.log(`Ki·ªÉm tra quy·ªÅn truy c·∫≠p: User ${user.email} c√≥ g√≥i ${user.membership || 'free'} (c·∫•p ${userLevel})`);
    console.log(`Y√™u c·∫ßu g√≥i t·ªëi thi·ªÉu: ${requiredMembership} (c·∫•p ${requiredLevel})`);
    console.log(`K·∫øt qu·∫£: ${userLevel >= requiredLevel ? 'C√≥ quy·ªÅn truy c·∫≠p' : 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'}`);
    
    return userLevel >= requiredLevel;
  };

  // Gi√° tr·ªã context
  const value = {
    membershipTiers,
    getCurrentMembershipInfo,
    upgradeMembership,
    checkFeatureAccess,
    currentMembership: user?.membership || 'free'
  };

  return <MembershipContext.Provider value={value}>{children}</MembershipContext.Provider>;
};

export default MembershipContext;
