import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import '../styles/EmailVerification.css';

export default function EmailVerification() {
    const [verificationCode, setVerificationCode] = useState('');
    const [email, setEmail] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [resendCooldown, setResendCooldown] = useState(0);

    const navigate = useNavigate();
    const location = useLocation();
    const { verifyEmail, resendVerificationCode } = useAuth();

    useEffect(() => {
        // Get email from location state (passed from registration page)
        if (location.state?.email) {
            setEmail(location.state.email);
        } else {
            // If no email provided, redirect to register
            navigate('/signup');
        }
    }, [location, navigate]);

    useEffect(() => {
        // Countdown timer for resend button
        if (resendCooldown > 0) {
            const timer = setTimeout(() => {
                setResendCooldown(resendCooldown - 1);
            }, 1000);
            return () => clearTimeout(timer);
        }
    }, [resendCooldown]); const handleVerify = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess('');

        if (verificationCode.length !== 6) {
            setError('M√£ x√°c nh·∫≠n ph·∫£i c√≥ 6 ch·ªØ s·ªë');
            return;
        }

        setIsLoading(true);

        try {
            const result = await verifyEmail(email, verificationCode);

            if (result.success) {
                setSuccess('X√°c nh·∫≠n email th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p...');
                setTimeout(() => {
                    navigate('/login');
                }, 2000);
            } else {
                setError(result.error || 'M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng. Vui l√≤ng ki·ªÉm tra v√† th·ª≠ l·∫°i.');
            }
        } catch (err) {
            setError(`C√≥ l·ªói x·∫£y ra: ${err.message || 'Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c l·ªói'}`);
        } finally {
            setIsLoading(false);
        }
    }; const handleResendCode = async () => {
        if (resendCooldown > 0) return;

        setError('');
        setSuccess('');
        setIsLoading(true);

        try {
            const result = await resendVerificationCode(email);

            if (result.success) {
                setSuccess('M√£ x√°c nh·∫≠n m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n');
                setResendCooldown(60); // 60 seconds cooldown
                setVerificationCode(''); // Clear current code
            } else {
                setError(result.error || 'Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ x√°c nh·∫≠n');
            }
        } catch (err) {
            setError('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
            console.error('Resend error:', err);
        } finally {
            setIsLoading(false);
        }
    }; const handleCodeChange = (e) => {
        const value = e.target.value.replace(/\D/g, ''); // Only allow digits
        if (value.length <= 6) {
            setVerificationCode(value);
        }
    };

    return (
        <div className="email-verification-page">
            <div className="verification-container">
                <div className="verification-card">
                    <div className="verification-header">
                        <div className="email-icon">
                            üìß
                        </div>
                        <h1>X√°c nh·∫≠n Email</h1>
                        <p>Ch√∫ng t√¥i ƒë√£ g·ª≠i m√£ x√°c nh·∫≠n 6 ch·ªØ s·ªë ƒë·∫øn</p>
                        <p className="email-address">{email}</p>
                    </div>

                    <form onSubmit={handleVerify} className="verification-form">
                        {error && <div className="error-message">{error}</div>}
                        {success && <div className="success-message">{success}</div>}

                        <div className="form-group">
                            <label htmlFor="verificationCode">M√£ x√°c nh·∫≠n</label>
                            <input
                                type="text"
                                id="verificationCode"
                                value={verificationCode}
                                onChange={handleCodeChange}
                                placeholder="Nh·∫≠p 6 ch·ªØ s·ªë"
                                maxLength="6"
                                className="verification-input"
                                disabled={isLoading}
                                required
                                autoComplete="one-time-code"
                            />
                            <div className="input-hint">
                                Nh·∫≠p m√£ 6 ch·ªØ s·ªë t·ª´ email c·ªßa b·∫°n
                            </div>
                        </div>

                        <button
                            type="submit"
                            className="verify-btn"
                            disabled={isLoading || verificationCode.length !== 6}
                        >
                            {isLoading ? 'ƒêang x√°c nh·∫≠n...' : 'X√°c nh·∫≠n'}
                        </button>

                        <div className="resend-section">
                            <p>Kh√¥ng nh·∫≠n ƒë∆∞·ª£c email?</p>
                            <button
                                type="button"
                                className="resend-btn"
                                onClick={handleResendCode}
                                disabled={isLoading || resendCooldown > 0}
                            >
                                {resendCooldown > 0
                                    ? `G·ª≠i l·∫°i sau ${resendCooldown}s`
                                    : 'G·ª≠i l·∫°i m√£'
                                }
                            </button>
                        </div>

                        <div className="verification-tips">
                            <h4>üí° M·∫πo:</h4>
                            <ul>
                                <li>Ki·ªÉm tra th∆∞ m·ª•c spam/junk mail</li>
                                <li>M√£ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t</li>
                                <li>ƒê·∫£m b·∫£o ƒë·ªãa ch·ªâ email ch√≠nh x√°c</li>
                            </ul>
                        </div>

                        <div className="back-to-register">
                            <button
                                type="button"
                                className="back-btn"
                                onClick={() => navigate('/signup')}
                            >
                                ‚Üê Quay l·∫°i ƒëƒÉng k√Ω
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
}
