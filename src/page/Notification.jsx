import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import './Notification.css';

const Notification = () => {
  const { user } = useAuth();
  
  // Calculate days since registration
  const daysSinceRegistration = user?.startDate ? 
    Math.floor((new Date() - new Date(user.startDate)) / (1000 * 60 * 60 * 24)) : 1;
  
  // Sample notification data for new user (1 day account)
  const [notifications, setNotifications] = useState([
    {
      id: 1,
      type: 'welcome',
      icon: 'üëã',
      message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh cai thu·ªëc',
      description: 'Ch√∫c m·ª´ng b·∫°n ƒë√£ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc. C√πng nhau ch√∫ng ta s·∫Ω th√†nh c√¥ng!',
      time: '1 ng√†y tr∆∞·ªõc',
      read: false
    },
    {
      id: 2,
      type: 'badge',
      icon: 'üèÖ',
      message: 'B·∫°n ƒë√£ ƒë·∫°t ƒë∆∞·ª£c huy hi·ªáu "Ng√†y ƒë·∫ßu ti√™n"',
      description: 'Ch√∫c m·ª´ng! B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c huy hi·ªáu "Ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc".',
      time: '24 gi·ªù tr∆∞·ªõc',
      read: false
    },
    {
      id: 3,
      type: 'health',
      icon: 'üíì',
      message: 'C·∫≠p nh·∫≠t s·ª©c kh·ªèe',
      description: 'Sau 20 ph√∫t kh√¥ng h√∫t thu·ªëc, huy·∫øt √°p v√† nh·ªãp tim c·ªßa b·∫°n ƒë√£ tr·ªü v·ªÅ m·ª©c b√¨nh th∆∞·ªùng.',
      time: '20 gi·ªù tr∆∞·ªõc',
      read: false
    },
    {
      id: 4,
      type: 'tip',
      icon: 'üí°',
      message: 'M·∫πo v∆∞·ª£t qua c∆°n th√®m thu·ªëc',
      description: 'Khi c·∫£m th·∫•y th√®m thu·ªëc, h√£y th·ª≠ u·ªëng n∆∞·ªõc, ƒÉn nh·∫π ho·∫∑c ƒëi d·∫°o 5 ph√∫t.',
      time: '12 gi·ªù tr∆∞·ªõc',
      read: true
    },
    {
      id: 5,
      type: 'reminder',
      icon: '‚è∞',
      message: 'Nh·∫Øc nh·ªü c·∫≠p nh·∫≠t ti·∫øn tr√¨nh',
      description: 'H√£y c·∫≠p nh·∫≠t tr·∫°ng th√°i cai thu·ªëc h√¥m nay c·ªßa b·∫°n trong m·ª•c T∆∞ v·∫•n.',
      time: '2 gi·ªù tr∆∞·ªõc',
      read: false
    }
  ]);

  // State for notification preferences
  const [notificationSettings, setNotificationSettings] = useState({
    dailyReminder: true,
    progressUpdate: true,
    goalReminder: true,
    counselorNotification: true,
    blogUpdate: true
  });

  // State for notification delivery methods
  const [deliveryMethods, setDeliveryMethods] = useState({
    app: true,
    email: true,
    sms: false
  });

  // Handle toggle for notification settings
  const handleSettingToggle = (setting) => {
    setNotificationSettings(prev => ({
      ...prev,
      [setting]: !prev[setting]
    }));
  };

  // Handle toggle for delivery methods
  const handleDeliveryToggle = (method) => {
    setDeliveryMethods(prev => ({
      ...prev,
      [method]: !prev[method]
    }));
  };

  // Handle mark as read
  const markAsRead = (id) => {
    setNotifications(prev => 
      prev.map(notification => 
        notification.id === id 
          ? { ...notification, read: true } 
          : notification
      )
    );
  };

  // Handle mark all as read
  const markAllAsRead = () => {
    setNotifications(prev => 
      prev.map(notification => ({ ...notification, read: true }))
    );
  };

  return (
    <div className="notification-container">
      <div className="notification-header-actions">
        <h1 className="notification-title">Danh s√°ch th√¥ng b√°o g·∫ßn ƒë√¢y</h1>
        <button className="mark-all-read-btn" onClick={markAllAsRead}>
          ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
        </button>
      </div>
      
      {/* Recent notifications section */}
      <div className="notification-list">
        {notifications.map((notification) => (
          <div 
            key={notification.id} 
            className={`notification-item ${notification.read ? '' : 'unread'}`}
          >
            <div className="notification-icon">{notification.icon}</div>
            <div className="notification-content">
              <div className="notification-header">
                <h3>{notification.message}</h3>
                <span className="notification-time">{notification.time}</span>
              </div>
              <p>{notification.description}</p>
            </div>
            <button 
              className={`notification-status ${notification.read ? 'read' : 'unread'}`}
              onClick={() => markAsRead(notification.id)}
            >
              {notification.read ? 'ƒê√£ ƒë·ªçc' : 'Ch∆∞a ƒë·ªçc'}
            </button>
          </div>
        ))}
      </div>
      
      {/* New user specific guidance */}
      <div className="new-user-guidance">
        <h2 className="section-title">
          <span className="icon">üîç</span> H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi
        </h2>
        <div className="guidance-content">
          <p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h√†nh tr√¨nh cai thu·ªëc! D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ gi√∫p b·∫°n:</p>
          <ul className="guidance-list">
            <li><strong>C·∫≠p nh·∫≠t h√†ng ng√†y:</strong> Theo d√µi ti·∫øn tr√¨nh m·ªói ng√†y trong m·ª•c T∆∞ v·∫•n</li>
            <li><strong>Xem ti·∫øn tr√¨nh s·ª©c kh·ªèe:</strong> Ki·ªÉm tra c√°c c·∫£i thi·ªán s·ª©c kh·ªèe trong m·ª•c H·ªì s∆° c√° nh√¢n</li>
            <li><strong>Nh·∫≠n h·ªó tr·ª£:</strong> Tham gia v√†o c·ªông ƒë·ªìng ƒë·ªÉ nh·∫≠n s·ª± h·ªó tr·ª£</li>
          </ul>
        </div>
      </div>
      
      {/* Notification preferences section */}
      <div className="notification-preferences">
        <h2 className="section-title">
          <span className="icon">üîî</span> T√πy ch·ªçn nh·∫≠n th√¥ng b√°o
        </h2>
        
        <div className="preference-list">
          <div className="preference-item">
            <div className="preference-info">
              <span className="preference-icon">üîî</span>
              <span className="preference-text">Nh·∫Øc nh·ªü h√†ng ng√†y</span>
            </div>
            <label className="toggle-switch">
              <input 
                type="checkbox" 
                checked={notificationSettings.dailyReminder}
                onChange={() => handleSettingToggle('dailyReminder')}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
          
          <div className="preference-item">
            <div className="preference-info">
              <span className="preference-icon">üìä</span>
              <span className="preference-text">C·∫≠p nh·∫≠t ti·∫øn tr√¨nh cai thu·ªëc</span>
            </div>
            <label className="toggle-switch">
              <input 
                type="checkbox" 
                checked={notificationSettings.progressUpdate}
                onChange={() => handleSettingToggle('progressUpdate')}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
          
          <div className="preference-item">
            <div className="preference-info">
              <span className="preference-icon">‚≠ï</span>
              <span className="preference-text">Nh·∫Øc t√°i l·∫≠p m·ª•c ti√™u</span>
            </div>
            <label className="toggle-switch">
              <input 
                type="checkbox" 
                checked={notificationSettings.goalReminder}
                onChange={() => handleSettingToggle('goalReminder')}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
          
          <div className="preference-item">
            <div className="preference-info">
              <span className="preference-icon">üë®‚Äç‚öïÔ∏è</span>
              <span className="preference-text">Th√¥ng b√°o t·ª´ c·ªë v·∫•n</span>
            </div>
            <label className="toggle-switch">
              <input 
                type="checkbox" 
                checked={notificationSettings.counselorNotification}
                onChange={() => handleSettingToggle('counselorNotification')}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
          
          <div className="preference-item">
            <div className="preference-info">
              <span className="preference-icon">üì∞</span>
              <span className="preference-text">Tin t·ª©c, blog h·ªØu √≠ch</span>
            </div>
            <label className="toggle-switch">
              <input 
                type="checkbox" 
                checked={notificationSettings.blogUpdate}
                onChange={() => handleSettingToggle('blogUpdate')}
              />
              <span className="toggle-slider"></span>
            </label>
          </div>
        </div>
      </div>
      
      {/* Notification delivery methods section */}
      <div className="delivery-methods">
        <h2 className="section-title">
          <span className="icon">üì±</span> Thi·∫øt l·∫≠p ph∆∞∆°ng th·ª©c nh·∫≠n
        </h2>
        
        <div className="method-list">
          <div className="method-item">
            <div className="method-info">
              <input 
                type="checkbox" 
                id="app-method" 
                checked={deliveryMethods.app}
                onChange={() => handleDeliveryToggle('app')}
              />
              <label htmlFor="app-method">
                <span className="method-icon">üì±</span>
                <span className="method-text">·ª®ng d·ª•ng (App/Web)</span>
              </label>
            </div>
          </div>
          
          <div className="method-item">
            <div className="method-info">
              <input 
                type="checkbox" 
                id="email-method" 
                checked={deliveryMethods.email}
                onChange={() => handleDeliveryToggle('email')}
              />
              <label htmlFor="email-method">
                <span className="method-icon">‚úâÔ∏è</span>
                <span className="method-text">Email</span>
              </label>
            </div>
          </div>
          
          <div className="method-item">
            <div className="method-info">
              <input 
                type="checkbox" 
                id="sms-method" 
                checked={deliveryMethods.sms}
                onChange={() => handleDeliveryToggle('sms')}
              />
              <label htmlFor="sms-method">
                <span className="method-icon">üí¨</span>
                <span className="method-text">SMS</span>
              </label>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Notification;
