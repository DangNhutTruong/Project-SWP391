import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import '../styles/Pay.css';
import { FaCreditCard, FaWallet, FaMoneyBillWave, FaPaypal } from 'react-icons/fa';

const Pay = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { updateUser } = useAuth();
  const [selectedPackage, setSelectedPackage] = useState(null);
  const [paymentMethod, setPaymentMethod] = useState('zalopay'); // Default payment method
  const [cardInfo, setCardInfo] = useState({
    cardName: '',
    cardNumber: '',
    expiryDate: '',
    cvv: ''
  });
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [processingMessage, setProcessingMessage] = useState('');

  useEffect(() => {
    // Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu t·ª´ trang ch·ªçn g√≥i
    if (location.state && location.state.package) {
      setSelectedPackage(location.state.package);
    } else {
      // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, chuy·ªÉn v·ªÅ trang ch·ªçn g√≥i
      navigate('/membership');
    }
  }, [location, navigate]);

  // X·ª≠ l√Ω thay ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n
  const handlePaymentMethodChange = (method) => {
    setPaymentMethod(method);
  };

  // X·ª≠ l√Ω thay ƒë·ªïi th√¥ng tin th·∫ª
  const handleCardInfoChange = (e) => {
    const { name, value } = e.target;
    setCardInfo({
      ...cardInfo,
      [name]: value
    });
  };  // X·ª≠ l√Ω khi nh·∫•n n√∫t thanh to√°n
  const handlePayment = (e) => {
    e.preventDefault();

    if (!termsAccepted) {
      alert('Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng d·ªãch v·ª•');
      return;
    }

    // Hi·ªÉn th·ªã loading ho·∫∑c th√¥ng b√°o ƒëang x·ª≠ l√Ω thanh to√°n d·ª±a tr√™n ph∆∞∆°ng th·ª©c thanh to√°n
    setIsProcessing(true);

    // Hi·ªÉn th·ªã th√¥ng b√°o x·ª≠ l√Ω d·ª±a v√†o ph∆∞∆°ng th·ª©c thanh to√°n
    let message = '';
    switch (paymentMethod) {
      case 'creditCard':
        message = 'ƒêang x√°c th·ª±c th√¥ng tin th·∫ª...';
        break;
      case 'momo':
        message = 'ƒêang ch·ªù thanh to√°n t·ª´ v√≠ Momo...';
        break;
      case 'zalopay':
        message = 'ƒêang ch·ªù thanh to√°n t·ª´ ZaloPay...';
        break;
      case 'paypal':
        message = 'ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn PayPal...';
        break;
      default:
        message = 'ƒêang x·ª≠ l√Ω thanh to√°n...';
    }

    setProcessingMessage(message);

    // M√¥ ph·ªèng qu√° tr√¨nh thanh to√°n (gi·∫£ l·∫≠p delay ƒë·ªÉ t·∫°o tr·∫£i nghi·ªám th·ª±c t·∫ø h∆°n)
    console.log(`ƒêang x·ª≠ l√Ω thanh to√°n g√≥i ${selectedPackage.name} v·ªõi gi√° ${selectedPackage.price.toLocaleString()}ƒë qua ${paymentMethod}`);

    // M√¥ ph·ªèng th·ªùi gian x·ª≠ l√Ω thanh to√°n
    setTimeout(() => {
      // C·∫≠p nh·∫≠t g√≥i th√†nh vi√™n c·ªßa ng∆∞·ªùi d√πng
      updateUser({ membershipType: selectedPackage.name.toLowerCase() });

      // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng sau khi thanh to√°n - s·ª≠ d·ª•ng replace ƒë·ªÉ kh√¥ng th·ªÉ quay l·∫°i
      navigate('/payment/success', {
        replace: true,
        state: {
          package: selectedPackage,
          paymentMethod: paymentMethod
        }
      });
    }, 2000); // Gi·∫£ l·∫≠p delay 2 gi√¢y
  };

  // X·ª≠ l√Ω n√∫t quay l·∫°i
  const handleGoBack = () => {
    navigate('/membership');
  };
  // Hi·ªÉn th·ªã loading khi ch∆∞a c√≥ d·ªØ li·ªáu g√≥i
  if (!selectedPackage) {
    return (
      <div className="payment-container">
        <div className="payment-loading">
          <div className="loading-spinner"></div>
          <p>ƒêang t·∫£i th√¥ng tin...</p>
        </div>
      </div>
    );
  }

  // Hi·ªÉn th·ªã m√†n h√¨nh x·ª≠ l√Ω thanh to√°n
  if (isProcessing) {
    return (
      <div className="payment-container">
        <div className="payment-processing">
          <div className="processing-animation">
            <div className="loading-spinner"></div>
            {paymentMethod === 'creditCard' && <div className="credit-card-icon">üí≥</div>}
            {paymentMethod === 'momo' && <div className="momo-icon">M</div>}
            {paymentMethod === 'zalopay' && <div className="zalopay-icon">Z</div>}
            {paymentMethod === 'paypal' && <div className="paypal-icon">P</div>}
          </div>
          <h2>{processingMessage}</h2>
          <p>Vui l√≤ng kh√¥ng ƒë√≥ng trang n√†y trong qu√° tr√¨nh x·ª≠ l√Ω...</p>
        </div>
      </div>
    );
  }

  // T√≠nh VAT v√† t·ªïng ti·ªÅn
  const vat = selectedPackage.price * 0.1;
  const totalAmount = selectedPackage.price + vat;

  return (
    <div className="payment-container">
      <div className="payment-content">
        <div className="payment-methods-section">
          <h2>Ph∆∞∆°ng th·ª©c thanh to√°n</h2>

          <div className="payment-method-options">
            <div className="payment-option">
              <input
                type="radio"
                id="creditCard"
                name="paymentMethod"
                checked={paymentMethod === 'creditCard'}
                onChange={() => handlePaymentMethodChange('creditCard')}
              />              <label htmlFor="creditCard">
                <FaCreditCard style={{ marginRight: '10px' }} /> Th·∫ª t√≠n d·ª•ng/ghi n·ª£
              </label>
            </div>

            <div className="payment-option">
              <input
                type="radio"
                id="momo"
                name="paymentMethod"
                checked={paymentMethod === 'momo'}
                onChange={() => handlePaymentMethodChange('momo')}
              />
              <label htmlFor="momo">
                <FaWallet style={{ marginRight: '10px' }} /> V√≠ Momo
              </label>
            </div>

            <div className="payment-option">
              <input
                type="radio"
                id="zalopay"
                name="paymentMethod"
                checked={paymentMethod === 'zalopay'}
                onChange={() => handlePaymentMethodChange('zalopay')}
              />
              <label htmlFor="zalopay">
                <FaMoneyBillWave style={{ marginRight: '10px' }} /> ZaloPay
              </label>
            </div>

            <div className="payment-option">
              <input
                type="radio"
                id="paypal"
                name="paymentMethod"
                checked={paymentMethod === 'paypal'}
                onChange={() => handlePaymentMethodChange('paypal')}
              />
              <label htmlFor="paypal">
                <FaPaypal style={{ marginRight: '10px' }} /> PayPal
              </label>
            </div>
          </div>
          {paymentMethod === 'creditCard' && (
            <div className="card-info-form">
              <h3>Th√¥ng tin th·∫ª</h3>
              <div className="form-group">
                <label htmlFor="cardName">T√™n ch·ªß th·∫ª</label>
                <input
                  type="text"
                  id="cardName"
                  name="cardName"
                  placeholder="NGUYEN VAN A"
                  value={cardInfo.cardName}
                  onChange={handleCardInfoChange}
                  required
                />
              </div>
              <div className="form-group">
                <label htmlFor="cardNumber">S·ªë th·∫ª</label>
                <input
                  type="text"
                  id="cardNumber"
                  name="cardNumber"
                  placeholder="1234 5678 9012 3456"
                  value={cardInfo.cardNumber}
                  onChange={handleCardInfoChange}
                  required
                />
              </div>
              <div className="form-row">
                <div className="form-group half-width">
                  <label htmlFor="expiryDate">Ng√†y h·∫øt h·∫°n</label>
                  <input
                    type="text"
                    id="expiryDate"
                    name="expiryDate"
                    placeholder="MM/YY"
                    value={cardInfo.expiryDate}
                    onChange={handleCardInfoChange}
                    required
                  />
                </div>
                <div className="form-group half-width">
                  <label htmlFor="cvv">M√£ CVV</label>
                  <input
                    type="text"
                    id="cvv"
                    name="cvv"
                    placeholder="123"
                    value={cardInfo.cvv}
                    onChange={handleCardInfoChange}
                    required
                  />
                </div>
              </div>
            </div>
          )}

          {paymentMethod === 'momo' && (
            <div className="momo-payment-form">
              <div className="qr-code-container">
                <h3>Qu√©t m√£ ƒë·ªÉ thanh to√°n qua V√≠ Momo</h3>
                <div className="qr-code">
                  <div className="qr-image">
                    {/* QR code placeholder - would be dynamic in real app */}
                    <div className="qr-placeholder">
                      <div className="qr-grid"></div>
                    </div>
                  </div>
                  <p className="qr-instruction">S·ª≠ d·ª•ng ·ª©ng d·ª•ng Momo ƒë·ªÉ qu√©t m√£ QR</p>
                </div>
                <div className="payment-instructions">
                  <h4>H∆∞·ªõng d·∫´n thanh to√°n:</h4>
                  <ol>
                    <li>M·ªü ·ª©ng d·ª•ng Momo tr√™n ƒëi·ªán tho·∫°i c·ªßa b·∫°n</li>
                    <li>Ch·ªçn "Qu√©t m√£ QR" trong ·ª©ng d·ª•ng</li>
                    <li>Qu√©t m√£ QR ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü tr√™n</li>
                    <li>X√°c nh·∫≠n thanh to√°n tr√™n ·ª©ng d·ª•ng Momo</li>
                    <li>ƒê·ª£i x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng</li>
                  </ol>
                </div>
              </div>
            </div>
          )}

          {paymentMethod === 'zalopay' && (
            <div className="zalopay-payment-form">
              <div className="qr-code-container">
                <h3>Qu√©t m√£ ƒë·ªÉ thanh to√°n qua ZaloPay</h3>
                <div className="qr-code">
                  <div className="qr-image zalopay">
                    {/* QR code placeholder - would be dynamic in real app */}
                    <div className="qr-placeholder">
                      <div className="qr-grid"></div>
                    </div>
                  </div>
                  <p className="qr-instruction">S·ª≠ d·ª•ng ·ª©ng d·ª•ng ZaloPay ƒë·ªÉ qu√©t m√£ QR</p>
                </div>
                <div className="payment-instructions">
                  <h4>H∆∞·ªõng d·∫´n thanh to√°n:</h4>
                  <ol>
                    <li>M·ªü ·ª©ng d·ª•ng ZaloPay tr√™n ƒëi·ªán tho·∫°i c·ªßa b·∫°n</li>
                    <li>Ch·ªçn "Qu√©t m√£ QR" trong ·ª©ng d·ª•ng</li>
                    <li>Qu√©t m√£ QR ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü tr√™n</li>
                    <li>X√°c nh·∫≠n thanh to√°n tr√™n ·ª©ng d·ª•ng ZaloPay</li>
                    <li>ƒê·ª£i x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng</li>
                  </ol>
                </div>
              </div>
            </div>
          )}

          {paymentMethod === 'paypal' && (
            <div className="paypal-payment-form">
              <h3>Thanh to√°n b·∫±ng PayPal</h3>
              <div className="paypal-container">
                <div className="paypal-logo">
                  <div className="paypal-p">P</div>
                  <div className="paypal-a">a</div>
                  <div className="paypal-y">y</div>
                  <div className="paypal-p2">P</div>
                  <div className="paypal-a2">a</div>
                  <div className="paypal-l">l</div>
                </div>
                <p className="paypal-instruction">B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang web PayPal ƒë·ªÉ ho√†n t·∫•t thanh to√°n.</p>                <button className="paypal-button" onClick={handlePayment}></button>
                <div className="paypal-secure">
                  <span className="lock-icon">üîí</span> Thanh to√°n an to√†n qua PayPal
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="payment-summary-section">
          <h2>T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
          <div className="package-details">
            <div className="package-info">
              <span>G√≥i {selectedPackage.name}</span>
              <span>{selectedPackage.price.toLocaleString()}ƒë</span>
            </div>
            <div className="tax-info">
              <span>Thu·∫ø VAT (10%)</span>
              <span>{vat.toLocaleString()}ƒë</span>
            </div>
            <div className="total-amount">
              <span>T·ªïng c·ªông</span>
              <span>{totalAmount.toLocaleString()}ƒë</span>
            </div>
          </div>

          <div className="payment-agreement">
            <input
              type="checkbox"
              id="terms"
              checked={termsAccepted}
              onChange={() => setTermsAccepted(!termsAccepted)}
            />
            <label htmlFor="terms">T√¥i ƒë·ªìng √Ω v·ªõi <a href="#">ƒëi·ªÅu kho·∫£n</a> v√† <a href="#">ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng d·ªãch v·ª•</a></label>
          </div>

          <div className="payment-actions">
            <button className="payment-button" onClick={handlePayment} disabled={!termsAccepted}>
              Thanh to√°n ngay
            </button>
            <button className="back-button" onClick={handleGoBack}>
              Quay l·∫°i
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Pay;