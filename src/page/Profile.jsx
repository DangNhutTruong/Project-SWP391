import React, { useState, useEffect } from "react";
import {
  FaUserAlt,
  FaChartLine,
  FaCalendarAlt,
  FaHeartbeat,
  FaTrophy,
  FaComment,
  FaHeart,
  FaCheckCircle,
  FaExclamationCircle,
  FaCog,
  FaBell,
  FaCrown,
  FaTimes,
} from "react-icons/fa";

import "./Profile.css";
import "./membership.css";
import { useAuth } from "../context/AuthContext";
import AppointmentList from "../components/AppointmentList";
import QuitPlanDisplay from "../components/QuitPlanDisplay";

// Component Modal ch·ªânh s·ª≠a k·∫ø ho·∫°ch
function PlanEditModal({ isOpen, onClose, currentPlan, onSave }) {
  const [planData, setPlanData] = useState({
    strategy:
      currentPlan.strategy || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
    startDate: currentPlan.startDate
      ? new Date(
        currentPlan.startDate.split("/").reverse().join("-")
      )
        .toISOString()
        .split("T")[0]
      : new Date().toISOString().split("T")[0],
    goal: currentPlan.goal || "Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setPlanData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(planData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        <div className="modal-header">
          <h2>ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch cai thu·ªëc</h2>
          <button className="close-button" onClick={onClose}>
            <FaTimes />
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label>Ph∆∞∆°ng ph√°p cai thu·ªëc</label>
            <select
              name="strategy"
              value={planData.strategy}
              onChange={handleChange}
              className="form-control"
            >
              <option value="Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i">
                Cai thu·ªëc ho√†n to√†n
              </option>
              <option value="Gi·∫£m d·∫ßn s·ªë ƒëi·∫øu thu·ªëc">Gi·∫£m d·∫ßn s·ªë ƒëi·∫øu thu·ªëc</option>
              <option value="S·ª≠ d·ª•ng s·∫£n ph·∫©m thay th·∫ø nicotine">
                S·ª≠ d·ª•ng s·∫£n ph·∫©m thay th·∫ø nicotine
              </option>
            </select>
          </div>

          <div className="form-group">
            <label>Ng√†y b·∫Øt ƒë·∫ßu</label>
            <input
              type="date"
              name="startDate"
              value={planData.startDate}
              onChange={handleChange}
              className="form-control"
            />
          </div>

          <div className="form-group">
            <label>M·ª•c ti√™u</label>
            <textarea
              name="goal"
              value={planData.goal}
              onChange={handleChange}
              rows="3"
              className="form-control"
            ></textarea>
          </div>

          <div className="form-actions">
            <button type="button" className="cancel-btn" onClick={onClose}>
              H·ªßy
            </button>
            <button type="submit" className="save-btn">
              L∆∞u thay ƒë·ªïi
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// Component c·∫≠p nh·∫≠t h√†ng ng√†y
<<<<<<< Updated upstream
=======
function DailyUpdate({ onSubmit }) {
  const [mood, setMood] = useState("");
  const [hasSmoked, setHasSmoked] = useState(null);
  const [symptoms, setSymptoms] = useState([]);
  const [notes, setNotes] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();

    if (hasSmoked === null) {
      alert("Vui l√≤ng cho bi·∫øt b·∫°n c√≥ h√∫t thu·ªëc h√¥m nay kh√¥ng");
      return;
    }

    if (!mood) {
      alert("Vui l√≤ng ch·ªçn t√¢m tr·∫°ng c·ªßa b·∫°n h√¥m nay");
      return;
    }

    onSubmit({
      hasSmoked,
      mood,
      symptoms,
      notes,
    });

    // Reset form
    setHasSmoked(null);
    setMood("");
    setSymptoms([]);
    setNotes("");
  };

  const toggleSymptom = (symptom) => {
    if (symptoms.includes(symptom)) {
      setSymptoms(symptoms.filter((s) => s !== symptom));
    } else {
      setSymptoms([...symptoms, symptom]);
    }
  };

  return (
    <div className="daily-update-form">
      <h2>C·∫≠p nh·∫≠t h√¥m nay</h2>

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <h3>B·∫°n c√≥ h√∫t thu·ªëc h√¥m nay kh√¥ng?</h3>
          <div className="radio-options">
            <label
              className={`radio-option ${hasSmoked === false ? "selected" : ""
                }`}
            >
              <input
                type="radio"
                name="hasSmoked"
                checked={hasSmoked === false}
                onChange={() => setHasSmoked(false)}
              />
              <span>Kh√¥ng</span>
            </label>

            <label
              className={`radio-option ${hasSmoked === true ? "selected" : ""}`}
            >
              <input
                type="radio"
                name="hasSmoked"
                checked={hasSmoked === true}
                onChange={() => setHasSmoked(true)}
              />
              <span>C√≥</span>
            </label>
          </div>
        </div>

        <div className="form-group">
          <h3>T√¢m tr·∫°ng c·ªßa b·∫°n h√¥m nay?</h3>
          <div className="mood-options">
            <button
              type="button"
              className={`mood-option ${mood === "T·ªët" ? "selected" : ""}`}
              onClick={() => setMood("T·ªët")}

            >
              <span className="mood-emoji">üòÉ</span>
              <span>T·ªët</span>
            </button>

            <button
              type="button"
              className={`mood-option ${mood === "B√¨nh th∆∞·ªùng" ? "selected" : ""}`}
              onClick={() => setMood("B√¨nh th∆∞·ªùng")}
            >
              <span className="mood-emoji">üòê</span>
              <span>B√¨nh th∆∞·ªùng</span>
            </button>

            <button
              type="button"
              className={`mood-option ${mood === "Kh√¥ng t·ªët" ? "selected" : ""}`}
              onClick={() => setMood("Kh√¥ng t·ªët")}
            >
              <span className="mood-emoji">üòî</span>
              <span>Kh√¥ng t·ªët</span>
            </button>

            <button
              type="button"
              className={`mood-option ${mood === "T·ªá" ? "selected" : ""}`}
              onClick={() => setMood("T·ªá")}
            >
              <span className="mood-emoji">üò©</span>
              <span>T·ªá</span>
            </button>

            <button
              type="button"
              className={`mood-option ${mood === "Th√®m thu·ªëc" ? "selected" : ""}`}
              onClick={() => setMood("Th√®m thu·ªëc")}
            >
              <span className="mood-emoji">üö¨</span>
              <span>Th√®m thu·ªëc</span>
            </button>
          </div>
        </div>

        <div className="form-group">
          <h3>Tri·ªáu ch·ª©ng h√¥m nay</h3>
          <div className="symptoms-options">
            <label
              className={`symptom-option ${symptoms.includes("Ho") ? "selected" : ""}`}
            >
              <input
                type="checkbox"
                checked={symptoms.includes("Ho")}
                onChange={() => toggleSymptom("Ho")}
              />
              <span>Ho</span>
            </label>

            <label
              className={`symptom-option ${symptoms.includes("Kh√≥ th·ªü") ? "selected" : ""}`}
            >
              <input
                type="checkbox"
                checked={symptoms.includes("Kh√≥ th·ªü")}
                onChange={() => toggleSymptom("Kh√≥ th·ªü")}
              />
              <span>Kh√≥ th·ªü</span>
            </label>

            <label
              className={`symptom-option ${symptoms.includes("M·ªát m·ªèi") ? "selected" : ""}`}
            >
              <input
                type="checkbox"
                checked={symptoms.includes("M·ªát m·ªèi")}
                onChange={() => toggleSymptom("M·ªát m·ªèi")}
              />
              <span>M·ªát m·ªèi</span>
            </label>

            <label
              className={`symptom-option ${symptoms.includes("CƒÉng th·∫≥ng") ? "selected" : ""}`}
            >
              <input
                type="checkbox"
                checked={symptoms.includes("CƒÉng th·∫≥ng")}
                onChange={() => toggleSymptom("CƒÉng th·∫≥ng")}
              />
              <span>CƒÉng th·∫≥ng</span>
            </label>
          </div>
        </div>

        <div className="form-group">
          <h3>Ghi ch√∫ nh·∫≠t k√Ω</h3>
          <textarea
            placeholder="Chia s·∫ª c·∫£m nghƒ© c·ªßa b·∫°n h√¥m nay..."
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            rows="4"
          ></textarea>
        </div>

        <button type="submit" className="submit-button">
          L∆∞u c·∫≠p nh·∫≠t
        </button>
      </form>
    </div>
  );
}

>>>>>>> Stashed changes
export default function ProfilePage() {
  const [activeTab, setActiveTab] = useState("profile");
  const [isPlanEditOpen, setIsPlanEditOpen] = useState(false);
  const { user, logout } = useAuth();
<<<<<<< Updated upstream
  const navigate = useNavigate();
  const notificationCount = 0; // n·∫øu b·∫°n c√≥ bi·∫øn n√†y th√¨ replace theo ƒë√∫ng gi√° tr·ªã
    // Check if redirected from appointment booking
=======

  // Add notification count state
  const [notificationCount] = useState(3);

  // Check if redirected from appointment booking
>>>>>>> Stashed changes
  useEffect(() => {
    const savedTab = localStorage.getItem('activeProfileTab');
    if (savedTab) {
      setActiveTab(savedTab);
      // Clear the saved tab after using it
      localStorage.removeItem('activeProfileTab');
    }
  }, []);

  // T√≠nh to√°n c√°c gi√° tr·ªã
  const calculateSavings = () => {
    if (!user) return { days: 0, money: 0, cigarettes: 0 };

    const startDate = new Date(user.startDate);
    const now = new Date();
    const days = Math.floor((now - startDate) / (1000 * 60 * 60 * 24));

    const costPerDay =
      (user.costPerPack / user.cigarettesPerPack) * user.cigarettesPerDay;
    const moneySaved = days * costPerDay;
    const cigarettesSaved = days * user.cigarettesPerDay;

    return {
      days: days > 0 ? days : 0,
      money: moneySaved > 0 ? moneySaved : 0,
      cigarettes: cigarettesSaved > 0 ? cigarettesSaved : 0,
    };
  };

  const savings = calculateSavings();

  // D·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫´u - ch·ªâ s·ª≠ d·ª•ng cho c√°c gi√° tr·ªã kh√¥ng c√≥ trong user
  const userData = {
    ...user,
    avatar: user?.avatar || "/image/hero/quit-smoking-2.png",
    daysWithoutSmoking: savings.days,
    moneySaved: savings.money,
    pointsEarned: savings.cigarettes,
    startDate:
      new Date(user?.startDate).toLocaleDateString("vi-VN") || "01/05/2023",
    cigarettesPerDay: user?.cigarettesPerDay || 20,
    costPerDay:
      (user?.costPerPack / user?.cigarettesPerPack) * user?.cigarettesPerDay ||
      30000,
    yearsOfSmoking: 8,
    fagerstromScore: "8/10",
    healthImprovements: [
      {
        time: "20 ph√∫t",
        description: "Huy·∫øt √°p v√† nh·ªãp tim tr·ªü v·ªÅ b√¨nh th∆∞·ªùng",
        completed: savings.days > 0,
      },
      {
        time: "24 gi·ªù",
        description: "CO trong m√°u gi·∫£m v·ªÅ m·ª©c b√¨nh th∆∞·ªùng",
        completed: savings.days >= 1,
      },
      {
        time: "48 gi·ªù",
        description: "Nicotine ƒë√£ r·ªùi kh·ªèi c∆° th·ªÉ",
        completed: savings.days >= 2,
      },
      {
        time: "72 gi·ªù",
        description: "H√¥ h·∫•p d·ªÖ d√†ng h∆°n",
        completed: savings.days >= 3,
      },
      {
        time: "2-12 tu·∫ßn",
        description: "Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán",
        completed: savings.days >= 14,
      },
    ],
    milestones: [
      {
        id: 1,
        name: "Chu·∫©n b·ªã cai thu·ªëc",
        date: new Date(
          new Date(user?.startDate).getTime() - 86400000
        ).toLocaleDateString("vi-VN"),
        completed: true,
      },
      {
        id: 2,
        name: "Ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc",
        date: new Date(user?.startDate).toLocaleDateString("vi-VN"),
        completed: savings.days >= 1,
      },
      {
        id: 3,
        name: "Tu·∫ßn ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc",
        date: new Date(
          new Date(user?.startDate).getTime() + 7 * 86400000
        ).toLocaleDateString("vi-VN"),
        completed: savings.days >= 7,
      },
      {
        id: 4,
        name: "Duy tr√¨ 3 th√°ng kh√¥ng h√∫t thu·ªëc",
        progress: `${Math.min(savings.days, 90)}/90 ng√†y`,
        completed: savings.days >= 90,
      },
    ],
    achievements: [
      {
        id: 1,
        name: "24 gi·ªù ƒë·∫ßu ti√™n",
        date:
          savings.days >= 1
            ? new Date(
              new Date(user?.startDate).getTime() + 86400000
            ).toLocaleDateString("vi-VN")
            : "",
        icon: "‚≠ê",
      },
      {
        id: 2,
        name: "1 tu·∫ßn kh√¥ng h√∫t",
        date:
          savings.days >= 7
            ? new Date(
              new Date(user?.startDate).getTime() + 7 * 86400000
            ).toLocaleDateString("vi-VN")
            : "",
        icon: "üèÖ",
      },
      {
        id: 3,
        name: "2 tu·∫ßn kh√¥ng h√∫t",
        date:
          savings.days >= 14
            ? new Date(
              new Date(user?.startDate).getTime() + 14 * 86400000
            ).toLocaleDateString("vi-VN")
            : "",
        icon: "üèÜ",
      },
      {
        id: 4,
        name: "1 th√°ng kh√¥ng h√∫t",
        date:
          savings.days >= 30
            ? new Date(
              new Date(user?.startDate).getTime() + 30 * 86400000
            ).toLocaleDateString("vi-VN")
            : "",
        icon: "üëë",
      },
    ],
    journalEntries: [
      {
        id: 1,
        day: savings.days,
        date: "H√¥m nay",
        mood: "B√¨nh th∆∞·ªùng",
        symptoms: "Kh√¥ng c√≥ tri·ªáu ch·ª©ng",
        notes: '"H√¥m nay l√† m·ªôt ng√†y b√¨nh th∆∞·ªùng, kh√¥ng c√≥ c·∫£m gi√°c th√®m thu·ªëc."',
      },
      {
        id: 2,
        day: savings.days - 1,
        date: "H√¥m qua",
        mood: "T·ªët",
        symptoms: "Kh√¥ng c√≥ tri·ªáu ch·ª©ng",
        notes:
          '"C·∫£m th·∫•y r·∫•t t·ª± h√†o v·ªÅ b·∫£n th√¢n, h√¥m nay t√¥i ƒë√£ t·ª´ ch·ªëi m·ªôt ƒëi·∫øu thu·ªëc t·ª´ ƒë·ªìng nghi·ªáp."',
      },
    ],
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t h√¥m nay
  const handleUpdateToday = (updateData) => {
    console.log("C·∫≠p nh·∫≠t m·ªõi:", updateData);
    alert("ƒê√£ l∆∞u c·∫≠p nh·∫≠t c·ªßa b·∫°n!");
  };
  // X·ª≠ l√Ω l∆∞u k·∫ø ho·∫°ch
  const handleSavePlan = (planData) => {
    console.log("D·ªØ li·ªáu k·∫ø ho·∫°ch m·ªõi:", planData);
    alert("ƒê√£ l∆∞u k·∫ø ho·∫°ch c·ªßa b·∫°n!");
  };

  return (
    <div className="profile-container">
      {/* Sidebar */}
      <div className="profile-sidebar">
        <div className="user-info">
          <div className="user-avatar">
            <span className="user-initial">NT</span>
          </div>          <div className="user-details">
            <h3>
              {userData.name}
              {userData.membershipType && userData.membershipType !== 'free' && (
                <span className={`membership-label ${userData.membershipType}`}>
                  {userData.membershipType === 'premium' ? 'Premium' : 'Pro'}
                </span>
              )}
            </h3>
            <p>ƒêang cai thu·ªëc: {userData.daysWithoutSmoking} ng√†y</p>
          </div>
<<<<<<< Updated upstream
        </div>        <nav className="profile-nav">
          <Link
            to="#"
            className={`nav-item ${activeTab === "profile" ? "active" : ""}`}
            onClick={() => setActiveTab("profile")}
          >
            <FaUserAlt /> H·ªì s∆° c√° nh√¢n
          </Link>
          
=======
        </div>

        <nav className="profile-nav">          <Link
          to="#"
          className={`nav-item ${activeTab === "profile" ? "active" : ""}`}
          onClick={() => setActiveTab("profile")}
        >
          <FaUserAlt /> H·ªì s∆° c√° nh√¢n
        </Link>

>>>>>>> Stashed changes
          <Link
            to="#"
            className={`nav-item ${activeTab === "appointments" ? "active" : ""}`}
            onClick={() => setActiveTab("appointments")}
          >
            <FaCalendarAlt /> L·ªãch h·∫πn Coach
          </Link>

          <Link
            to="#"
            className={`nav-item ${activeTab === "achievements" ? "active" : ""
              }`}
            onClick={() => setActiveTab("achievements")}
          >
            <FaTrophy /> Huy hi·ªáu
          </Link>
<<<<<<< Updated upstream
          
          
          
=======
          <Link
            to="#"
            className={`nav-item ${activeTab === "journal" ? "active" : ""}`}
            onClick={() => setActiveTab("journal")}
          >
            <FaComment /> T∆∞ v·∫•n
          </Link>
          <Link
            to="#"
            className={`nav-item ${activeTab === "settings" ? "active" : ""}`}
            onClick={() => setActiveTab("settings")}
          >
            <FaCog /> C√†i ƒë·∫∑t
          </Link>
          <Link to="/notifications" className="nav-item notification-nav-item">
            <FaBell /> Th√¥ng b√°o
            {notificationCount > 0 && <span className="notification-badge">{notificationCount}</span>}
          </Link>




>>>>>>> Stashed changes
          <button onClick={logout} className="nav-item logout-btn">
            <i className="fas fa-sign-out-alt"></i> ƒêƒÉng xu·∫•t
          </button>
        </nav>
      </div>

      {/* Main content */}
      <div className="profile-content">
        {activeTab === "profile" && (
          <div className="profile-overview">
            <div className="section-header">
              <h1>H·ªì s∆° c√° nh√¢n</h1>
              <button
                className="update-btn"
                onClick={() => setIsPlanEditOpen(true)}
              >
                C·∫≠p nh·∫≠t
              </button>
            </div>

            <div className="profile-sections">
              <div className="health-section">
                <h2>H·ªì s∆° s·ª©c kh·ªèe</h2>

                <div className="health-stats">
                  <div className="health-stat-row">
                    <div className="health-stat">
                      <h4>T√¨nh tr·∫°ng h√∫t thu·ªëc ban ƒë·∫ßu</h4>
                      <p>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {userData.daysWithoutSmoking} ng√†y tr∆∞·ªõc</p>
                    </div>
                  </div>

                  <div className="health-stat-row two-col">
                    <div className="health-stat-item">
                      <label>S·ªë ƒëi·∫øu m·ªói ng√†y</label>
                      <p>{userData.cigarettesPerDay} ƒëi·∫øu/ng√†y</p>
                    </div>

                    <div className="health-stat-item">
                      <label>Chi ph√≠ m·ªói ng√†y</label>
                      <p>{userData.costPerDay.toLocaleString()} ƒë/ng√†y</p>
                    </div>
                  </div>

                  <div className="health-stat-row two-col">
                    <div className="health-stat-item">
                      <label>Th·ªùi gian h√∫t thu·ªëc</label>
                      <p>{userData.yearsOfSmoking} nƒÉm</p>
                    </div>

                    <div className="health-stat-item">
                      <label>M·ª©c ƒë·ªô nghi·ªán</label>
                      <p>Cao (Fagerstrom: {userData.fagerstromScore})</p>
                    </div>
                  </div>
                </div>

                <div className="health-improvements">
                  <h3>C·∫£i thi·ªán s·ª©c kh·ªèe</h3>
                  <div className="improvements-list">
                    {userData.healthImprovements.map((improvement, index) => (
                      <div key={index} className="improvement-item">
                        <span className="improvement-time">{improvement.time}</span>
                        <span className="improvement-description">{improvement.description}</span>
                        {improvement.completed ? (
                          <FaCheckCircle className="completed-icon" />
                        ) : (
                          <span className="pending-icon">‚óã</span>
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>              <div className="plan-section">
                <h2>K·∫ø ho·∫°ch cai thu·ªëc</h2>                {/* Hi·ªÉn th·ªã k·∫ø ho·∫°ch cai thu·ªëc t·ª´ localStorage */}
                <QuitPlanDisplay />

                <div className="current-plan">
                  <h3>K·∫ø ho·∫°ch hi·ªán t·∫°i</h3>
                  <p className="plan-strategy">
                    Ph∆∞∆°ng ph√°p: Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i
                  </p>

                  <div className="plan-start-date">
                    <div className="date-label">
                      <FaCalendarAlt className="icon" />
                      <span>Ng√†y b·∫Øt ƒë·∫ßu cai thu·ªëc: {userData.startDate}</span>
                    </div>
                    <div className="plan-goal">
                      <strong>M·ª•c ti√™u:</strong> Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i
                    </div>
                  </div>

                  <div className="milestones">
                    {userData.milestones.map((milestone) => (
                      <div key={milestone.id} className="milestone-item">
                        <div className="milestone-status">
                          {milestone.completed ? (
                            <div className="status-circle completed">
                              <FaCheckCircle />
                            </div>
                          ) : (
                            <div className="status-circle in-progress"></div>
                          )}
                        </div>
                        <div className="milestone-info">
                          <h4>{milestone.name}</h4>
                          <p>
                            {milestone.completed
                              ? `Ho√†n th√†nh: ${milestone.date}`
                              : `ƒêang ti·∫øn h√†nh: ${milestone.progress}`}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>

                  <button
                    className="edit-plan-btn"
                    onClick={() => setIsPlanEditOpen(true)}
                  >
                    ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}        {activeTab === "membership" && (
          <div className="membership-section">
            <h1>Th√¥ng tin Th√†nh vi√™n</h1>

            <div className="membership-status">
              <div className="card membership-status-card">
                <h2>Tr·∫°ng th√°i th√†nh vi√™n</h2>
                <div className="membership-status-info">
                  {userData.membershipType && userData.membershipType !== 'free' ? (
                    <div className="current-membership">
                      <div className="membership-badge-large">
                        <FaCrown className={userData.membershipType === "premium" ? "premium-icon" : "pro-icon"} />
                        <span className={`membership-type ${userData.membershipType}`}>
                          {userData.membershipType === "premium" ? "Premium" : "Pro"}
                        </span>
                      </div>
                      <p className="membership-description">
                        {userData.membershipType === "premium" 
                          ? "B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Premium v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng h·ªó tr·ª£." 
                          : "B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Pro v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng h√†ng nƒÉm."}
                      </p>
                    </div>
                  ) : (
                    <div className="free-membership">
                      <p>B·∫°n ƒëang s·ª≠ d·ª•ng g√≥i Mi·ªÖn ph√≠</p>
                      <button className="upgrade-btn" onClick={() => navigate('/membership')}>
                        N√¢ng c·∫•p ngay
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div className="membership-features">
              <h2>T√≠nh nƒÉng c·ªßa b·∫°n</h2>
              <div className="feature-list">
                <div className="feature-item">
                  <FaCheck className="feature-check" />
                  <div className="feature-text">
                    <h3>Theo d√µi cai thu·ªëc</h3>
                    <p>Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n h√†ng ng√†y</p>
                  </div>
                </div>
                <div className="feature-item">
                  <FaCheck className="feature-check" />
                  <div className="feature-text">
                    <h3>L·∫≠p k·∫ø ho·∫°ch c√° nh√¢n</h3>
                    <p>T·∫°o k·∫ø ho·∫°ch cai thu·ªëc ph√π h·ª£p v·ªõi b·∫°n</p>
                  </div>
                </div>
                
                {userData.membershipType && userData.membershipType !== 'free' ? (
                  <>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Huy hi·ªáu & c·ªông ƒë·ªìng</h3>
                        <p>Tham gia c·ªông ƒë·ªìng v√† nh·∫≠n huy hi·ªáu</p>
                      </div>
                    </div>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Chat hu·∫•n luy·ªán vi√™n</h3>
                        <p>Nh·∫≠n t∆∞ v·∫•n t·ª´ hu·∫•n luy·ªán vi√™n chuy√™n nghi·ªáp</p>
                      </div>
                    </div>
                    <div className="feature-item">
                      <FaCheck className="feature-check" />
                      <div className="feature-text">
                        <h3>Video call t∆∞ v·∫•n</h3>
                        <p>Tham gia c√°c bu·ªïi t∆∞ v·∫•n qua video</p>
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Huy hi·ªáu & c·ªông ƒë·ªìng</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Chat hu·∫•n luy·ªán vi√™n</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                    <div className="feature-item disabled">
                      <FaTimes className="feature-times" />
                      <div className="feature-text">
                        <h3>Video call t∆∞ v·∫•n</h3>
                        <p>N√¢ng c·∫•p ƒë·ªÉ m·ªü kh√≥a t√≠nh nƒÉng n√†y</p>
                      </div>
                    </div>
                  </>
                )}
              </div>
              
              {!userData.membershipType || userData.membershipType === 'free' ? (
                <div className="membership-upgrade">
                  <h3>N√¢ng c·∫•p ƒë·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng</h3>
                  <button className="upgrade-btn-large" onClick={() => navigate('/membership')}>
                    Kh√°m ph√° g√≥i th√†nh vi√™n
                  </button>
                </div>
              ) : null}
            </div>
          </div>
        )}

        {activeTab === "achievements" && (
          <div className="achievements-section">
            <h1>Huy hi·ªáu ƒë√£ ƒë·∫°t</h1>

            <div className="achievements-grid">
              {userData.achievements.map((achievement) => (
                <div
                  key={achievement.id}
                  className={`achievement-card ${!achievement.date ? "locked" : ""
                    }`}
                >
                  <div className="achievement-icon">{achievement.icon}</div>
                  <h3>{achievement.name}</h3>
                  <p>{achievement.date || "ƒê·∫°t khi ƒë·ªß ƒëi·ªÅu ki·ªán"}</p>
                </div>
              ))}
            </div>

            <h2>Xem t·∫•t c·∫£ huy hi·ªáu</h2>
          </div>
        )}

        {activeTab === "appointments" && (
          <div className="appointments-section">
            <h1>L·ªãch h·∫πn Coach</h1>
            <AppointmentList />
          </div>
        )}

        {activeTab === "journal" && (
          <div className="journal-section">
            <h1>C·∫≠p nh·∫≠t h√†ng ng√†y</h1>

            <DailyUpdate
              onSubmit={(data) => {
                console.log("D·ªØ li·ªáu c·∫≠p nh·∫≠t:", data);
                alert("ƒê√£ l∆∞u c·∫≠p nh·∫≠t c·ªßa b·∫°n!");
              }}
            />

            <div className="journal-history">
              <h2>L·ªãch s·ª≠ ti·∫øn tr√¨nh</h2>
              <div className="view-toggle">
                <button className="toggle-btn active">T·∫•t c·∫£</button>
                <button className="toggle-btn">Ng√†y t·ªët</button>
                <button className="toggle-btn">Ng√†y kh√≥ khƒÉn</button>
              </div>

              <div className="timeline-entries">
                {userData.journalEntries.map((entry) => (
                  <div key={entry.id} className="timeline-entry">
                    <div className="entry-header">
                      <div className="entry-day">
                        <span className="day-number">Ng√†y {entry.day}</span>
                        <span className="date">{entry.date}</span>
                      </div>
                      <div className="mood-indicator">
                        {entry.mood === "T·ªët" && (
                          <span className="mood-emoji">üòÉ</span>
                        )}
                        {entry.mood === "B√¨nh th∆∞·ªùng" && (
                          <span className="mood-emoji">üòê</span>
                        )}
                        {entry.mood === "Kh√¥ng t·ªët" && (
                          <span className="mood-emoji">üòî</span>
                        )}
                      </div>
                    </div>
                    <div className="entry-details">
                      <div className="detail-row">
                        <span className="detail-label">T√¢m tr·∫°ng:</span>
                        <span className="detail-value">{entry.mood}</span>
                      </div>
                      <div className="detail-row">
                        <span className="detail-label">Tri·ªáu ch·ª©ng:</span>
                        <span className="detail-value">{entry.symptoms}</span>
                      </div>
                      <div className="entry-note">{entry.notes}</div>
                    </div>
                  </div>
                ))}
              </div>

              <button className="view-all-button">Xem t·∫•t c·∫£</button>
            </div>
          </div>
        )}

        {/* Modal ch·ªânh s·ª≠a k·∫ø ho·∫°ch */}
        <PlanEditModal
          isOpen={isPlanEditOpen}
          onClose={() => setIsPlanEditOpen(false)}
          currentPlan={{
            strategy: userData.planStrategy,
            startDate: userData.startDate,
            goal: userData.planGoal,
          }}
          onSave={handleSavePlan}
        />
      </div>
    </div>
  );
}
