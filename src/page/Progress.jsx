import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import QuitProgressChart from '../components/QuitProgressChart';
import DailyCheckin from '../components/DailyCheckin';
import MoodTracking from '../components/MoodTracking';
import ProgressDashboard from '../components/ProgressDashboard';
import ResetCheckinData from '../components/ResetCheckinData';
import './Progress.css';
import '../styles/DailyCheckin.css';
import '../styles/MoodTracking.css';
import '../styles/ProgressDashboard.css';
import '../styles/ProgressStats.css';

export default function Progress() {
  const { user } = useAuth();
  const [activeTimeFilter, setActiveTimeFilter] = useState('30 ng√†y');
  const [showCompletionDashboard, setShowCompletionDashboard] = useState(false);
  const [completionData, setCompletionData] = useState(null);
  const [userPlan, setUserPlan] = useState(null);
  const [actualProgress, setActualProgress] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Load user plan and progress on component mount
  useEffect(() => {
    loadUserPlanAndProgress();
  }, []);

  const loadUserPlanAndProgress = () => {
    console.log('üîç Loading user plan and progress...');
    setIsLoading(true);

    try {
      // L·∫•y k·∫ø ho·∫°ch hi·ªán t·∫°i t·ª´ localStorage
      const currentPlan = getCurrentActivePlan();
      console.log('üìã Current plan:', currentPlan);

      if (currentPlan) {
        setUserPlan(currentPlan);
        setShowCompletionDashboard(false);

        // Load progress data
        loadActualProgressFromCheckins();
      } else {
        console.warn('No active plan found, creating default plan');
        const defaultPlan = createDefaultPlan();
        setUserPlan(defaultPlan);
        saveActivePlan(defaultPlan);
      }
    } catch (error) {
      console.error('Error loading plan:', error);
      const defaultPlan = createDefaultPlan();
      setUserPlan(defaultPlan);
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrentActivePlan = () => {
    // ∆Øu ti√™n journeyStepperData n·∫øu c√≥
    try {
      const journeyData = localStorage.getItem('journeyStepperData');
      if (journeyData) {
        const parsed = JSON.parse(journeyData);
        if (parsed && parsed.selectedPlan) {
          return {
            id: Date.now(), // Unique ID for plan
            name: parsed.selectedPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
            startDate: parsed.startDate || new Date().toISOString().split('T')[0],
            weeks: parsed.selectedPlan.weeks || [],
            initialCigarettes: parsed.selectedPlan.initialCigarettes || 20,
            cigarettePrice: 3000 // VND per cigarette
          };
        }
      }

      // Fallback to activePlan
      const activePlan = localStorage.getItem('activePlan');
      if (activePlan) {
        const parsed = JSON.parse(activePlan);
        if (parsed && typeof parsed === 'object') {
          return {
            id: parsed.id || Date.now(),
            name: parsed.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
            startDate: parsed.startDate || new Date().toISOString().split('T')[0],
            weeks: parsed.weeks || [],
            initialCigarettes: parsed.initialCigarettes || 20,
            cigarettePrice: 3000
          };
        }
      }
    } catch (error) {
      console.error('Error parsing saved plan:', error);
    }

    return null;
  };

  const createDefaultPlan = () => {
    return {
      id: Date.now(),
      name: "K·∫ø ho·∫°ch 6 tu·∫ßn",
      startDate: new Date().toISOString().split('T')[0],
      weeks: [
        { week: 1, amount: 20, phase: "Th√≠ch nghi" },
        { week: 2, amount: 16, phase: "Th√≠ch nghi" },
        { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
        { week: 4, amount: 8, phase: "TƒÉng t·ªëc" },        { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
        { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
        { week: 7, amount: 0, phase: "M·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c" }
      ],
      initialCigarettes: 20,
      cigarettePrice: 3000
    };
  };

  const saveActivePlan = (plan) => {
    try {
      localStorage.setItem('activePlan', JSON.stringify(plan));
    } catch (error) {
      console.error('Error saving active plan:', error);
    }
  }; const generateFakeData = () => {
    const fakeData = [];
    const today = new Date();

    // T·∫°o fake data cho 14 ng√†y g·∫ßn nh·∫•t
    for (let i = 13; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      // T√≠nh target theo tu·∫ßn (gi·∫£m d·∫ßn theo k·∫ø ho·∫°ch)
      const dayFromStart = 13 - i + 1;
      const weekNumber = Math.ceil(dayFromStart / 7);
      const targetCigs = Math.max(0, 20 - (weekNumber - 1) * 3);

      // Actual cigarettes - c√≥ xu h∆∞·ªõng gi·∫£m nh∆∞ng c√≥ bi·∫øn ƒë·ªông
      const actualCigs = Math.max(0, targetCigs - Math.floor(Math.random() * 5) + Math.floor(Math.random() * 3));

      // Random mood
      const moods = ['excellent', 'good', 'okay', 'struggling'];
      const mood = moods[Math.floor(Math.random() * moods.length)];

      fakeData.push({
        date: dateStr,
        actualCigarettes: actualCigs,
        targetCigarettes: targetCigs,
        mood: mood,
        achievements: actualCigs <= targetCigs ? ['ƒê·∫°t m·ª•c ti√™u'] : [],
        challenges: actualCigs > targetCigs ? ['V∆∞·ª£t qu√° m·ª•c ti√™u'] : []
      });

      // L∆∞u v√†o localStorage ƒë·ªÉ gi·∫£ l·∫≠p data th·∫≠t
      const checkinData = {
        actualCigarettes: actualCigs,
        targetCigarettes: targetCigs,
        mood: mood,
        achievements: actualCigs <= targetCigs ? ['ƒê·∫°t m·ª•c ti√™u'] : [],
        challenges: actualCigs > targetCigs ? ['V∆∞·ª£t qu√° m·ª•c ti√™u'] : []
      };
      localStorage.setItem(`checkin_${dateStr}`, JSON.stringify(checkinData));
    }

    return fakeData;
  };
  const loadActualProgressFromCheckins = () => {
    console.log('üìä Loading actual progress from checkins...');

    // Ki·ªÉm tra xem ƒë√£ c√≥ fake data ch∆∞a
    const hasFakeData = localStorage.getItem('fakeDataGenerated');

    if (!hasFakeData) {
      // T·∫°o fake data l·∫ßn ƒë·∫ßu
      console.log('üé≤ No fake data found, generating new fake data...');
      const fakeData = generateFakeData();
      localStorage.setItem('fakeDataGenerated', 'true');
      setActualProgress([...fakeData]);
      return;
    }

    const actualData = [];
    const today = new Date();

    // Duy·ªát qua 30 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t√¨m d·ªØ li·ªáu check-in
    for (let i = 29; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      const checkinData = localStorage.getItem(`checkin_${dateStr}`);
      if (checkinData) {
        try {
          const data = JSON.parse(checkinData);
          actualData.push({
            date: dateStr,
            actualCigarettes: data.actualCigarettes,
            targetCigarettes: data.targetCigarettes,
            mood: data.mood,
            achievements: data.achievements || [],
            challenges: data.challenges || []
          });
        } catch (error) {
          console.error('Error parsing checkin data for', dateStr, error);
        }
      }
    }

    console.log('üìä Loaded actualData:', actualData);
    setActualProgress([...actualData]);
  };
  // X·ª≠ l√Ω c·∫≠p nh·∫≠t ti·∫øn tr√¨nh t·ª´ Daily Checkin
  const handleProgressUpdate = async (newProgress) => {
    console.log('üîÑ Progress updated:', newProgress);

    // Load l·∫°i actual progress t·ª´ localStorage ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    const actualData = [];
    const today = new Date();

    // Duy·ªát qua 30 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t√¨m d·ªØ li·ªáu check-in
    for (let i = 29; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      const checkinData = localStorage.getItem(`checkin_${dateStr}`);
      if (checkinData) {
        const data = JSON.parse(checkinData);
        actualData.push({
          date: dateStr,
          actualCigarettes: data.actualCigarettes,
          targetCigarettes: data.targetCigarettes,
          mood: data.mood,
          achievements: data.achievements || [],
          challenges: data.challenges || []
        });
      }
    }

    console.log('üìä Updated actualData:', actualData);

    // C·∫≠p nh·∫≠t state v·ªõi m·∫£ng m·ªõi ƒë·ªÉ trigger re-render c·ªßa bi·ªÉu ƒë·ªì
    // S·ª≠ d·ª•ng spread operator ƒë·ªÉ t·∫°o reference m·ªõi
    setActualProgress([...actualData]);
  };// X·ª≠ l√Ω c·∫≠p nh·∫≠t t√¢m tr·∫°ng t·ª´ Mood Tracking
  const handleMoodUpdate = (newMoodData) => {
    console.log('Mood updated:', newMoodData);
    // C√≥ th·ªÉ th√™m logic c·∫≠p nh·∫≠t mood data ·ªü ƒë√¢y n·∫øu c·∫ßn
  };
  // Generate new fake data
  const generateNewFakeData = () => {
    console.log('üé≤ Generating new fake data...');
    localStorage.removeItem('fakeDataGenerated');
    const fakeData = generateFakeData();
    localStorage.setItem('fakeDataGenerated', 'true');
    console.log('üìä New fake data generated:', fakeData);
    // S·ª≠ d·ª•ng spread operator ƒë·ªÉ t·∫°o reference m·ªõi
    setActualProgress([...fakeData]);
  };
  // Clear all data
  const clearAllData = () => {
    console.log('üóëÔ∏è Clearing all data...');
    localStorage.removeItem('fakeDataGenerated');
    // Clear all checkin data
    const today = new Date();
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];
      localStorage.removeItem(`checkin_${dateStr}`);
    }
    // ƒê·∫∑t v·ªÅ m·∫£ng r·ªóng v·ªõi reference m·ªõi
    setActualProgress([]);
  };
  if (isLoading) {
    return (
      <div className="progress-container">
        <div style={{ textAlign: 'center', padding: '2rem' }}>
          <p>‚è≥ ƒêang t·∫£i k·∫ø ho·∫°ch c·ªßa b·∫°n...</p>
        </div>
      </div>
    );
  }

  if (!userPlan) {
    return (
      <div className="progress-container">
        <div style={{ textAlign: 'center', padding: '2rem' }}>
          <p>‚ùå Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch cai thu·ªëc!</p>
          <button onClick={() => {
            console.log('Forcing reload...');
            loadUserPlanAndProgress();
          }}>
            üîÑ T·∫£i l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="progress-container">      <h1 className="page-title">
        {showCompletionDashboard ? 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ l·∫≠p k·∫ø ho·∫°ch cai thu·ªëc' : 'Ti·∫øn tr√¨nh cai thu·ªëc hi·ªán t·∫°i'}
      </h1>        {/* Daily Checkin Section - Lu√¥n hi·ªÉn th·ªã ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p s·ªë ƒëi·∫øu ƒë√£ h√∫t */}
      <DailyCheckin 
        onProgressUpdate={handleProgressUpdate}
        currentPlan={userPlan || {
          name: "K·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh",
          startDate: new Date().toISOString().split('T')[0],
          weeks: [
            { week: 1, amount: 20, phase: "Th√≠ch nghi" },
            { week: 2, amount: 16, phase: "Th√≠ch nghi" },
            { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
            { week: 4, amount: 8, phase: "TƒÉng t·ªëc" },
            { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
            { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
            { week: 7, amount: 0, phase: "M·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c" }
          ],
          initialCigarettes: 20
        }}
      />

      {/* Show completion dashboard if plan is completed */}
      {showCompletionDashboard && completionData ? (
        <ProgressDashboard
          userPlan={completionData.userPlan}
          completionDate={completionData.completionDate}
        />
      ) : (
        <>
          {/* Enhanced Progress Chart with Chart.js */}
          <QuitProgressChart 
            userPlan={userPlan}
            actualProgress={actualProgress}
            timeFilter={activeTimeFilter}
            height={350}
          />

          {/* Debug Controls for Fake Data */}
          <div className="debug-controls" style={{
            background: 'rgba(255, 215, 0, 0.1)',
            border: '1px solid rgba(255, 215, 0, 0.3)',
            borderRadius: '8px',
            padding: '16px',
            margin: '20px 0'
          }}>
            <h3 style={{ margin: '0 0 12px 0', color: '#ff6b35' }}>üîß Debug Controls</h3>
            <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
              <button
                onClick={generateNewFakeData}
                style={{
                  background: '#28a745',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '14px'
                }}
              >
                üé≤ T·∫°o Fake Data M·ªõi
              </button>
              <button
                onClick={clearAllData}
                style={{
                  background: '#dc3545',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '14px'
                }}
              >
                üóëÔ∏è X√≥a T·∫•t C·∫£ Data
              </button>
              <span style={{
                alignSelf: 'center',
                fontSize: '14px',
                color: '#666',
                fontStyle: 'italic'
              }}>
                Data points: {actualProgress.length}
              </span>
            </div>
          </div>

          {/* Time Filter Controls */}
          <div className="time-filters">
            <button
              className={`time-filter ${activeTimeFilter === '7 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('7 ng√†y')}
            >
              7 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === '14 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('14 ng√†y')}
            >
              14 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === '30 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('30 ng√†y')}
            >
              30 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === 'T·∫•t c·∫£' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('T·∫•t c·∫£')}
            >
              T·∫•t c·∫£
            </button>
          </div>

          {/* Plan Information */}
          <div className="plan-info-section">
            <h2>üìã K·∫ø ho·∫°ch hi·ªán t·∫°i: {userPlan?.name || 'K·∫ø ho·∫°ch kh√¥ng t√™n'}</h2>
            <div className="plan-summary">
              <div className="summary-item">
                <span className="label">‚è±Ô∏è Th·ªùi gian:</span>
                <span className="value">{userPlan?.weeks?.length || 0} tu·∫ßn</span>
              </div>
              <div className="summary-item">
                <span className="label">üéØ M·ª•c ti√™u cu·ªëi:</span>
                <span className="value">0 ƒëi·∫øu/ng√†y</span>
              </div>
              <div className="summary-item">
                <span className="label">üö¨ B·∫Øt ƒë·∫ßu t·ª´:</span>
                <span className="value">{userPlan?.initialCigarettes || userPlan?.weeks?.[0]?.amount || 20} ƒëi·∫øu/ng√†y</span>
              </div>
              <div className="summary-item">
                <span className="label">üìÖ Ng√†y b·∫Øt ƒë·∫ßu:</span>
                <span className="value">{userPlan?.startDate ? new Date(userPlan.startDate).toLocaleDateString('vi-VN') : 'H√¥m nay'}</span>
              </div>
            </div>
          </div>          {/* Progress Statistics */}
          {actualProgress.length > 0 && (
            <div className="progress-stats">
              <h2>Th·ªëng k√™ ti·∫øn tr√¨nh</h2>
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-value">{actualProgress.length}</div>
                  <div className="stat-label">Ng√†y ƒë√£ check-in</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {actualProgress.filter(p => p.actualCigarettes <= p.targetCigarettes).length}
                  </div>
                  <div className="stat-label">Ng√†y ƒë·∫°t m·ª•c ti√™u</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {actualProgress.length > 0 ? 
                      Math.round(actualProgress.reduce((sum, p) => sum + p.actualCigarettes, 0) / actualProgress.length) 
                      : (userPlan.initialCigarettes || (userPlan.weeks && userPlan.weeks[0]?.amount) || 20)}
                  </div>
                  <div className="stat-label">Trung b√¨nh ƒëi·∫øu/ng√†y</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {Math.round((actualProgress.filter(p => p.actualCigarettes <= p.targetCigarettes).length / actualProgress.length) * 100)}%
                  </div>
                  <div className="stat-label">T·ª∑ l·ªá th√†nh c√¥ng</div>
                </div>
              </div>
              
              {/* C√¥ng c·ª• Reset d·ªØ li·ªáu */}
              <ResetCheckinData />
            </div>
          )}
        </>
      )}
    </div>
  );
}