import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import QuitProgressChart from '../components/QuitProgressChart';
import DailyCheckin from '../components/DailyCheckin';
import MoodTracking from '../components/MoodTracking';
import ProgressDashboard from '../components/ProgressDashboard';
import './Progress.css';
import '../styles/DailyCheckin.css';
import '../styles/MoodTracking.css';
import '../styles/ProgressDashboard.css';
import '../styles/ProgressStats.css';

export default function Progress() {
  const { user } = useAuth();
  const [activeTimeFilter, setActiveTimeFilter] = useState('30 ng√†y');
  const [showCompletionDashboard, setShowCompletionDashboard] = useState(false);
  const [completionData, setCompletionData] = useState(null);
  const [userPlan, setUserPlan] = useState(null);
  const [actualProgress, setActualProgress] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // Load user plan and progress on component mount
  useEffect(() => {
    loadUserPlanAndProgress();
  }, []);

  const loadUserPlanAndProgress = () => {
    console.log('üîç Loading user plan and progress...');
    setIsLoading(true);

    try {
      // L·∫•y k·∫ø ho·∫°ch hi·ªán t·∫°i t·ª´ localStorage
      const currentPlan = getCurrentActivePlan();
      console.log('üìã Current plan:', currentPlan);

      if (currentPlan) {
        setUserPlan(currentPlan);
        setShowCompletionDashboard(false);

        // Load progress data
        loadActualProgressFromCheckins();
      } else {
        console.warn('No active plan found, creating default plan');
        const defaultPlan = createDefaultPlan();
        setUserPlan(defaultPlan);
        saveActivePlan(defaultPlan);
      }
    } catch (error) {
      console.error('Error loading plan:', error);
      const defaultPlan = createDefaultPlan();
      setUserPlan(defaultPlan);
    } finally {
      setIsLoading(false);
    }
  };

  const getCurrentActivePlan = () => {
    // ∆Øu ti√™n journeyStepperData n·∫øu c√≥
    try {
      const journeyData = localStorage.getItem('journeyStepperData');
      if (journeyData) {
        const parsed = JSON.parse(journeyData);
        if (parsed && parsed.selectedPlan) {
          return {
            id: Date.now(), // Unique ID for plan
            name: parsed.selectedPlan.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
            startDate: parsed.startDate || new Date().toISOString().split('T')[0],
            weeks: parsed.selectedPlan.weeks || [],
            initialCigarettes: parsed.selectedPlan.initialCigarettes || 20,
            cigarettePrice: 3000 // VND per cigarette
          };
        }
      }

      // Fallback to activePlan
      const activePlan = localStorage.getItem('activePlan');
      if (activePlan) {
        const parsed = JSON.parse(activePlan);
        if (parsed && typeof parsed === 'object') {
          return {
            id: parsed.id || Date.now(),
            name: parsed.name || 'K·∫ø ho·∫°ch c√° nh√¢n',
            startDate: parsed.startDate || new Date().toISOString().split('T')[0],
            weeks: parsed.weeks || [],
            initialCigarettes: parsed.initialCigarettes || 20,
            cigarettePrice: 3000
          };
        }
      }
    } catch (error) {
      console.error('Error parsing saved plan:', error);
    }

    return null;
  };

  const createDefaultPlan = () => {
    return {
      id: Date.now(),
      name: "K·∫ø ho·∫°ch 6 tu·∫ßn",
      startDate: new Date().toISOString().split('T')[0],
      weeks: [
        { week: 1, amount: 20, phase: "Th√≠ch nghi" },
        { week: 2, amount: 16, phase: "Th√≠ch nghi" },
        { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
        { week: 4, amount: 8, phase: "TƒÉng t·ªëc" }, { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
        { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
        { week: 7, amount: 0, phase: "M·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c" }
      ],
      initialCigarettes: 20,
      cigarettePrice: 3000
    };
  };

  const saveActivePlan = (plan) => {
    try {
      localStorage.setItem('activePlan', JSON.stringify(plan));
    } catch (error) {
      console.error('Error saving active plan:', error);
    }
  }; const generateFakeData = () => {
    const fakeData = [];
    const today = new Date();

    // T·∫°o fake data cho 14 ng√†y g·∫ßn nh·∫•t
    for (let i = 13; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      // T√≠nh target theo tu·∫ßn (gi·∫£m d·∫ßn theo k·∫ø ho·∫°ch)
      const dayFromStart = 13 - i + 1;
      const weekNumber = Math.ceil(dayFromStart / 7);
      const targetCigs = Math.max(0, 20 - (weekNumber - 1) * 3);

      // Actual cigarettes - c√≥ xu h∆∞·ªõng gi·∫£m nh∆∞ng c√≥ bi·∫øn ƒë·ªông
      const actualCigs = Math.max(0, targetCigs - Math.floor(Math.random() * 5) + Math.floor(Math.random() * 3));

      // Random mood
      const moods = ['excellent', 'good', 'okay', 'struggling'];
      const mood = moods[Math.floor(Math.random() * moods.length)];

      fakeData.push({
        date: dateStr,
        actualCigarettes: actualCigs,
        targetCigarettes: targetCigs,
        mood: mood,
        achievements: actualCigs <= targetCigs ? ['ƒê·∫°t m·ª•c ti√™u'] : [],
        challenges: actualCigs > targetCigs ? ['V∆∞·ª£t qu√° m·ª•c ti√™u'] : []
      });

      // L∆∞u v√†o localStorage ƒë·ªÉ gi·∫£ l·∫≠p data th·∫≠t
      const checkinData = {
        actualCigarettes: actualCigs,
        targetCigarettes: targetCigs,
        mood: mood,
        achievements: actualCigs <= targetCigs ? ['ƒê·∫°t m·ª•c ti√™u'] : [],
        challenges: actualCigs > targetCigs ? ['V∆∞·ª£t qu√° m·ª•c ti√™u'] : []
      };
      localStorage.setItem(`checkin_${dateStr}`, JSON.stringify(checkinData));
    }

    return fakeData;
  };
  const loadActualProgressFromCheckins = () => {
    console.log('üìä Loading actual progress from checkins...');

    // Ki·ªÉm tra xem ƒë√£ c√≥ fake data ch∆∞a
    const hasFakeData = localStorage.getItem('fakeDataGenerated');

    if (!hasFakeData) {
      // T·∫°o fake data l·∫ßn ƒë·∫ßu
      console.log('üé≤ No fake data found, generating new fake data...');
      const fakeData = generateFakeData();
      localStorage.setItem('fakeDataGenerated', 'true');
      setActualProgress([...fakeData]);
      return;
    }

    const actualData = [];
    const today = new Date();

    // Duy·ªát qua 30 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t√¨m d·ªØ li·ªáu check-in
    for (let i = 29; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      const checkinData = localStorage.getItem(`checkin_${dateStr}`);
      if (checkinData) {
        try {
          const data = JSON.parse(checkinData);
          actualData.push({
            date: dateStr,
            actualCigarettes: data.actualCigarettes,
            targetCigarettes: data.targetCigarettes,
            mood: data.mood,
            achievements: data.achievements || [],
            challenges: data.challenges || []
          });
        } catch (error) {
          console.error('Error parsing checkin data for', dateStr, error);
        }
      }
    }

    console.log('üìä Loaded actualData:', actualData);
    setActualProgress([...actualData]);
  };
  // X·ª≠ l√Ω c·∫≠p nh·∫≠t ti·∫øn tr√¨nh t·ª´ Daily Checkin
  const handleProgressUpdate = async (newProgress) => {
    console.log('üîÑ Progress updated:', newProgress);

    // Load l·∫°i actual progress t·ª´ localStorage ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    const actualData = [];
    const today = new Date();

    // Duy·ªát qua 30 ng√†y g·∫ßn nh·∫•t ƒë·ªÉ t√¨m d·ªØ li·ªáu check-in
    for (let i = 29; i >= 0; i--) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];

      const checkinData = localStorage.getItem(`checkin_${dateStr}`);
      if (checkinData) {
        const data = JSON.parse(checkinData);
        actualData.push({
          date: dateStr,
          actualCigarettes: data.actualCigarettes,
          targetCigarettes: data.targetCigarettes,
          mood: data.mood,
          achievements: data.achievements || [],
          challenges: data.challenges || []
        });
      }
    }

    console.log('üìä Updated actualData:', actualData);

    // C·∫≠p nh·∫≠t state v·ªõi m·∫£ng m·ªõi ƒë·ªÉ trigger re-render c·ªßa bi·ªÉu ƒë·ªì
    // S·ª≠ d·ª•ng spread operator ƒë·ªÉ t·∫°o reference m·ªõi
    setActualProgress([...actualData]);
  };// X·ª≠ l√Ω c·∫≠p nh·∫≠t t√¢m tr·∫°ng t·ª´ Mood Tracking
  const handleMoodUpdate = (newMoodData) => {
    console.log('Mood updated:', newMoodData);
    // C√≥ th·ªÉ th√™m logic c·∫≠p nh·∫≠t mood data ·ªü ƒë√¢y n·∫øu c·∫ßn
  };
  // Generate new fake data
  const generateNewFakeData = () => {
    console.log('üé≤ Generating new fake data...');
    localStorage.removeItem('fakeDataGenerated');
    const fakeData = generateFakeData();
    localStorage.setItem('fakeDataGenerated', 'true');
    console.log('üìä New fake data generated:', fakeData);
    // S·ª≠ d·ª•ng spread operator ƒë·ªÉ t·∫°o reference m·ªõi
    setActualProgress([...fakeData]);
  };
  // Clear all data
  const clearAllData = () => {
    console.log('üóëÔ∏è Clearing all data...');
    localStorage.removeItem('fakeDataGenerated');
    // Clear all checkin data
    const today = new Date();
    for (let i = 0; i < 30; i++) {
      const date = new Date(today);
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];
      localStorage.removeItem(`checkin_${dateStr}`);
    }
  }, []);
  
  // Recalculate statistics whenever actualProgress changes
  useEffect(() => {
    console.log("actualProgress changed, recalculating statistics...");
    // Recalculate even if there's no data, to reset stats if needed
    recalculateStatistics();
  }, [actualProgress]);
  
  // Kh√¥ng chuy·ªÉn h∆∞·ªõng t·ª± ƒë·ªông, ch·ªâ hi·ªÉn th·ªã n√∫t cho ng∆∞·ªùi d√πng
  useEffect(() => {
    if (userPlan) {
      // Ch·ªâ ki·ªÉm tra xem c√≥ k·∫ø ho·∫°ch v√† c·∫≠p nh·∫≠t state
      const hasValidPlan = userPlan && Array.isArray(userPlan.weeks) && userPlan.weeks.length > 0;
      console.log("ƒê√£ ki·ªÉm tra k·∫ø ho·∫°ch:", hasValidPlan ? "C√≥ k·∫ø ho·∫°ch" : "Kh√¥ng c√≥ k·∫ø ho·∫°ch");
    }
  }, [userPlan]);
    // T√≠nh to√°n l·∫°i t·∫•t c·∫£ c√°c th·ªëng k√™ v√† c·∫≠p nh·∫≠t state
  const recalculateStatistics = () => {
    console.log("======= B·∫ÆT ƒê·∫¶U T√çNH TO√ÅN TH·ªêNG K√ä M·ªöI =======");
    
    // T√≠nh s·ªë ng√†y theo d√µi - CH·ªà t√≠nh c√°c ng√†y c√≥ th·ª±c s·ª± checkin
    let noSmokingDays = 0;
    let planStartDate = null;
    
    // L·∫•y ng√†y b·∫Øt ƒë·∫ßu t·ª´ activePlan
    try {
      const activePlanData = localStorage.getItem('activePlan');
      if (activePlanData) {
        const activePlan = JSON.parse(activePlanData);
        if (activePlan && activePlan.startDate) {
          planStartDate = new Date(activePlan.startDate);
          console.log(`Ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch: ${activePlan.startDate}`);
        }
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch:', error);
    }
    
    // T√≠nh s·ªë ng√†y theo d√µi d·ª±a tr√™n d·ªØ li·ªáu checkin th·ª±c t·∫ø
    if (actualProgress.length > 0) {
      // S·ªë ng√†y theo d√µi = s·ªë ng√†y c√≥ checkin th·ª±c t·∫ø
      noSmokingDays = actualProgress.length;
      console.log(`Ng√†y theo d√µi: ${noSmokingDays} ng√†y (d·ª±a tr√™n s·ªë ng√†y c√≥ checkin th·ª±c t·∫ø)`);
    } else if (planStartDate) {
      // N·∫øu ch∆∞a c√≥ checkin nh∆∞ng c√≥ k·∫ø ho·∫°ch, t√≠nh t·ª´ ng√†y b·∫Øt ƒë·∫ßu
      const today = new Date();
      const daysDiff = Math.floor((today - planStartDate) / (1000 * 60 * 60 * 24));
      noSmokingDays = Math.max(0, daysDiff); // Kh√¥ng +1 v√¨ ch∆∞a c√≥ checkin
      console.log(`Ng√†y theo d√µi: ${noSmokingDays} ng√†y (d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu k·∫ø ho·∫°ch, ch∆∞a c√≥ checkin)`);
    } else {
      noSmokingDays = 0;
      console.log(`Ng√†y theo d√µi: 0 ng√†y (ch∆∞a c√≥ k·∫ø ho·∫°ch v√† ch∆∞a c√≥ checkin)`);
    }
    
    // Hi·ªÉn th·ªã t·∫•t c·∫£ d·ªØ li·ªáu check-in hi·ªán c√≥
    console.log("D·ªØ li·ªáu check-in hi·ªán c√≥:", actualProgress);
    
    // L·∫•y s·ªë ƒëi·∫øu ban ƒë·∫ßu ch√≠nh x√°c t·ª´ k·∫ø ho·∫°ch v√† activePlan
    let initialCigarettesPerDay = 0;
    
    // ∆Øu ti√™n l·∫•y t·ª´ activePlan v√¨ ƒë√≥ l√† n∆°i l∆∞u gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p
    try {
      const activePlanData = localStorage.getItem('activePlan');
      if (activePlanData) {
        const activePlan = JSON.parse(activePlanData);
        if (activePlan && activePlan.initialCigarettes) {
          initialCigarettesPerDay = activePlan.initialCigarettes;
          console.log(`L·∫•y s·ªë ƒëi·∫øu ban ƒë·∫ßu t·ª´ activePlan: ${initialCigarettesPerDay}`);
        }
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc initialCigarettes t·ª´ activePlan:', error);
    }
    
    // N·∫øu kh√¥ng c√≥ trong activePlan, th·ª≠ l·∫•y t·ª´ userPlan
    if (!initialCigarettesPerDay) {
      initialCigarettesPerDay = userPlan?.initialCigarettes || 
                              (userPlan?.weeks && userPlan.weeks.length > 0 ? userPlan.weeks[0].amount : 22);
    }
    
    console.log(`S·ªë ƒëi·∫øu ban ƒë·∫ßu ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${initialCigarettesPerDay} ƒëi·∫øu/ng√†y`);
    
    // T√≠nh s·ªë ƒëi·∫øu ƒë√£ tr√°nh - CH·ªà t√≠nh t√≠ch l≈©y cho c√°c ng√†y th·ª±c s·ª± gi·∫£m ƒë∆∞·ª£c
    let savedCigarettes = 0;
    let dailySavings = [];
    let detailedLog = '';
    
    // T√≠nh s·ªë ƒëi·∫øu ƒë√£ tr√°nh cho T·∫§T C·∫¢ c√°c ng√†y c√≥ trong actualProgress
    actualProgress.forEach(dayRecord => {
      // S·ªë ƒëi·∫øu ƒë√£ tr√°nh trong ng√†y = s·ªë ƒëi·∫øu ban ƒë·∫ßu - s·ªë ƒëi·∫øu th·ª±c t·∫ø
      // CH·ªà t√≠nh n·∫øu th·ª±c s·ª± gi·∫£m ƒë∆∞·ª£c (actual < initial)
      const daySaved = Math.max(0, initialCigarettesPerDay - dayRecord.actualCigarettes);
      
      // Ch·ªâ c·ªông v√†o t·ªïng n·∫øu th·ª±c s·ª± tr√°nh ƒë∆∞·ª£c ƒëi·∫øu thu·ªëc
      if (daySaved > 0) {
        savedCigarettes += daySaved;
      }
      
      // Ghi chi ti·∫øt ƒë·ªÉ debug
      detailedLog += `\n- Ng√†y ${dayRecord.date}: ${initialCigarettesPerDay} - ${dayRecord.actualCigarettes} = ${daySaved} ƒëi·∫øu${daySaved > 0 ? ' ‚úÖ' : ' (kh√¥ng tr√°nh ƒë∆∞·ª£c)'}`;
      
      // L∆∞u th√¥ng tin chi ti·∫øt
      dailySavings.push({
        date: dayRecord.date,
        actual: dayRecord.actualCigarettes,
        targetFromPlan: dayRecord.targetCigarettes,
        userInitialCigarettes: initialCigarettesPerDay,
        saved: daySaved
      });
    });
    
    console.log(`T·ªïng s·ªë ƒëi·∫øu ƒë√£ tr√°nh t√≠ch l≈©y: ${savedCigarettes} ƒëi·∫øu`);
    console.log("Chi ti·∫øt c√°c ng√†y:", dailySavings);
    
    // T√≠nh ti·ªÅn ti·∫øt ki·ªám d·ª±a tr√™n gi√° g√≥i thu·ªëc t·ª´ k·∫ø ho·∫°ch c·ªßa ng∆∞·ªùi d√πng
    let packPrice = 25000; // Gi√° m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
    
    // L·∫•y gi√° g√≥i thu·ªëc t·ª´ activePlan
    try {
      const activePlanData = localStorage.getItem('activePlan');
      if (activePlanData) {
        const activePlan = JSON.parse(activePlanData);
        if (activePlan && activePlan.packPrice) {
          packPrice = activePlan.packPrice;
          console.log(`L·∫•y gi√° g√≥i thu·ªëc t·ª´ activePlan: ${packPrice.toLocaleString()}ƒë`);
        }
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·ªçc packPrice t·ª´ activePlan:', error);
    }
    
    const pricePerCigarette = packPrice / 20; // Gi·∫£ s·ª≠ 1 g√≥i = 20 ƒëi·∫øu
    const savedMoney = savedCigarettes * pricePerCigarette;
    
    // T√≠nh milestone s·ª©c kh·ªèe ƒë·∫°t ƒë∆∞·ª£c d·ª±a tr√™n s·ªë ng√†y c√≥ checkin th·ª±c t·∫ø
    // Milestone theo th·ªùi gian WHO - ch·ªâ t√≠nh c√°c ng√†y th·ª±c s·ª± tham gia checkin
    const healthMilestones = [
      { days: 1, title: '24 gi·ªù ƒë·∫ßu ti√™n', description: 'Carbon monoxide ƒë∆∞·ª£c lo·∫°i b·ªè kh·ªèi c∆° th·ªÉ' },
      { days: 2, title: '48 gi·ªù', description: 'Nicotine ƒë∆∞·ª£c lo·∫°i b·ªè, v·ªã gi√°c c·∫£i thi·ªán' },
      { days: 3, title: '72 gi·ªù', description: 'ƒê∆∞·ªùng h√¥ h·∫•p th∆∞ gi√£n, nƒÉng l∆∞·ª£ng tƒÉng' },
      { days: 7, title: '1 tu·∫ßn', description: 'V·ªã gi√°c v√† kh·ª©u gi√°c c·∫£i thi·ªán r√µ r·ªát' },
      { days: 14, title: '2 tu·∫ßn', description: 'Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán' },
      { days: 30, title: '1 th√°ng', description: 'Ch·ª©c nƒÉng ph·ªïi tƒÉng 30%' },
      { days: 90, title: '3 th√°ng', description: 'Ho v√† kh√≥ th·ªü gi·∫£m ƒë√°ng k·ªÉ' },
      { days: 365, title: '1 nƒÉm', description: 'Nguy c∆° b·ªánh tim gi·∫£m 50%' }
    ];
    
    // T√¨m milestone s·ª©c kh·ªèe ƒë√£ ƒë·∫°t ƒë∆∞·ª£c d·ª±a tr√™n s·ªë ng√†y theo d√µi th·ª±c t·∫ø
    const achievedMilestones = healthMilestones.filter(m => noSmokingDays >= m.days).length;
    const healthProgress = Math.round((achievedMilestones / healthMilestones.length) * 100);
    
    console.log(`Milestone s·ª©c kh·ªèe: ${achievedMilestones}/${healthMilestones.length} (${healthProgress}%) d·ª±a tr√™n ${noSmokingDays} ng√†y theo d√µi th·ª±c t·∫ø`);
    
    console.log(`Th·ªëng k√™ m·ªõi: ${noSmokingDays} ng√†y kh√¥ng h√∫t, ${savedCigarettes} ƒëi·∫øu ƒë√£ tr√°nh, ${savedMoney.toFixed(0)}ƒë ti·∫øt ki·ªám, ti·∫øn ƒë·ªô s·ª©c kh·ªèe ${healthProgress}%`);
    
    // T√¨m d·ªØ li·ªáu h√¥m nay ƒë·ªÉ debug
    const todayDateStr = new Date().toISOString().split('T')[0];
    const todayRecord = actualProgress.find(day => day.date === todayDateStr);
    
    // C·∫≠p nh·∫≠t state v·ªõi th·ªëng k√™ m·ªõi
    const newStats = {
      noSmokingDays,
      savedCigarettes,
      savedMoney,
      healthProgress,
      // Th√™m th√¥ng tin chi ti·∫øt ƒë·ªÉ debugging
      calculationDetails: {
        initialCigarettesPerDay,
        dailySavings,
        lastCalculated: new Date().toISOString(),
        debug: {
          actualData: todayRecord ? {
            date: todayDateStr,
            actualCigarettes: todayRecord.actualCigarettes,
            targetCigarettes: todayRecord.targetCigarettes
          } : "Ch∆∞a c√≥ check-in h√¥m nay",
          totalCheckinDays: actualProgress.length,
          savedCalcDesc: `T·ªïng ${savedCigarettes} ƒëi·∫øu ƒë√£ tr√°nh t·ª´ ${actualProgress.length} ng√†y checkin`
        }
      }
    };
    
    console.log("ƒêang c·∫≠p nh·∫≠t state v·ªõi th·ªëng k√™ m·ªõi:", newStats);
    console.log("QUAN TR·ªåNG - S·ªë ƒëi·∫øu ƒë√£ tr√°nh m·ªõi: " + savedCigarettes);
    
    // L∆∞u v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng gi·ªØa c√°c phi√™n - x√≥a tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng gi·ªØ l·∫°i d·ªØ li·ªáu c≈©
    localStorage.removeItem('dashboardStats');
    localStorage.setItem('dashboardStats', JSON.stringify(newStats));
    
    console.log("======= K·∫æT TH√öC T√çNH TO√ÅN TH·ªêNG K√ä =======");
    
    return newStats;
  };
  
  if (!userPlan) {
    return (
      <div className="progress-container">
        <div style={{ textAlign: 'center', padding: '2rem' }}>
          <p>‚ùå Kh√¥ng t√¨m th·∫•y k·∫ø ho·∫°ch cai thu·ªëc!</p>
          <button onClick={() => {
            console.log('Forcing reload...');
            loadUserPlanAndProgress();
          }}>
            üîÑ T·∫£i l·∫°i
          </button>
        </div>
      </div>
    );
  }
  
  // Ki·ªÉm tra xem c√≥ c·∫ßn hi·ªÉn th·ªã th√¥ng b√°o c·∫ßn l·∫≠p k·∫ø ho·∫°ch
  const hasValidPlan = userPlan && Array.isArray(userPlan.weeks) && userPlan.weeks.length > 0;
  if (userPlan && !hasValidPlan) {
    return (
      <div className="progress-container">
        <div style={{ 
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          textAlign: 'center', 
          padding: '3rem',
          maxWidth: '600px',
          margin: '0 auto',
          backgroundColor: 'white',
          borderRadius: '10px',
          boxShadow: '0 5px 15px rgba(0,0,0,0.1)',
          marginTop: '2rem' 
        }}>          
          <h2 style={{
            fontSize: '1.8rem',
            marginBottom: '1.5rem',
            color: '#2c3e50',
            textAlign: 'center',
            width: '100%',
            position: 'relative',
            fontWeight: '600',
            display: 'inline-block'
          }}>
            <span style={{ position: 'relative', zIndex: '1' }}>
              B·∫°n c·∫ßn l·∫≠p k·∫ø ho·∫°ch cai thu·ªëc
              <span style={{ 
                position: 'absolute', 
                height: '3px', 
                width: '100px', 
                background: '#3498db', 
                bottom: '-10px', 
                left: '50%', 
                transform: 'translateX(-50%)',
                borderRadius: '2px'
              }}></span>
            </span>
          </h2>
          <p style={{
            fontSize: '1.1rem',
            marginBottom: '2rem',
            color: '#7f8c8d',
            lineHeight: '1.6',
            textAlign: 'center',
            maxWidth: '90%'
          }}>
            ƒê·ªÉ theo d√µi ti·∫øn tr√¨nh cai thu·ªëc, h√£y l·∫≠p m·ªôt k·∫ø ho·∫°ch ph√π h·ª£p v·ªõi m·ª•c ti√™u 
            v√† kh·∫£ nƒÉng c·ªßa b·∫°n. K·∫ø ho·∫°ch n√†y s·∫Ω gi√∫p b·∫°n duy tr√¨ ƒë·ªông l·ª±c v√† ƒëo l∆∞·ªùng 
            s·ª± ti·∫øn b·ªô h√†ng ng√†y.
          </p>          
          <a 
            href="/journey"
            style={{
              backgroundColor: '#3498db',
              color: 'white',
              border: 'none',
              borderRadius: '30px',
              padding: '12px 25px',
              fontSize: '1rem',
              fontWeight: '600',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              textDecoration: 'none',
              display: 'block',
              margin: '0 auto',
              width: 'fit-content',
              textAlign: 'center'
            }}
            onMouseOver={(e) => e.target.style.backgroundColor = '#2980b9'}
            onMouseOut={(e) => e.target.style.backgroundColor = '#3498db'}
          >
            L·∫≠p k·∫ø ho·∫°ch cai thu·ªëc ngay
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="progress-container">      <h1 className="page-title">
      {showCompletionDashboard ? 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ l·∫≠p k·∫ø ho·∫°ch cai thu·ªëc' : 'Ti·∫øn tr√¨nh cai thu·ªëc hi·ªán t·∫°i'}
    </h1>        {/* Daily Checkin Section - Lu√¥n hi·ªÉn th·ªã ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p s·ªë ƒëi·∫øu ƒë√£ h√∫t */}
      <DailyCheckin
        onProgressUpdate={handleProgressUpdate}
        currentPlan={userPlan || {
          name: "K·∫ø ho·∫°ch m·∫∑c ƒë·ªãnh",
          startDate: new Date().toISOString().split('T')[0],
          weeks: [
            { week: 1, amount: 20, phase: "Th√≠ch nghi" },
            { week: 2, amount: 16, phase: "Th√≠ch nghi" },
            { week: 3, amount: 12, phase: "TƒÉng t·ªëc" },
            { week: 4, amount: 8, phase: "TƒÉng t·ªëc" },
            { week: 5, amount: 5, phase: "Ho√†n thi·ªán" },
            { week: 6, amount: 2, phase: "Ho√†n thi·ªán" },
            { week: 7, amount: 0, phase: "M·ª•c ti√™u ƒë·∫°t ƒë∆∞·ª£c" }
          ],
          initialCigarettes: 20
        }}
      />

      {/* Show completion dashboard if plan is completed */}
      {showCompletionDashboard && completionData ? (
        <ProgressDashboard
          userPlan={completionData.userPlan}
          completionDate={completionData.completionDate}
        />
      ) : (
        <>
          {/* Enhanced Progress Chart with Chart.js */}
          <QuitProgressChart
            userPlan={userPlan}
            actualProgress={actualProgress}
            timeFilter={activeTimeFilter}
            height={350}
          />

          {/* Debug Controls for Fake Data */}
          <div className="debug-controls" style={{
            background: 'rgba(255, 215, 0, 0.1)',
            border: '1px solid rgba(255, 215, 0, 0.3)',
            borderRadius: '8px',
            padding: '16px',
            margin: '20px 0'
          }}>
            <h3 style={{ margin: '0 0 12px 0', color: '#ff6b35' }}>üîß Debug Controls</h3>
            <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
              <button
                onClick={generateNewFakeData}
                style={{
                  background: '#28a745',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '14px'
                }}
              >
                üé≤ T·∫°o Fake Data M·ªõi
              </button>
              <button
                onClick={clearAllData}
                style={{
                  background: '#dc3545',
                  color: 'white',
                  border: 'none',
                  padding: '8px 16px',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '14px'
                }}
              >
                üóëÔ∏è X√≥a T·∫•t C·∫£ Data
              </button>
              <span style={{
                alignSelf: 'center',
                fontSize: '14px',
                color: '#666',
                fontStyle: 'italic'
              }}>
                Data points: {actualProgress.length}
              </span>
            </div>
          </div>

          {/* Time Filter Controls */}
          <div className="time-filters">
            <button
              className={`time-filter ${activeTimeFilter === '7 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('7 ng√†y')}
            >
              7 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === '14 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('14 ng√†y')}
            >
              14 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === '30 ng√†y' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('30 ng√†y')}
            >
              30 ng√†y
            </button>
            <button
              className={`time-filter ${activeTimeFilter === 'T·∫•t c·∫£' ? 'active' : ''}`}
              onClick={() => setActiveTimeFilter('T·∫•t c·∫£')}
            >
              T·∫•t c·∫£
            </button>
          </div>

          {/* Plan Information */}
          <div className="plan-info-section">
            <h2>üìã K·∫ø ho·∫°ch hi·ªán t·∫°i: {userPlan?.name || 'K·∫ø ho·∫°ch kh√¥ng t√™n'}</h2>
            <div className="plan-summary">
              <div className="summary-item">
                <span className="label">‚è±Ô∏è Th·ªùi gian:</span>
                <span className="value">{userPlan?.weeks?.length || 0} tu·∫ßn</span>
              </div>
              <div className="summary-item">
                <span className="label">üéØ M·ª•c ti√™u cu·ªëi:</span>
                <span className="value">0 ƒëi·∫øu/ng√†y</span>
              </div>
              <div className="summary-item">
                <span className="label">üö¨ B·∫Øt ƒë·∫ßu t·ª´:</span>
                <span className="value">{userPlan?.initialCigarettes || userPlan?.weeks?.[0]?.amount || 20} ƒëi·∫øu/ng√†y</span>
              </div>
              <div className="summary-item">
                <span className="label">üìÖ Ng√†y b·∫Øt ƒë·∫ßu:</span>
                <span className="value">{userPlan?.startDate ? new Date(userPlan.startDate).toLocaleDateString('vi-VN') : 'H√¥m nay'}</span>
              </div>
            </div>
          </div>          {/* Progress Statistics */}
          {actualProgress.length > 0 && (
            <div className="progress-stats">
              <h2>Th·ªëng k√™ ti·∫øn tr√¨nh</h2>
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-value">{actualProgress.length}</div>
                  <div className="stat-label">Ng√†y ƒë√£ check-in</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {actualProgress.filter(p => p.actualCigarettes <= p.targetCigarettes).length}
                  </div>
                  <div className="stat-label">Ng√†y ƒë·∫°t m·ª•c ti√™u</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {actualProgress.length > 0 ?
                      Math.round(actualProgress.reduce((sum, p) => sum + p.actualCigarettes, 0) / actualProgress.length)
                      : (userPlan.initialCigarettes || (userPlan.weeks && userPlan.weeks[0]?.amount) || 20)}
                  </div>
                  <div className="stat-label">Trung b√¨nh ƒëi·∫øu/ng√†y</div>
                </div>
                <div className="stat-card">
                  <div className="stat-value">
                    {Math.round((actualProgress.filter(p => p.actualCigarettes <= p.targetCigarettes).length / actualProgress.length) * 100)}%
                  </div>
                  <div className="stat-label">T·ª∑ l·ªá th√†nh c√¥ng</div>
                </div>              </div>

            </div>
          )}
        </>
      )}
    </div>
  );
}