import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import './Register.css';
import { useAuth } from '../context/AuthContext';

export default function Register() {
  const [fullName, setFullName] = useState('');
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [phone, setPhone] = useState('');
  const [gender, setGender] = useState('');
  const [cigarettesPerDay, setCigarettesPerDay] = useState(10);
  const [costPerPack, setCostPerPack] = useState(25000);
  const [cigarettesPerPack, setCigarettesPerPack] = useState(20);

  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const { register, isAuthenticated } = useAuth();
  const navigate = useNavigate();

  // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn profile n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (isAuthenticated) {
      navigate('/profile');
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');

    // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
    if (password !== confirmPassword) {
      setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
      return;
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u ƒë·ªß m·∫°nh (√≠t nh·∫•t 6 k√Ω t·ª±)
    if (password.length < 6) {
      setError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }    setIsLoading(true);
    
    try {
      const userData = {
        username,
        fullName,
        email,
        password,
        confirmPassword,
        phone,
        gender,
        cigarettesPerDay: parseInt(cigarettesPerDay),
        costPerPack: parseInt(costPerPack),
        cigarettesPerPack: parseInt(cigarettesPerPack)
      };

      console.log('üîç Sending userData:', userData); // Debug log

      const result = await register(userData);

      console.log('üìã Register result:', result); // Debug log

      if (result.success) {
        navigate('/profile');
      } else {
        setError(result.error || 'ƒêƒÉng k√Ω kh√¥ng th√†nh c√¥ng');
      }
    } catch (err) {
      setError('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="register-page">
      <div className="register-container">
        <div className="register-card">
          <div className="register-header">
            <h1>ƒêƒÉng k√Ω t√†i kho·∫£n</h1>
            <p>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh cai thu·ªëc l√° c·ªßa b·∫°n</p>
          </div>

          <form onSubmit={handleSubmit} className="register-form">
            {error && <div className="error-message">{error}</div>}            <div className="form-group">
              <label htmlFor="fullName">H·ªç v√† t√™n</label>
              <input
                type="text"
                id="fullName"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
                placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n"
                disabled={isLoading}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="username">T√™n ng∆∞·ªùi d√πng</label>
              <input
                type="text"
                id="username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng (3-50 k√Ω t·ª±)"
                disabled={isLoading}
                required
                minLength={3}
                maxLength={50}
                pattern="[a-zA-Z0-9_]+"
                title="Ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi"
              />
            </div>

            <div className="form-group">
              <label htmlFor="email">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="Nh·∫≠p email c·ªßa b·∫°n"
                disabled={isLoading}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i (tu·ª≥ ch·ªçn)</label>
              <input
                type="tel"
                id="phone"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                disabled={isLoading}
              />
            </div>

            <div className="form-group">
              <label htmlFor="gender">Gi·ªõi t√≠nh (tu·ª≥ ch·ªçn)</label>
              <select
                id="gender"
                value={gender}
                onChange={(e) => setGender(e.target.value)}
                disabled={isLoading}
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="male">Nam</option>
                <option value="female">N·ªØ</option>
                <option value="other">Kh√°c</option>
              </select>
            </div>

            <div className="form-group">
              <label htmlFor="password">M·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                disabled={isLoading}
                required
                minLength={6}
              />
            </div>

            <div className="form-group">
              <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
              <input
                type="password"
                id="confirmPassword"
                value={confirmPassword}
                onChange={(e) => setConfirmPassword(e.target.value)}
                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                disabled={isLoading}
                required
              />
            </div>

            <div className="form-divider">
              <span>Th√¥ng tin v·ªÅ th√≥i quen h√∫t thu·ªëc</span>
            </div>

            <div className="form-group">
              <label htmlFor="cigarettesPerDay">S·ªë ƒëi·∫øu thu·ªëc m·ªói ng√†y</label>
              <input
                type="number"
                id="cigarettesPerDay"
                value={cigarettesPerDay}
                onChange={(e) => setCigarettesPerDay(e.target.value)}
                min="1"
                max="100"
                disabled={isLoading}
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="costPerPack">Gi√° m·ªôt g√≥i thu·ªëc (VNƒê)</label>
                <input
                  type="number"
                  id="costPerPack"
                  value={costPerPack}
                  onChange={(e) => setCostPerPack(e.target.value)}
                  min="1000"
                  step="1000"
                  disabled={isLoading}
                  required
                />
              </div>

              <div className="form-group">
                <label htmlFor="cigarettesPerPack">S·ªë ƒëi·∫øu trong m·ªôt g√≥i</label>
                <input
                  type="number"
                  id="cigarettesPerPack"
                  value={cigarettesPerPack}
                  onChange={(e) => setCigarettesPerPack(e.target.value)}
                  min="1"
                  max="50"
                  disabled={isLoading}
                  required
                />
              </div>
            </div>

            <div className="terms-privacy">
              <input type="checkbox" id="terms" required />
              <label htmlFor="terms">
                T√¥i ƒë·ªìng √Ω v·ªõi <Link to="/terms">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</Link> v√† <Link to="/privacy">Ch√≠nh s√°ch b·∫£o m·∫≠t</Link>
              </label>
            </div>

            <button
              type="submit"
              className="register-button"
              disabled={isLoading}
            >
              {isLoading ? 'ƒêang ƒëƒÉng k√Ω...' : 'ƒêƒÉng k√Ω'}
            </button>
          </form>

          <div className="register-footer">
            <p>ƒê√£ c√≥ t√†i kho·∫£n? <Link to="/login" className="login-link">ƒêƒÉng nh·∫≠p ngay</Link></p>
          </div>
        </div>

        <div className="register-info">
          <h2>L·ª£i √≠ch khi ƒëƒÉng k√Ω t√†i kho·∫£n NoSmoke</h2>
          <ul className="benefits-list">
            <li>Theo d√µi ti·∫øn tr√¨nh cai thu·ªëc l√° c·ªßa b·∫°n</li>
            <li>T√≠nh to√°n s·ªë ti·ªÅn ti·∫øt ki·ªám ƒë∆∞·ª£c</li>
            <li>Nh·∫≠n th√¥ng b√°o ƒë·ªông vi√™n h√†ng ng√†y</li>
            <li>Tham gia c·ªông ƒë·ªìng nh·ªØng ng∆∞·ªùi c√πng cai thu·ªëc</li>
            <li>Xem l·ªô tr√¨nh c·∫£i thi·ªán s·ª©c kh·ªèe theo th·ªùi gian th·ª±c</li>
            <li>Nh·∫≠n h·ªó tr·ª£ t·ª´ chuy√™n gia</li>
          </ul>
        </div>
      </div>
    </div>
  );
}
