import React, { useState, useEffect } from 'react';
import { Link, useNavigate, useParams, useLocation } from 'react-router-dom';
import '../styles/ResetPassword.css';

// Base API URL - should match AuthContext
const API_BASE_URL = 'http://localhost:5000/api';

export default function ResetPassword() {
    const [newPassword, setNewPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    // L·∫•y token t·ª´ URL ho·∫∑c t·ª´ query params
    const { token } = useParams();
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const tokenFromQuery = queryParams.get('token');

    const resetToken = token || tokenFromQuery || '';

    const navigate = useNavigate();

    useEffect(() => {
        if (!resetToken) {
            setError('Token ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá');
        }
    }, [resetToken]);

    const handleResetPassword = async (e) => {
        e.preventDefault();
        setError('');
        setSuccess('');

        // Ki·ªÉm tra m·∫≠t kh·∫©u
        if (newPassword !== confirmPassword) {
            setError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp');
            return;
        }

        if (newPassword.length < 6) {
            setError('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
            return;
        }

        setIsLoading(true);

        try {
            const response = await fetch(`${API_BASE_URL}/auth/reset-pass`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    token: resetToken,
                    newPassword,
                }),
            });

            const data = await response.json();

            if (data.success) {
                setSuccess('ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng! ƒêang chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p...');
                setTimeout(() => {
                    navigate('/login');
                }, 2000);
            } else {
                setError(data.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u');
            }
        } catch (err) {
            setError('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i');
            console.error(err);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="reset-password-page">
            <div className="reset-password-container">
                <div className="reset-password-card">
                    <div className="reset-password-header">
                        <h1>üîí ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
                        <p>T·∫°o m·∫≠t kh·∫©u m·ªõi cho t√†i kho·∫£n c·ªßa b·∫°n</p>
                    </div>

                    {error && <div className="error-message">{error}</div>}
                    {success && <div className="success-message">{success}</div>}

                    <form onSubmit={handleResetPassword} className="reset-password-form">
                        <div className="form-group">
                            <label htmlFor="newPassword">M·∫≠t kh·∫©u m·ªõi</label>
                            <input
                                type="password"
                                id="newPassword"
                                value={newPassword}
                                onChange={(e) => setNewPassword(e.target.value)}
                                placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                                required
                                disabled={isLoading || !resetToken}
                                minLength={6}
                            />
                            <small>M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</small>
                        </div>

                        <div className="form-group">
                            <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</label>
                            <input
                                type="password"
                                id="confirmPassword"
                                value={confirmPassword}
                                onChange={(e) => setConfirmPassword(e.target.value)}
                                placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                                required
                                disabled={isLoading || !resetToken}
                                minLength={6}
                            />
                        </div>

                        <button
                            type="submit"
                            className="reset-button"
                            disabled={isLoading || !resetToken}
                        >
                            {isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u'}
                        </button>
                    </form>

                    <div className="reset-password-footer">
                        <p>
                            Nh·ªõ m·∫≠t kh·∫©u? <Link to="/login" className="login-link">ƒêƒÉng nh·∫≠p</Link>
                        </p>
                        <p>
                            Ch∆∞a c√≥ t√†i kho·∫£n? <Link to="/signup" className="signup-link">ƒêƒÉng k√Ω ngay</Link>
                        </p>
                    </div>
                </div>

                <div className="reset-password-info">
                    <h2>üîê Th√¥ng tin quan tr·ªçng</h2>
                    <ul className="tips-list">
                        <li>M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±</li>
                        <li>Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ch·ªâ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</li>
                        <li>Sau khi ƒë·ªïi m·∫≠t kh·∫©u, b·∫°n c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i</li>
                        <li>N√™n s·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v·ªõi k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
                        <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi ng∆∞·ªùi kh√°c</li>
                    </ul>
                </div>
            </div>
        </div>
    );
}
