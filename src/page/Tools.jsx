import React, { useState } from 'react';
import { FaUserAlt, FaChartLine, FaCalendarAlt, FaHeartbeat, FaTrophy, FaComment, FaHeart, FaCheckCircle, FaExclamationCircle, FaUsers, FaCog, FaBell } from 'react-icons/fa';
import { Link } from 'react-router-dom';
import './Tools.css';

export default function ProfilePage() {
  const [activeTab, setActiveTab] = useState('profile');
  const [todayMood, setTodayMood] = useState('');
  const [smokedToday, setSmokedToday] = useState(null);
  const [todaySymptoms, setTodaySymptoms] = useState([]);

  // D·ªØ li·ªáu ng∆∞·ªùi d√πng m·∫´u
  const userData = {
    name: 'Nguy·ªÖn Th√†nh',
    avatar: '/image/hero/quit-smoking-2.png',
    daysWithoutSmoking: 28,
    moneySaved: 840000,
    pointsEarned: 560,
    startDate: '01/05/2023',
    cigarettesPerDay: 20,
    costPerDay: 30000,
    yearsOfSmoking: 8,
    fagerstromScore: '8/10',
    healthImprovements: [
      { time: '20 ph√∫t', description: 'Huy·∫øt √°p v√† nh·ªãp tim tr·ªü v·ªÅ b√¨nh th∆∞·ªùng', completed: true },
      { time: '24 gi·ªù', description: 'CO trong m√°u gi·∫£m v·ªÅ m·ª©c b√¨nh th∆∞·ªùng', completed: true },
      { time: '48 gi·ªù', description: 'Nicotine ƒë√£ r·ªùi kh·ªèi c∆° th·ªÉ', completed: true },
      { time: '72 gi·ªù', description: 'H√¥ h·∫•p d·ªÖ d√†ng h∆°n', completed: true },
      { time: '2-12 tu·∫ßn', description: 'Tu·∫ßn ho√†n m√°u c·∫£i thi·ªán', completed: false }
    ],
    milestones: [
      { id: 1, name: 'Chu·∫©n b·ªã cai thu·ªëc', date: '30/04/2023', completed: true },
      { id: 2, name: 'Ng√†y ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc', date: '01/05/2023', completed: true },
      { id: 3, name: 'Tu·∫ßn ƒë·∫ßu ti√™n kh√¥ng h√∫t thu·ªëc', date: '08/05/2023', completed: true },
      { id: 4, name: 'Duy tr√¨ 3 th√°ng kh√¥ng h√∫t thu·ªëc', progress: '28/90 ng√†y', completed: false }
    ],
    achievements: [
      { id: 1, name: '24 gi·ªù ƒë·∫ßu ti√™n', date: '02/05/2023', icon: '‚≠ê' },
      { id: 2, name: '1 tu·∫ßn kh√¥ng h√∫t', date: '08/05/2023', icon: 'üèÖ' },
      { id: 3, name: '2 tu·∫ßn kh√¥ng h√∫t', date: '15/05/2023', icon: 'üèÜ' },
      { id: 4, name: '1 th√°ng kh√¥ng h√∫t', date: '', icon: 'üëë' }
    ],
    journalEntries: [
      { 
        id: 1, 
        day: 28, 
        date: 'H√¥m nay', 
        mood: 'B√¨nh th∆∞·ªùng', 
        symptoms: 'Kh√¥ng c√≥ tri·ªáu ch·ª©ng', 
        notes: '"H√¥m nay l√† m·ªôt ng√†y b√¨nh th∆∞·ªùng, kh√¥ng c√≥ c·∫£m gi√°c th√®m thu·ªëc."' 
      },
      { 
        id: 2, 
        day: 27, 
        date: 'H√¥m qua', 
        mood: 'T·ªët', 
        symptoms: 'Kh√¥ng c√≥ tri·ªáu ch·ª©ng', 
        notes: '"C·∫£m th·∫•y r·∫•t t·ª± h√†o v·ªÅ b·∫£n th√¢n, h√¥m nay t√¥i ƒë√£ t·ª´ ch·ªëi m·ªôt ƒëi·∫øu thu·ªëc t·ª´ ƒë·ªìng nghi·ªáp."' 
      }
    ]
  };

  // X·ª≠ l√Ω c·∫≠p nh·∫≠t h√¥m nay
  const handleUpdateToday = () => {
    const newEntry = {
      id: Date.now(),
      day: userData.daysWithoutSmoking,
      date: 'H√¥m nay',
      mood: todayMood,
      symptoms: todaySymptoms.join(', '),
      notes: document.getElementById('journalNote').value
    };
    
    // ·ªû ƒë√¢y b·∫°n s·∫Ω l∆∞u newEntry v√†o c∆° s·ªü d·ªØ li·ªáu th·ª±c t·∫ø
    console.log('C·∫≠p nh·∫≠t m·ªõi:', newEntry);
    alert('ƒê√£ l∆∞u c·∫≠p nh·∫≠t c·ªßa b·∫°n!');
  };

  return (
    <div className="profile-container">
      {/* Sidebar */}
      <div className="profile-sidebar">
        <div className="user-info">
          <div className="user-avatar">
            <span className="user-initial">NT</span>
          </div>
          <div className="user-details">
            <h3>{userData.name}</h3>
            <p>ƒêang cai thu·ªëc: {userData.daysWithoutSmoking} ng√†y</p>
          </div>
        </div>
        
        <nav className="profile-nav">
          <Link to="#" className={`nav-item ${activeTab === 'profile' ? 'active' : ''}`} onClick={() => setActiveTab('profile')}>
            <FaUserAlt /> H·ªì s∆° c√° nh√¢n
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'progress' ? 'active' : ''}`} onClick={() => setActiveTab('progress')}>
            <FaChartLine /> Ti·∫øn tr√¨nh
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'achievements' ? 'active' : ''}`} onClick={() => setActiveTab('achievements')}>
            <FaTrophy /> Huy hi·ªáu
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'journal' ? 'active' : ''}`} onClick={() => setActiveTab('journal')}>
            <FaComment /> T∆∞ v·∫•n
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'community' ? 'active' : ''}`} onClick={() => setActiveTab('community')}>
            <FaUsers /> C·ªông ƒë·ªìng
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'settings' ? 'active' : ''}`} onClick={() => setActiveTab('settings')}>
            <FaCog /> C√†i ƒë·∫∑t
          </Link>
          <Link to="#" className={`nav-item ${activeTab === 'notifications' ? 'active' : ''}`} onClick={() => setActiveTab('notifications')}>
            <FaBell /> Nh·∫≠n th√¥ng b√°o
          </Link>
        </nav>
      </div>
      
      {/* Main content */}
      <div className="profile-content">
        {activeTab === 'profile' && (
          <div className="profile-overview">
            <div className="section-header">
              <h1>H·ªì s∆° c√° nh√¢n</h1>
              <button className="update-btn">C·∫≠p nh·∫≠t</button>
            </div>
            
            <div className="overview-stats">
              <div className="stat-card">
                <h3>Kh√¥ng h√∫t thu·ªëc</h3>
                <div className="stat-value">{userData.daysWithoutSmoking} ng√†y</div>
                <p className="stat-detail">672 gi·ªù kh√¥ng h√∫t thu·ªëc</p>
              </div>
              
              <div className="stat-card">
                <h3>Ti·ªÅn ti·∫øt ki·ªám</h3>
                <div className="stat-value">{userData.moneySaved.toLocaleString()} ƒë</div>
                <p className="stat-detail">30.000 ƒë m·ªói ng√†y</p>
              </div>
              
              <div className="stat-card">
                <h3>ƒêi·ªÉm thu·ªëc tr√°nh ƒë∆∞·ª£c</h3>
                <div className="stat-value">{userData.pointsEarned} ƒëi·∫øu</div>
                <p className="stat-detail">20 ƒëi·∫øu m·ªói ng√†y</p>
              </div>
            </div>
            
            <div className="profile-sections">
              <div className="health-section">
                <h2>H·ªì s∆° s·ª©c kh·ªèe</h2>
                
                <div className="health-stats">
                  <div className="health-stat-row">
                    <div className="health-stat">
                      <h4>T√¨nh tr·∫°ng h√∫t thu·ªëc ban ƒë·∫ßu</h4>
                      <p>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {userData.daysWithoutSmoking} ng√†y tr∆∞·ªõc</p>
                    </div>
                  </div>
                  
                  <div className="health-stat-row two-col">
                    <div className="health-stat-item">
                      <label>S·ªë ƒëi·∫øu m·ªói ng√†y</label>
                      <p>{userData.cigarettesPerDay} ƒëi·∫øu/ng√†y</p>
                    </div>
                    
                    <div className="health-stat-item">
                      <label>Chi ph√≠ m·ªói ng√†y</label>
                      <p>{userData.costPerDay.toLocaleString()} ƒë/ng√†y</p>
                    </div>
                  </div>
                  
                  <div className="health-stat-row two-col">
                    <div className="health-stat-item">
                      <label>Th·ªùi gian h√∫t thu·ªëc</label>
                      <p>{userData.yearsOfSmoking} nƒÉm</p>
                    </div>
                    
                    <div className="health-stat-item">
                      <label>M·ª©c ƒë·ªô nghi·ªán</label>
                      <p>Cao (Fagerstrom: {userData.fagerstromScore})</p>
                    </div>
                  </div>
                </div>
                
                <div className="health-improvements">
                  <h3>C·∫£i thi·ªán s·ª©c kh·ªèe</h3>
                  <div className="improvements-list">
                    {userData.healthImprovements.map((improvement, index) => (
                      <div key={index} className="improvement-item">
                        <span className="improvement-time">{improvement.time}</span>
                        <span className="improvement-description">{improvement.description}</span>
                        {improvement.completed ? 
                          <FaCheckCircle className="completed-icon" /> : 
                          <span className="pending-icon">‚óã</span>
                        }
                      </div>
                    ))}
                  </div>
                </div>
              </div>
              
              <div className="plan-section">
                <h2>K·∫ø ho·∫°ch cai thu·ªëc</h2>
                
                <div className="current-plan">
                  <h3>K·∫ø ho·∫°ch hi·ªán t·∫°i</h3>
                  <p className="plan-strategy">Ph∆∞∆°ng ph√°p: Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i</p>
                  
                  <div className="plan-start-date">
                    <div className="date-label">
                      <FaCalendarAlt className="icon" />
                      <span>Ng√†y b·∫Øt ƒë·∫ßu cai thu·ªëc: {userData.startDate}</span>
                    </div>
                    <div className="plan-goal">
                      <strong>M·ª•c ti√™u:</strong> Cai thu·ªëc ho√†n to√†n v√† duy tr√¨ l√¢u d√†i
                    </div>
                  </div>
                  
                  <div className="milestones">
                    {userData.milestones.map(milestone => (
                      <div key={milestone.id} className="milestone-item">
                        <div className="milestone-status">
                          {milestone.completed ? 
                            <div className="status-circle completed"><FaCheckCircle /></div> : 
                            <div className="status-circle in-progress"></div>
                          }
                        </div>
                        <div className="milestone-info">
                          <h4>{milestone.name}</h4>
                          <p>{milestone.completed ? `Ho√†n th√†nh: ${milestone.date}` : `ƒêang ti·∫øn h√†nh: ${milestone.progress}`}</p>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <button className="edit-plan-btn">ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch</button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'achievements' && (
          <div className="achievements-section">
            <h1>Huy hi·ªáu ƒë√£ ƒë·∫°t</h1>
            
            <div className="achievements-grid">
              {userData.achievements.map(achievement => (
                <div key={achievement.id} className={`achievement-card ${!achievement.date ? 'locked' : ''}`}>
                  <div className="achievement-icon">
                    {achievement.icon}
                  </div>
                  <h3>{achievement.name}</h3>
                  <p>{achievement.date || 'ƒê·∫°t khi ƒë·ªß ƒëi·ªÅu ki·ªán'}</p>
                </div>
              ))}
            </div>
            
            <h2>Xem t·∫•t c·∫£ huy hi·ªáu</h2>
          </div>
        )}
        
        {activeTab === 'journal' && (
          <div className="journal-section">
            <h1>C·∫≠p nh·∫≠t h√¥m nay</h1>
            
            <div className="journal-form">
              <div className="form-group">
                <h3>B·∫°n c√≥ h√∫t thu·ªëc h√¥m nay kh√¥ng?</h3>
                <div className="radio-group">
                  <label className="radio-label">
                    <input 
                      type="radio" 
                      name="smoked" 
                      value="no" 
                      checked={smokedToday === false}
                      onChange={() => setSmokedToday(false)} 
                    /> Kh√¥ng
                  </label>
                  <label className="radio-label">
                    <input 
                      type="radio" 
                      name="smoked" 
                      value="yes" 
                      checked={smokedToday === true}
                      onChange={() => setSmokedToday(true)} 
                    /> C√≥
                  </label>
                </div>
              </div>
              
              <div className="form-group">
                <h3>T√¢m tr·∫°ng c·ªßa b·∫°n h√¥m nay?</h3>
                <div className="mood-selector">
                  <button 
                    className={`mood-btn ${todayMood === 'T·ªët' ? 'active' : ''}`}
                    onClick={() => setTodayMood('T·ªët')}
                  >
                    <span role="img" aria-label="happy">üòÉ</span>
                    <span>T·ªët</span>
                  </button>
                  <button 
                    className={`mood-btn ${todayMood === 'B√¨nh th∆∞·ªùng' ? 'active' : ''}`}
                    onClick={() => setTodayMood('B√¨nh th∆∞·ªùng')}
                  >
                    <span role="img" aria-label="neutral">üòê</span>
                    <span>B√¨nh th∆∞·ªùng</span>
                  </button>
                  <button 
                    className={`mood-btn ${todayMood === 'Kh√¥ng t·ªët' ? 'active' : ''}`}
                    onClick={() => setTodayMood('Kh√¥ng t·ªët')}
                  >
                    <span role="img" aria-label="sad">üòî</span>
                    <span>Kh√¥ng t·ªët</span>
                  </button>
                  <button 
                    className={`mood-btn ${todayMood === 'T·ªá' ? 'active' : ''}`}
                    onClick={() => setTodayMood('T·ªá')}
                  >
                    <span role="img" aria-label="bad">üò©</span>
                    <span>T·ªá</span>
                  </button>
                  <button 
                    className={`mood-btn ${todayMood === 'Th√®m thu·ªëc' ? 'active' : ''}`}
                    onClick={() => setTodayMood('Th√®m thu·ªëc')}
                  >
                    <span role="img" aria-label="craving">üö¨</span>
                    <span>Th√®m thu·ªëc</span>
                  </button>
                </div>
              </div>
              
              <div className="form-group">
                <h3>Tri·ªáu ch·ª©ng h√¥m nay</h3>
                <div className="symptoms-checkboxes">
                  <label className="symptom-label">
                    <input 
                      type="checkbox" 
                      value="Ho" 
                      checked={todaySymptoms.includes('Ho')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setTodaySymptoms([...todaySymptoms, 'Ho']);
                        } else {
                          setTodaySymptoms(todaySymptoms.filter(s => s !== 'Ho'));
                        }
                      }} 
                    /> Ho
                  </label>
                  <label className="symptom-label">
                    <input 
                      type="checkbox" 
                      value="Kh√≥ th·ªü" 
                      checked={todaySymptoms.includes('Kh√≥ th·ªü')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setTodaySymptoms([...todaySymptoms, 'Kh√≥ th·ªü']);
                        } else {
                          setTodaySymptoms(todaySymptoms.filter(s => s !== 'Kh√≥ th·ªü'));
                        }
                      }} 
                    /> Kh√≥ th·ªü
                  </label>
                  <label className="symptom-label">
                    <input 
                      type="checkbox" 
                      value="M·ªát m·ªèi" 
                      checked={todaySymptoms.includes('M·ªát m·ªèi')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setTodaySymptoms([...todaySymptoms, 'M·ªát m·ªèi']);
                        } else {
                          setTodaySymptoms(todaySymptoms.filter(s => s !== 'M·ªát m·ªèi'));
                        }
                      }} 
                    /> M·ªát m·ªèi
                  </label>
                  <label className="symptom-label">
                    <input 
                      type="checkbox" 
                      value="C√°ng th·∫≥ng" 
                      checked={todaySymptoms.includes('C√°ng th·∫≥ng')}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setTodaySymptoms([...todaySymptoms, 'C√°ng th·∫≥ng']);
                        } else {
                          setTodaySymptoms(todaySymptoms.filter(s => s !== 'C√°ng th·∫≥ng'));
                        }
                      }} 
                    /> C√°ng th·∫≥ng
                  </label>
                </div>
              </div>
              
              <div className="form-group">
                <h3>Ghi ch√∫ nh·∫≠t k√Ω</h3>
                <textarea 
                  id="journalNote" 
                  placeholder="Chia s·∫ª c·∫£m nghƒ© c·ªßa b·∫°n h√¥m nay..."
                  rows="4"
                ></textarea>
              </div>
              
              <button className="submit-btn" onClick={handleUpdateToday}>L∆∞u c·∫≠p nh·∫≠t</button>
            </div>
            
            <div className="journal-history">
              <h2>L·ªãch s·ª≠ ti·∫øn tr√¨nh</h2>
              
              {userData.journalEntries.map(entry => (
                <div key={entry.id} className="journal-entry">
                  <div className="entry-day">
                    <span>Ng√†y kh√¥ng h√∫t thu·ªëc th·ª© {entry.day}</span>
                    <span className="entry-date">{entry.date}</span>
                  </div>
                  <div className="entry-content">
                    <div className="entry-stats">
                      <div className="entry-stat">
                        <strong>T√¢m tr·∫°ng:</strong> {entry.mood}
                      </div>
                      <div className="entry-stat">
                        <strong>Tri·ªáu ch·ª©ng:</strong> {entry.symptoms}
                      </div>
                    </div>
                    <div className="entry-note">
                      {entry.notes}
                    </div>
                  </div>
                </div>
              ))}
              
              <button className="view-all-btn">Xem t·∫•t c·∫£</button>
            </div>
          </div>
        )}
        
        {activeTab === 'progress' && (
          <div className="progress-section">
            <h1>Theo d√µi ti·∫øn tr√¨nh</h1>
            <p>Bi·ªÉu ƒë·ªì ti·∫øn tr√¨nh c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y</p>
          </div>
        )}
      </div>
    </div>
  );
}

// C√°c components h·ªó tr·ª£ (c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü m·ªôt file kh√°c)
// Kh√¥ng c·∫ßn c√°c h√†m n√†y n·ªØa v√¨ ƒë√£ import t·ª´ react-icons/fa