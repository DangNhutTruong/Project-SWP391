import React, { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { FaCalendarAlt, FaUsers, FaCheckCircle, FaClock, FaChartBar, FaComments, FaSearch, FaBell, FaUserMd, FaCheck, FaPaperPlane, FaTimes } from 'react-icons/fa';
import '../../styles/CoachDashboard.css';

function CoachDashboard() {
  const { user } = useAuth();
  const [stats, setStats] = useState({
    totalBookings: 0,
    upcomingBookings: 0,
    completedBookings: 0,
    totalClients: 0
  });
  const [recentBookings, setRecentBookings] = useState([]);
  const [loading, setLoading] = useState(true);

  // New messaging states
  const [activeTab, setActiveTab] = useState('dashboard');
  const [appointments, setAppointments] = useState([]);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [showMessaging, setShowMessaging] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [unreadCounts, setUnreadCounts] = useState({});
  const [messages, setMessages] = useState([]);
  const [messageInput, setMessageInput] = useState('');

  useEffect(() => {
    loadDashboardData();
  }, [user]);

  // New useEffect for loading appointments and unread counts
  useEffect(() => {
    if (user?.role === 'coach') {
      loadCoachAppointments();
      loadUnreadCounts();
    }
  }, [user]);

  const loadDashboardData = () => {
    if (!user || user.role !== 'coach') {
      setLoading(false);
      return;
    }

    try {
      // L·∫•y t·∫•t c·∫£ appointments t·ª´ localStorage
      const allAppointments = JSON.parse(localStorage.getItem('appointments') || '[]');
      
      // L·ªçc ch·ªâ nh·ªØng appointments c·ªßa coach hi·ªán t·∫°i
      const coachBookings = allAppointments.filter(appointment => 
        appointment.coachName === user.fullName || appointment.coachName === user.name
      );

      // T√≠nh to√°n th·ªëng k√™
      const now = new Date();
      const upcomingBookings = coachBookings.filter(booking => {
        const appointmentDate = new Date(booking.date);
        return appointmentDate >= now && booking.status !== 'cancelled';
      });

      const completedBookings = coachBookings.filter(booking => 
        booking.status === 'completed' || booking.completed === true
      );

      // L·∫•y danh s√°ch unique clients
      const uniqueClients = [...new Set(coachBookings.map(booking => booking.userId))];

      setStats({
        totalBookings: coachBookings.length,
        upcomingBookings: upcomingBookings.length,
        completedBookings: completedBookings.length,
        totalClients: uniqueClients.length
      });

      // L·∫•y 5 booking g·∫ßn ƒë√¢y nh·∫•t
      const sortedBookings = coachBookings
        .sort((a, b) => new Date(b.createdAt || b.date) - new Date(a.createdAt || a.date))
        .slice(0, 5);

      setRecentBookings(sortedBookings);

    } catch (error) {
      console.error('Error loading dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  // New messaging functions
  const loadCoachAppointments = () => {
    const storedAppointments = JSON.parse(localStorage.getItem('appointments')) || [];
    // Filter appointments for this coach based on coach name
    const coachAppointments = storedAppointments.filter(
      app => app.coachName === user?.fullName || app.coachName === user?.name
    );
    setAppointments(coachAppointments);
  };

  const loadUnreadCounts = () => {
    const storedAppointments = JSON.parse(localStorage.getItem('appointments')) || [];
    const coachAppointments = storedAppointments.filter(
      app => app.coachName === user?.fullName || app.coachName === user?.name
    );
    
    const counts = {};
    coachAppointments.forEach(appointment => {
      const chatKey = `coach_chat_${appointment.id}`;
      const messages = JSON.parse(localStorage.getItem(chatKey)) || [];
      const unreadCount = messages.filter(msg => 
        msg.sender === 'user' && !msg.readByCoach
      ).length;
      counts[appointment.id] = unreadCount;
    });
    
    setUnreadCounts(counts);
  };

  const handleSendMessage = (appointmentId, messageText) => {
    if (!messageText.trim()) return;

    const chatKey = `coach_chat_${appointmentId}`;
    const existingMessages = JSON.parse(localStorage.getItem(chatKey)) || [];
    
    const newMessage = {
      id: existingMessages.length + 1,
      text: messageText.trim(),
      sender: 'coach',
      timestamp: new Date().toISOString(),
      readByUser: false
    };

    const updatedMessages = [...existingMessages, newMessage];
    localStorage.setItem(chatKey, JSON.stringify(updatedMessages));

    // Mark as unread for user
    const userUnreadKey = `unread_messages_${appointmentId}`;
    const currentUserUnread = parseInt(localStorage.getItem(userUnreadKey) || '0');
    localStorage.setItem(userUnreadKey, (currentUserUnread + 1).toString());

    // Update local messages if this is the active chat
    if (selectedAppointment?.id === appointmentId) {
      setMessages(updatedMessages);
    }

    // Clear input
    setMessageInput('');
    
    // Trigger refresh
    loadUnreadCounts();
  };

  const handleOpenMessaging = (appointment) => {
    setSelectedAppointment(appointment);
    setShowMessaging(true);
    
    // Load messages for this appointment
    const chatKey = `coach_chat_${appointment.id}`;
    const chatMessages = JSON.parse(localStorage.getItem(chatKey)) || [];
    
    // Mark messages as read by coach
    const updatedMessages = chatMessages.map(msg => ({
      ...msg,
      readByCoach: msg.sender === 'user' ? true : msg.readByCoach
    }));
    localStorage.setItem(chatKey, JSON.stringify(updatedMessages));
    setMessages(updatedMessages);
    
    // Update unread counts
    loadUnreadCounts();
  };

  const handleConfirmAppointment = (appointmentId) => {
    const storedAppointments = JSON.parse(localStorage.getItem('appointments')) || [];
    const updatedAppointments = storedAppointments.map(app => 
      app.id === appointmentId ? { ...app, status: 'confirmed' } : app
    );
    localStorage.setItem('appointments', JSON.stringify(updatedAppointments));
    
    // Send confirmation message
    const appointment = appointments.find(a => a.id === appointmentId);
    if (appointment) {
      const confirmMessage = `Xin ch√†o ${appointment.userName}! T√¥i ƒë√£ x√°c nh·∫≠n l·ªãch h·∫πn c·ªßa b·∫°n v√†o ng√†y ${new Date(appointment.date).toLocaleDateString('vi-VN')} l√∫c ${appointment.time}. H√£y chu·∫©n b·ªã s·∫µn s√†ng nh√©! üòä`;
      handleSendMessage(appointmentId, confirmMessage);
    }
    
    loadCoachAppointments();
    loadDashboardData(); // Reload dashboard stats
  };

  const sendQuickMessage = (appointmentId, template) => {
    const quickMessages = {
      welcome: "Xin ch√†o! T√¥i s·∫Ω h·ªó tr·ª£ b·∫°n trong h√†nh tr√¨nh cai thu·ªëc. B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªõi t√¥i v·ªÅ t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa m√¨nh kh√¥ng?",
      reminder: "Nh·∫Øc nh·ªü: L·ªãch h·∫πn c·ªßa ch√∫ng ta s·∫Øp t·ªõi. B·∫°n ƒë√£ chu·∫©n b·ªã s·∫µn s√†ng ch∆∞a?",
      support: "T√¥i hi·ªÉu r·∫±ng cai thu·ªëc kh√¥ng d·ªÖ d√†ng. H√£y nh·ªõ r·∫±ng t√¥i lu√¥n ·ªü ƒë√¢y ƒë·ªÉ h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ c·∫£m th·∫•y kh√≥ khƒÉn g√¨ kh√¥ng?",
      progress: "H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o? H√£y chia s·∫ª v·ªõi t√¥i v·ªÅ ti·∫øn tr√¨nh cai thu·ªëc c·ªßa b·∫°n nh√©!",
      motivation: "B·∫°n ƒëang l√†m r·∫•t t·ªët! H√£y ti·∫øp t·ª•c ki√™n tr√¨, m·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng! üí™"
    };
    
    handleSendMessage(appointmentId, quickMessages[template]);
  };

  const getTotalUnreadMessages = () => {
    return Object.values(unreadCounts).reduce((total, count) => total + count, 0);
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const formatTime = (timeString) => {
    return timeString;
  };

  // Filter appointments for messaging tab
  const filteredAppointments = appointments.filter(appointment =>
    appointment.userName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    appointment.userEmail.toLowerCase().includes(searchTerm.toLowerCase())
  );

  // Guard clauses
  if (!user || user.role !== 'coach') {
    return (
      <div className="coach-dashboard-container">
        <div className="access-denied">
          <h2>Truy c·∫≠p b·ªã t·ª´ ch·ªëi</h2>
          <p>B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n coach ƒë·ªÉ xem trang n√†y.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="coach-dashboard-container">
        <div className="loading">
          <p>ƒêang t·∫£i d·ªØ li·ªáu dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="coach-dashboard-container">
      <div className="dashboard-header">
        <h1>
          <FaChartBar className="header-icon" />
          Coach Dashboard - {user?.fullName || user?.name}
        </h1>
        <div className="tab-navigation">
          <button 
            className={`tab-button ${activeTab === 'dashboard' ? 'active' : ''}`}
            onClick={() => setActiveTab('dashboard')}
          >
            <FaChartBar /> Dashboard
          </button>
          <button 
            className={`tab-button ${activeTab === 'messages' ? 'active' : ''}`}
            onClick={() => setActiveTab('messages')}
          >
            <FaComments /> Tin nh·∫Øn
            {getTotalUnreadMessages() > 0 && (
              <span className="unread-badge">{getTotalUnreadMessages()}</span>
            )}
          </button>
        </div>
      </div>

      {activeTab === 'dashboard' && (
        <div className="dashboard-content">
          <div className="stats-grid">
            <div className="stat-card total-bookings">
              <div className="stat-icon">
                <FaCalendarAlt />
              </div>
              <div className="stat-content">
                <h3>{stats.totalBookings}</h3>
                <p>T·ªïng s·ªë booking</p>
              </div>
            </div>

            <div className="stat-card upcoming-bookings">
              <div className="stat-icon">
                <FaClock />
              </div>
              <div className="stat-content">
                <h3>{stats.upcomingBookings}</h3>
                <p>L·ªãch s·∫Øp t·ªõi</p>
              </div>
            </div>

            <div className="stat-card completed-bookings">
              <div className="stat-icon">
                <FaCheckCircle />
              </div>
              <div className="stat-content">
                <h3>{stats.completedBookings}</h3>
                <p>ƒê√£ ho√†n th√†nh</p>
              </div>
            </div>

            <div className="stat-card total-clients">
              <div className="stat-icon">
                <FaUsers />
              </div>
              <div className="stat-content">
                <h3>{stats.totalClients}</h3>
                <p>T·ªïng kh√°ch h√†ng</p>
              </div>
            </div>
          </div>

          <div className="recent-bookings-section">
            <h2>L·ªãch h·∫πn g·∫ßn ƒë√¢y</h2>
            {recentBookings.length > 0 ? (
              <div className="bookings-list">
                {recentBookings.map(booking => (
                  <div key={booking.id} className="booking-item">
                    <div className="booking-info">
                      <h4>{booking.userName}</h4>
                      <p>{booking.userEmail}</p>
                      <span className="booking-date">
                        {new Date(booking.date).toLocaleDateString('vi-VN')} - {booking.time}
                      </span>
                    </div>
                    <div className="booking-status">
                      <span className={`status ${booking.status}`}>
                        {booking.status === 'confirmed' ? 'ƒê√£ x√°c nh·∫≠n' : 
                         booking.status === 'pending' ? 'Ch·ªù x√°c nh·∫≠n' : 'ƒê√£ ho√†n th√†nh'}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <p>Ch∆∞a c√≥ l·ªãch h·∫πn n√†o.</p>
            )}
          </div>
        </div>
      )}

      {activeTab === 'messages' && (
        <div className="messaging-section">
          <div className="section-header">
            <h2>Qu·∫£n l√Ω tin nh·∫Øn v·ªõi kh√°ch h√†ng</h2>
            <div className="search-bar">
              <FaSearch />
              <input
                type="text"
                placeholder="T√¨m ki·∫øm theo t√™n ho·∫∑c email..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
          </div>

          <div className="appointments-messaging-grid">
            {filteredAppointments.map(appointment => (
              <div 
                key={appointment.id} 
                className={`appointment-message-card ${unreadCounts[appointment.id] > 0 ? 'has-unread' : ''}`}
                onClick={() => handleOpenMessaging(appointment)}
              >
                <div className="appointment-info">
                  <h4>{appointment.userName || 'Ng∆∞·ªùi d√πng'}</h4>
                  <p>{appointment.userEmail}</p>
                  <div className="appointment-datetime">
                    <span>{formatDate(appointment.date)} - {appointment.time}</span>
                  </div>
                </div>
                <div className="appointment-status">
                  {appointment.status === 'confirmed' ? (
                    <span className="status-confirmed">ƒê√£ x√°c nh·∫≠n</span>
                  ) : appointment.status === 'pending' ? (
                    <div className="pending-actions">
                      <span className="status-pending">Ch∆∞a x√°c nh·∫≠n</span>
                      <button 
                        className="confirm-btn"
                        onClick={(e) => {
                          e.stopPropagation();
                          handleConfirmAppointment(appointment.id);
                        }}
                      >
                        <FaCheck /> X√°c nh·∫≠n
                      </button>
                    </div>
                  ) : (
                    <span className={`status-${appointment.status}`}>{appointment.status}</span>
                  )}
                </div>
                {unreadCounts[appointment.id] > 0 && (
                  <div className="unread-messages">
                    <FaBell />
                    <span className="unread-count">{unreadCounts[appointment.id]}</span>
                  </div>
                )}
              </div>
            ))}
          </div>

          {showMessaging && selectedAppointment && (
            <div className="chat-container">
              <div className="chat-header">
                <h3>Nh·∫Øn tin v·ªõi {selectedAppointment.userName}</h3>
                <button className="close-chat" onClick={() => setShowMessaging(false)}>
                  <FaTimes />
                </button>
              </div>
              <div className="chat-messages">
                {messages.length === 0 ? (
                  <div className="no-messages">
                    <p>Ch∆∞a c√≥ tin nh·∫Øn n√†o. H√£y g·ª≠i tin nh·∫Øn ch√†o h·ªèi!</p>
                  </div>
                ) : (
                  messages.map(message => (
                    <div key={message.id} className={`message-item ${message.sender}`}>
                      <div className="message-content">
                        <p>{message.text}</p>
                      </div>
                      <div className="message-info">
                        <span className="message-sender">{message.sender === 'coach' ? 'B·∫°n' : selectedAppointment.userName}</span>
                        <span className="message-timestamp">{new Date(message.timestamp).toLocaleTimeString('vi-VN')}</span>
                      </div>
                    </div>
                  ))
                )}
              </div>
              <div className="chat-input">
                <input 
                  type="text" 
                  placeholder="Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n..." 
                  value={messageInput}
                  onChange={e => setMessageInput(e.target.value)}
                  onKeyPress={e => e.key === 'Enter' && handleSendMessage(selectedAppointment.id, messageInput)}
                />
                <button 
                  className="send-button"
                  onClick={() => handleSendMessage(selectedAppointment.id, messageInput)}
                >
                  <FaPaperPlane />
                </button>
              </div>
              
              <div className="quick-messages">
                <h4>Tin nh·∫Øn nhanh:</h4>
                <div className="quick-message-buttons">
                  <button onClick={() => sendQuickMessage(selectedAppointment.id, 'welcome')}>
                    Ch√†o m·ª´ng
                  </button>
                  <button onClick={() => sendQuickMessage(selectedAppointment.id, 'reminder')}>
                    Nh·∫Øc nh·ªü
                  </button>
                  <button onClick={() => sendQuickMessage(selectedAppointment.id, 'support')}>
                    H·ªó tr·ª£
                  </button>
                  <button onClick={() => sendQuickMessage(selectedAppointment.id, 'progress')}>
                    Ti·∫øn tr√¨nh
                  </button>
                  <button onClick={() => sendQuickMessage(selectedAppointment.id, 'motivation')}>
                    ƒê·ªông vi√™n
                  </button>
                </div>
              </div>
            </div>
          )}

          {filteredAppointments.length === 0 && (
            <div className="no-appointments">
              <FaComments className="no-data-icon" />
              <h3>Ch∆∞a c√≥ cu·ªôc tr√≤ chuy·ªán n√†o</h3>
              <p>Khi c√≥ ng∆∞·ªùi ƒë·∫∑t l·ªãch h·∫πn v·ªõi b·∫°n, b·∫°n s·∫Ω c√≥ th·ªÉ nh·∫Øn tin v·ªõi h·ªç ·ªü ƒë√¢y.</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default CoachDashboard;
